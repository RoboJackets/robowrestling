
C:/src/battlebots-sumo/v3/BUMP/target/BUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001518  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1530  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000004  20000300  080a1534  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005a4  20000304  20000304  00030304  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1538  080a1538  00021538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1560  080a1560  00021560  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0007730f  00000000  00000000  00021564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000c3e4  00000000  00000000  00098873  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dc8d  00000000  00000000  000a4c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001760  00000000  00000000  000b28e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002410  00000000  00000000  000b4044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020f48  00000000  00000000  000b6454  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b6eb  00000000  00000000  000d739c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00084cb8  00000000  00000000  000f2a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a008  00000000  00000000  00177740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a0 12 0a 08                                         ....

080a001c <module_user_pre_init>:
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
 80a0020:	b508      	push	{r3, lr}
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f91b 	bl	80a1268 <memcpy>
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f920 	bl	80a127e <memset>
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1534 	.word	0x080a1534
 80a004c:	20000304 	.word	0x20000304
 80a0050:	20000304 	.word	0x20000304
 80a0054:	200008a8 	.word	0x200008a8
 80a0058:	200008a8 	.word	0x200008a8

080a005c <module_user_init>:
 80a005c:	b570      	push	{r4, r5, r6, lr}
 80a005e:	f000 fd57 	bl	80a0b10 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a14f8 	.word	0x080a14f8
 80a0084:	080a152c 	.word	0x080a152c

080a0088 <module_user_setup>:
 80a0088:	f000 b8ba 	b.w	80a0200 <setup>

080a008c <module_user_loop>:
 80a008c:	b508      	push	{r3, lr}
 80a008e:	f000 f8db 	bl	80a0248 <loop>
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0096:	f000 bcf9 	b.w	80a0a8c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bbaf 	b.w	80a07fc <free>

080a009e <__cxa_guard_acquire>:
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00ae:	6803      	ldr	r3, [r0, #0]
 80a00b0:	4718      	bx	r3

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z8getAccelv>:
int curAccel = 0;
LIS3DHSample sample;
Timer timer(100, getAccel);
LIS3DHI2C accel(Wire, 0, WKP);

void getAccel() {
 80a00cc:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a00ce:	4c05      	ldr	r4, [pc, #20]	; (80a00e4 <_Z8getAccelv+0x18>)
 80a00d0:	4805      	ldr	r0, [pc, #20]	; (80a00e8 <_Z8getAccelv+0x1c>)
 80a00d2:	4621      	mov	r1, r4
 80a00d4:	f000 f9b0 	bl	80a0438 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a00d8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a00dc:	4b03      	ldr	r3, [pc, #12]	; (80a00ec <_Z8getAccelv+0x20>)
 80a00de:	601a      	str	r2, [r3, #0]
 80a00e0:	bd10      	pop	{r4, pc}
 80a00e2:	bf00      	nop
 80a00e4:	20000308 	.word	0x20000308
 80a00e8:	20000310 	.word	0x20000310
 80a00ec:	20000340 	.word	0x20000340

080a00f0 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a00f0:	b510      	push	{r4, lr}
    {
		running = true;
 80a00f2:	2301      	movs	r3, #1
 80a00f4:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a00f6:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a00f8:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a00fa:	b113      	cbz	r3, 80a0102 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00fc:	6983      	ldr	r3, [r0, #24]
 80a00fe:	300c      	adds	r0, #12
 80a0100:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a0102:	2300      	movs	r3, #0
 80a0104:	7123      	strb	r3, [r4, #4]
 80a0106:	bd10      	pop	{r4, pc}

080a0108 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0108:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a010a:	2300      	movs	r3, #0
 80a010c:	a902      	add	r1, sp, #8
 80a010e:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a0112:	f000 fa61 	bl	80a05d8 <os_timer_get_id>
 80a0116:	b920      	cbnz	r0, 80a0122 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a0118:	9801      	ldr	r0, [sp, #4]
 80a011a:	b110      	cbz	r0, 80a0122 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a011c:	6803      	ldr	r3, [r0, #0]
 80a011e:	689b      	ldr	r3, [r3, #8]
 80a0120:	4798      	blx	r3
        }
    }
 80a0122:	b003      	add	sp, #12
 80a0124:	f85d fb04 	ldr.w	pc, [sp], #4

080a0128 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0128:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a012a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a012c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a012e:	b113      	cbz	r3, 80a0136 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0130:	2203      	movs	r2, #3
 80a0132:	4601      	mov	r1, r0
 80a0134:	4798      	blx	r3
    }
 80a0136:	4620      	mov	r0, r4
 80a0138:	bd10      	pop	{r4, pc}

080a013a <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a013a:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a013c:	6880      	ldr	r0, [r0, #8]
 80a013e:	2300      	movs	r3, #0
 80a0140:	b138      	cbz	r0, 80a0152 <_ZN5Timer5_stopEjb+0x18>
 80a0142:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a0146:	2102      	movs	r1, #2
 80a0148:	f000 fa4e 	bl	80a05e8 <os_timer_change>
 80a014c:	fab0 f080 	clz	r0, r0
 80a0150:	0940      	lsrs	r0, r0, #5
    }
 80a0152:	b003      	add	sp, #12
 80a0154:	f85d fb04 	ldr.w	pc, [sp], #4

080a0158 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0158:	b538      	push	{r3, r4, r5, lr}
 80a015a:	4b0e      	ldr	r3, [pc, #56]	; (80a0194 <_ZN5TimerD1Ev+0x3c>)
 80a015c:	4604      	mov	r4, r0
 80a015e:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0160:	6883      	ldr	r3, [r0, #8]
 80a0162:	b18b      	cbz	r3, 80a0188 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0164:	2200      	movs	r2, #0
 80a0166:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a016a:	f7ff ffe6 	bl	80a013a <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a016e:	7923      	ldrb	r3, [r4, #4]
 80a0170:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0174:	b11b      	cbz	r3, 80a017e <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a0176:	2001      	movs	r0, #1
 80a0178:	f000 fc52 	bl	80a0a20 <delay>
 80a017c:	e7f7      	b.n	80a016e <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a017e:	4629      	mov	r1, r5
 80a0180:	68a0      	ldr	r0, [r4, #8]
 80a0182:	f000 fa21 	bl	80a05c8 <os_timer_destroy>
            handle = nullptr;
 80a0186:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0188:	f104 000c 	add.w	r0, r4, #12
 80a018c:	f7ff ffcc 	bl	80a0128 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0190:	4620      	mov	r0, r4
 80a0192:	bd38      	pop	{r3, r4, r5, pc}
 80a0194:	080a12bc 	.word	0x080a12bc

080a0198 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0198:	b510      	push	{r4, lr}
 80a019a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a019c:	f7ff ffdc 	bl	80a0158 <_ZN5TimerD1Ev>
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	f7ff ff7a 	bl	80a009a <_ZdlPv>
 80a01a6:	4620      	mov	r0, r4
 80a01a8:	bd10      	pop	{r4, pc}
	...

080a01ac <_Z10accel_initv>:
}

//int state;          // movement state of robot

// Accelerometer
void accel_init() {
 80a01ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a01ae:	f000 fedf 	bl	80a0f70 <_Z19__fetch_global_Wirev>
 80a01b2:	4910      	ldr	r1, [pc, #64]	; (80a01f4 <_Z10accel_initv+0x48>)
 80a01b4:	f000 fe68 	bl	80a0e88 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
 80a01b8:	f000 feda 	bl	80a0f70 <_Z19__fetch_global_Wirev>
 80a01bc:	f000 fe68 	bl	80a0e90 <_ZN7TwoWire5beginEv>
  delay(500);
 80a01c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01c4:	f000 fc2c 	bl	80a0a20 <delay>
	LIS3DHConfig config;
 80a01c8:	a801      	add	r0, sp, #4
 80a01ca:	f000 f908 	bl	80a03de <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a01ce:	2150      	movs	r1, #80	; 0x50
 80a01d0:	a801      	add	r0, sp, #4
 80a01d2:	f000 f911 	bl	80a03f8 <_ZN12LIS3DHConfig12setAccelModeEh>
  
	bool setupSuccess = accel.setup(config);
 80a01d6:	a901      	add	r1, sp, #4
 80a01d8:	4807      	ldr	r0, [pc, #28]	; (80a01f8 <_Z10accel_initv+0x4c>)
 80a01da:	f000 f965 	bl	80a04a8 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a01de:	4604      	mov	r4, r0
	Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a01e0:	f000 fd4c 	bl	80a0c7c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a01e4:	4623      	mov	r3, r4
 80a01e6:	4a05      	ldr	r2, [pc, #20]	; (80a01fc <_Z10accel_initv+0x50>)
 80a01e8:	2101      	movs	r1, #1
 80a01ea:	f000 fbcd 	bl	80a0988 <_ZN5Print11printf_implEbPKcz>
}
 80a01ee:	b004      	add	sp, #16
 80a01f0:	bd10      	pop	{r4, pc}
 80a01f2:	bf00      	nop
 80a01f4:	000186a0 	.word	0x000186a0
 80a01f8:	20000310 	.word	0x20000310
 80a01fc:	080a12c8 	.word	0x080a12c8

080a0200 <setup>:

void setup()
{
 80a0200:	b513      	push	{r0, r1, r4, lr}
  Serial.begin(9600);
 80a0202:	f000 fd3b 	bl	80a0c7c <_Z16_fetch_usbserialv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0206:	4c0f      	ldr	r4, [pc, #60]	; (80a0244 <setup+0x44>)
 80a0208:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a020c:	f000 fd1c 	bl	80a0c48 <_ZN9USBSerial5beginEl>

  accel_init();
 80a0210:	f7ff ffcc 	bl	80a01ac <_Z10accel_initv>
 80a0214:	2200      	movs	r2, #0
 80a0216:	4611      	mov	r1, r2
 80a0218:	4620      	mov	r0, r4
 80a021a:	f7ff ff8e 	bl	80a013a <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a021e:	68a0      	ldr	r0, [r4, #8]
 80a0220:	b140      	cbz	r0, 80a0234 <setup+0x34>
 80a0222:	2300      	movs	r3, #0
 80a0224:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a0228:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a022c:	4619      	mov	r1, r3
 80a022e:	461a      	mov	r2, r3
 80a0230:	f000 f9da 	bl	80a05e8 <os_timer_change>
  timer.start();
  delay(1000);
 80a0234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a0238:	b002      	add	sp, #8
 80a023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  Serial.begin(9600);

  accel_init();
  timer.start();
  delay(1000);
 80a023e:	f000 bbef 	b.w	80a0a20 <delay>
 80a0242:	bf00      	nop
 80a0244:	20000324 	.word	0x20000324

080a0248 <loop>:
}

void loop()
{
 80a0248:	b508      	push	{r3, lr}
	Serial.println(curAccel);
 80a024a:	f000 fd17 	bl	80a0c7c <_Z16_fetch_usbserialv>
 80a024e:	4b03      	ldr	r3, [pc, #12]	; (80a025c <loop+0x14>)
 80a0250:	220a      	movs	r2, #10
 80a0252:	6819      	ldr	r1, [r3, #0]
}
 80a0254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
}

void loop()
{
	Serial.println(curAccel);
 80a0258:	f000 bb8c 	b.w	80a0974 <_ZN5Print7printlnEii>
 80a025c:	20000340 	.word	0x20000340

080a0260 <_GLOBAL__sub_I_SystemMode>:
}
 80a0260:	b570      	push	{r4, r5, r6, lr}
 80a0262:	b088      	sub	sp, #32
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0264:	f000 f988 	bl	80a0578 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

SYSTEM_THREAD(ENABLED);
 80a0268:	2100      	movs	r1, #0
 80a026a:	2001      	movs	r0, #1
 80a026c:	f000 faa6 	bl	80a07bc <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0270:	2003      	movs	r0, #3
 80a0272:	f000 fa93 	bl	80a079c <set_system_mode>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0276:	4b20      	ldr	r3, [pc, #128]	; (80a02f8 <_GLOBAL__sub_I_SystemMode+0x98>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0278:	ae04      	add	r6, sp, #16
 80a027a:	9304      	str	r3, [sp, #16]
 80a027c:	aa02      	add	r2, sp, #8
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a027e:	4c1f      	ldr	r4, [pc, #124]	; (80a02fc <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a0280:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0284:	4b1e      	ldr	r3, [pc, #120]	; (80a0300 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a0286:	e882 0003 	stmia.w	r2, {r0, r1}
 80a028a:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a028c:	f104 030c 	add.w	r3, r4, #12
 80a0290:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0294:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0298:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a029c:	e883 0003 	stmia.w	r3, {r0, r1}
 80a02a0:	4b18      	ldr	r3, [pc, #96]	; (80a0304 <_GLOBAL__sub_I_SystemMode+0xa4>)
 80a02a2:	2500      	movs	r5, #0
 80a02a4:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a02a6:	69a3      	ldr	r3, [r4, #24]
 80a02a8:	7125      	strb	r5, [r4, #4]
 80a02aa:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a02ac:	4b16      	ldr	r3, [pc, #88]	; (80a0308 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a02ae:	60a5      	str	r5, [r4, #8]
 80a02b0:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a02b2:	4a16      	ldr	r2, [pc, #88]	; (80a030c <_GLOBAL__sub_I_SystemMode+0xac>)
 80a02b4:	4623      	mov	r3, r4
 80a02b6:	2164      	movs	r1, #100	; 0x64
 80a02b8:	9501      	str	r5, [sp, #4]
 80a02ba:	9500      	str	r5, [sp, #0]
 80a02bc:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a02c0:	9506      	str	r5, [sp, #24]
 80a02c2:	f000 f979 	bl	80a05b8 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02c6:	4630      	mov	r0, r6
SYSTEM_MODE(MANUAL);

void getAccel();
int curAccel = 0;
LIS3DHSample sample;
Timer timer(100, getAccel);
 80a02c8:	4e11      	ldr	r6, [pc, #68]	; (80a0310 <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a02ca:	f7ff ff2d 	bl	80a0128 <_ZNSt14_Function_baseD1Ev>
 80a02ce:	4632      	mov	r2, r6
 80a02d0:	4910      	ldr	r1, [pc, #64]	; (80a0314 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	f000 fe6c 	bl	80a0fb0 <__aeabi_atexit>
LIS3DHI2C accel(Wire, 0, WKP);
 80a02d8:	f000 fe4a 	bl	80a0f70 <_Z19__fetch_global_Wirev>
 80a02dc:	4c0e      	ldr	r4, [pc, #56]	; (80a0318 <_GLOBAL__sub_I_SystemMode+0xb8>)
 80a02de:	2311      	movs	r3, #17
 80a02e0:	462a      	mov	r2, r5
 80a02e2:	4601      	mov	r1, r0
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	f000 f93b 	bl	80a0560 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a02ea:	4632      	mov	r2, r6
 80a02ec:	490b      	ldr	r1, [pc, #44]	; (80a031c <_GLOBAL__sub_I_SystemMode+0xbc>)
 80a02ee:	4620      	mov	r0, r4
 80a02f0:	f000 fe5e 	bl	80a0fb0 <__aeabi_atexit>
}

void loop()
{
	Serial.println(curAccel);
}
 80a02f4:	b008      	add	sp, #32
 80a02f6:	bd70      	pop	{r4, r5, r6, pc}
 80a02f8:	080a00cd 	.word	0x080a00cd
 80a02fc:	20000324 	.word	0x20000324
 80a0300:	080a12bc 	.word	0x080a12bc
 80a0304:	080a00b3 	.word	0x080a00b3
 80a0308:	080a00af 	.word	0x080a00af
 80a030c:	080a0109 	.word	0x080a0109
 80a0310:	20000304 	.word	0x20000304
 80a0314:	080a0159 	.word	0x080a0159
 80a0318:	20000310 	.word	0x20000310
 80a031c:	080a0325 	.word	0x080a0325

080a0320 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a0320:	f000 b92a 	b.w	80a0578 <HAL_Pin_Map>

080a0324 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a0324:	4770      	bx	lr

080a0326 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a0326:	b510      	push	{r4, lr}
 80a0328:	4604      	mov	r4, r0

}
 80a032a:	f7ff feb6 	bl	80a009a <_ZdlPv>
 80a032e:	4620      	mov	r0, r4
 80a0330:	bd10      	pop	{r4, pc}

080a0332 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a0332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0334:	4605      	mov	r5, r0
 80a0336:	461e      	mov	r6, r3
 80a0338:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a033a:	7c01      	ldrb	r1, [r0, #16]
 80a033c:	68c0      	ldr	r0, [r0, #12]
 80a033e:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a0342:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a0344:	f000 fdb8 	bl	80a0eb8 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a0348:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a034a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a034c:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a034e:	bf88      	it	hi
 80a0350:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a0354:	689b      	ldr	r3, [r3, #8]
 80a0356:	4639      	mov	r1, r7
 80a0358:	4798      	blx	r3
 80a035a:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a035c:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a035e:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a0360:	d005      	beq.n	80a036e <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a0362:	6803      	ldr	r3, [r0, #0]
 80a0364:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0368:	689b      	ldr	r3, [r3, #8]
 80a036a:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a036c:	e7f6      	b.n	80a035c <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a036e:	f000 fdab 	bl	80a0ec8 <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a0372:	fab0 f080 	clz	r0, r0
 80a0376:	0940      	lsrs	r0, r0, #5
 80a0378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a037a <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a037a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a037c:	4604      	mov	r4, r0
 80a037e:	461e      	mov	r6, r3
 80a0380:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a0382:	7c01      	ldrb	r1, [r0, #16]
 80a0384:	68c0      	ldr	r0, [r0, #12]
 80a0386:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a038a:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a038c:	f000 fd94 	bl	80a0eb8 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a0390:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a0392:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a0394:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a0396:	bf88      	it	hi
 80a0398:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a039c:	689b      	ldr	r3, [r3, #8]
 80a039e:	4639      	mov	r1, r7
 80a03a0:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a03a2:	68e0      	ldr	r0, [r4, #12]
 80a03a4:	f000 fd90 	bl	80a0ec8 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a03a8:	b9a8      	cbnz	r0, 80a03d6 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a03aa:	7c21      	ldrb	r1, [r4, #16]
 80a03ac:	4632      	mov	r2, r6
 80a03ae:	f041 0118 	orr.w	r1, r1, #24
 80a03b2:	68e0      	ldr	r0, [r4, #12]
 80a03b4:	f000 fd7b 	bl	80a0eae <_ZN7TwoWire11requestFromEii>
 80a03b8:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a03ba:	42ae      	cmp	r6, r5
 80a03bc:	d00d      	beq.n	80a03da <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a03be:	68e0      	ldr	r0, [r4, #12]
 80a03c0:	6803      	ldr	r3, [r0, #0]
 80a03c2:	691b      	ldr	r3, [r3, #16]
 80a03c4:	4798      	blx	r3
 80a03c6:	b140      	cbz	r0, 80a03da <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a03c8:	68e0      	ldr	r0, [r4, #12]
 80a03ca:	6803      	ldr	r3, [r0, #0]
 80a03cc:	695b      	ldr	r3, [r3, #20]
 80a03ce:	4798      	blx	r3
 80a03d0:	f805 0b01 	strb.w	r0, [r5], #1
 80a03d4:	e7f1      	b.n	80a03ba <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a03d6:	2000      	movs	r0, #0
 80a03d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a03da:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a03dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a03de <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a03de:	2200      	movs	r2, #0
 80a03e0:	7002      	strb	r2, [r0, #0]
 80a03e2:	7042      	strb	r2, [r0, #1]
 80a03e4:	7082      	strb	r2, [r0, #2]
 80a03e6:	70c2      	strb	r2, [r0, #3]
 80a03e8:	7102      	strb	r2, [r0, #4]
 80a03ea:	7142      	strb	r2, [r0, #5]
 80a03ec:	7182      	strb	r2, [r0, #6]
 80a03ee:	71c2      	strb	r2, [r0, #7]
 80a03f0:	7202      	strb	r2, [r0, #8]
 80a03f2:	7242      	strb	r2, [r0, #9]
 80a03f4:	7282      	strb	r2, [r0, #10]
}
 80a03f6:	4770      	bx	lr

080a03f8 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a03f8:	f041 0107 	orr.w	r1, r1, #7
 80a03fc:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a03fe:	4770      	bx	lr

080a0400 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a0400:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a0402:	6803      	ldr	r3, [r0, #0]
 80a0404:	aa01      	add	r2, sp, #4
 80a0406:	689c      	ldr	r4, [r3, #8]
 80a0408:	2301      	movs	r3, #1
 80a040a:	47a0      	blx	r4

	return resp[0];
}
 80a040c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a0410:	b002      	add	sp, #8
 80a0412:	bd10      	pop	{r4, pc}

080a0414 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a0414:	b538      	push	{r3, r4, r5, lr}
 80a0416:	4605      	mov	r5, r0
 80a0418:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a041a:	210f      	movs	r1, #15
 80a041c:	4628      	mov	r0, r5
 80a041e:	f7ff ffef 	bl	80a0400 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a0422:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a0424:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a0428:	d005      	beq.n	80a0436 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a042a:	f000 faf9 	bl	80a0a20 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a042e:	3c01      	subs	r4, #1
 80a0430:	d1f3      	bne.n	80a041a <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a0432:	4620      	mov	r0, r4
 80a0434:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a0436:	bd38      	pop	{r3, r4, r5, pc}

080a0438 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a0438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a043a:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a043c:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a043e:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a0440:	f7ff ffde 	bl	80a0400 <_ZN6LIS3DH13readRegister8Eh>
 80a0444:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a0448:	2800      	cmp	r0, #0
 80a044a:	bf14      	ite	ne
 80a044c:	2501      	movne	r5, #1
 80a044e:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a0450:	d01b      	beq.n	80a048a <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a0452:	6833      	ldr	r3, [r6, #0]
 80a0454:	466a      	mov	r2, sp
 80a0456:	689f      	ldr	r7, [r3, #8]
 80a0458:	2128      	movs	r1, #40	; 0x28
 80a045a:	2306      	movs	r3, #6
 80a045c:	4630      	mov	r0, r6
 80a045e:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a0460:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a0464:	f89d 3000 	ldrb.w	r3, [sp]
 80a0468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a046c:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a046e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a0472:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a047a:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a047c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0480:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0488:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a048a:	4628      	mov	r0, r5
 80a048c:	b003      	add	sp, #12
 80a048e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0490 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a0490:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a0492:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a0494:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a0496:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a049a:	68dd      	ldr	r5, [r3, #12]
 80a049c:	4622      	mov	r2, r4
 80a049e:	2301      	movs	r3, #1
 80a04a0:	47a8      	blx	r5
}
 80a04a2:	b003      	add	sp, #12
 80a04a4:	bd30      	pop	{r4, r5, pc}
	...

080a04a8 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a04a8:	b570      	push	{r4, r5, r6, lr}
 80a04aa:	4604      	mov	r4, r0
 80a04ac:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a04ae:	f7ff ffb1 	bl	80a0414 <_ZN6LIS3DH9hasDeviceEv>
 80a04b2:	4606      	mov	r6, r0
 80a04b4:	b928      	cbnz	r0, 80a04c2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a04b6:	f000 fbe1 	bl	80a0c7c <_Z16_fetch_usbserialv>
 80a04ba:	4928      	ldr	r1, [pc, #160]	; (80a055c <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a04bc:	f000 fa02 	bl	80a08c4 <_ZN5Print7printlnEPKc>
		return false;
 80a04c0:	e049      	b.n	80a0556 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a04c2:	782a      	ldrb	r2, [r5, #0]
 80a04c4:	2120      	movs	r1, #32
 80a04c6:	4620      	mov	r0, r4
 80a04c8:	f7ff ffe2 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a04cc:	786a      	ldrb	r2, [r5, #1]
 80a04ce:	2121      	movs	r1, #33	; 0x21
 80a04d0:	4620      	mov	r0, r4
 80a04d2:	f7ff ffdd 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a04d6:	78aa      	ldrb	r2, [r5, #2]
 80a04d8:	2122      	movs	r1, #34	; 0x22
 80a04da:	4620      	mov	r0, r4
 80a04dc:	f7ff ffd8 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a04e0:	78ea      	ldrb	r2, [r5, #3]
 80a04e2:	2123      	movs	r1, #35	; 0x23
 80a04e4:	4620      	mov	r0, r4
 80a04e6:	f7ff ffd3 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a04ea:	792a      	ldrb	r2, [r5, #4]
 80a04ec:	2124      	movs	r1, #36	; 0x24
 80a04ee:	4620      	mov	r0, r4
 80a04f0:	f7ff ffce 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a04f4:	796a      	ldrb	r2, [r5, #5]
 80a04f6:	2125      	movs	r1, #37	; 0x25
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f7ff ffc9 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a04fe:	79ab      	ldrb	r3, [r5, #6]
 80a0500:	b11b      	cbz	r3, 80a050a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a0502:	2126      	movs	r1, #38	; 0x26
 80a0504:	4620      	mov	r0, r4
 80a0506:	f7ff ff7b 	bl	80a0400 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a050a:	7aaa      	ldrb	r2, [r5, #10]
 80a050c:	212e      	movs	r1, #46	; 0x2e
 80a050e:	4620      	mov	r0, r4
 80a0510:	f7ff ffbe 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a0514:	78ab      	ldrb	r3, [r5, #2]
 80a0516:	065b      	lsls	r3, r3, #25
 80a0518:	d51d      	bpl.n	80a0556 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a051a:	79ea      	ldrb	r2, [r5, #7]
 80a051c:	2132      	movs	r1, #50	; 0x32
 80a051e:	4620      	mov	r0, r4
 80a0520:	f7ff ffb6 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a0524:	7a2a      	ldrb	r2, [r5, #8]
 80a0526:	2133      	movs	r1, #51	; 0x33
 80a0528:	4620      	mov	r0, r4
 80a052a:	f7ff ffb1 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a052e:	6863      	ldr	r3, [r4, #4]
 80a0530:	2b00      	cmp	r3, #0
 80a0532:	db0a      	blt.n	80a054a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a0534:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a0536:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a0538:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a053a:	2130      	movs	r1, #48	; 0x30
 80a053c:	f7ff ffa8 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a0540:	2131      	movs	r1, #49	; 0x31
 80a0542:	4620      	mov	r0, r4
 80a0544:	f7ff ff5c 	bl	80a0400 <_ZN6LIS3DH13readRegister8Eh>
 80a0548:	e005      	b.n	80a0556 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a054a:	2200      	movs	r2, #0
 80a054c:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a054e:	2130      	movs	r1, #48	; 0x30
 80a0550:	4620      	mov	r0, r4
 80a0552:	f7ff ff9d 	bl	80a0490 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a0556:	4630      	mov	r0, r6
 80a0558:	bd70      	pop	{r4, r5, r6, pc}
 80a055a:	bf00      	nop
 80a055c:	080a12f0 	.word	0x080a12f0

080a0560 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a0560:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a0562:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a0564:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a0566:	60c1      	str	r1, [r0, #12]
 80a0568:	6003      	str	r3, [r0, #0]
 80a056a:	7402      	strb	r2, [r0, #16]

}
 80a056c:	bd10      	pop	{r4, pc}
 80a056e:	bf00      	nop
 80a0570:	080a12e0 	.word	0x080a12e0

080a0574 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a0574:	f000 b800 	b.w	80a0578 <HAL_Pin_Map>

080a0578 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_Pin_Map+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	681b      	ldr	r3, [r3, #0]
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601b0 	.word	0x080601b0

080a0588 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_SPI_Init+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	69db      	ldr	r3, [r3, #28]
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601b4 	.word	0x080601b4

080a0598 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_RNG_GetRandomNumber+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	685b      	ldr	r3, [r3, #4]
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	0806019c 	.word	0x0806019c

080a05a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	695b      	ldr	r3, [r3, #20]
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	0806019c 	.word	0x0806019c

080a05b8 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <os_timer_create+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	6a1b      	ldr	r3, [r3, #32]
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601d0 	.word	0x080601d0

080a05c8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <os_timer_destroy+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601d0 	.word	0x080601d0

080a05d8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <os_timer_get_id+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601d0 	.word	0x080601d0

080a05e8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <os_timer_change+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601d0 	.word	0x080601d0

080a05f8 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <os_mutex_create+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601d0 	.word	0x080601d0

080a0608 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <HAL_USART_Init+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	699b      	ldr	r3, [r3, #24]
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601c4 	.word	0x080601c4

080a0618 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <HAL_USART_Write_Data+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601c4 	.word	0x080601c4

080a0628 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <HAL_USART_Available_Data+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601c4 	.word	0x080601c4

080a0638 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <HAL_USART_Read_Data+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601c4 	.word	0x080601c4

080a0648 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <HAL_USART_Peek_Data+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601c4 	.word	0x080601c4

080a0658 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <HAL_USART_Flush_Data+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601c4 	.word	0x080601c4

080a0668 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <HAL_USART_Available_Data_For_Write+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601c4 	.word	0x080601c4

080a0678 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <HAL_I2C_Set_Speed+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601ac 	.word	0x080601ac

080a0688 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <HAL_I2C_Begin+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601ac 	.word	0x080601ac

080a0698 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <HAL_I2C_Request_Data+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601ac 	.word	0x080601ac

080a06a8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <HAL_I2C_Begin_Transmission+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601ac 	.word	0x080601ac

080a06b8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <HAL_I2C_End_Transmission+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601ac 	.word	0x080601ac

080a06c8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <HAL_I2C_Write_Data+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601ac 	.word	0x080601ac

080a06d8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <HAL_I2C_Available_Data+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601ac 	.word	0x080601ac

080a06e8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <HAL_I2C_Read_Data+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601ac 	.word	0x080601ac

080a06f8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <HAL_I2C_Peek_Data+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601ac 	.word	0x080601ac

080a0708 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <HAL_I2C_Flush_Data+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601ac 	.word	0x080601ac

080a0718 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b03      	ldr	r3, [pc, #12]	; (80a0728 <HAL_I2C_Init+0x10>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0722:	9301      	str	r3, [sp, #4]
 80a0724:	bd08      	pop	{r3, pc}
 80a0726:	0000      	.short	0x0000
 80a0728:	080601ac 	.word	0x080601ac

080a072c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <HAL_USB_USART_Init+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	681b      	ldr	r3, [r3, #0]
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601d8 	.word	0x080601d8

080a073c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <HAL_USB_USART_Begin+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	685b      	ldr	r3, [r3, #4]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601d8 	.word	0x080601d8

080a074c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <HAL_USB_USART_Available_Data+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	691b      	ldr	r3, [r3, #16]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601d8 	.word	0x080601d8

080a075c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	695b      	ldr	r3, [r3, #20]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601d8 	.word	0x080601d8

080a076c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <HAL_USB_USART_Receive_Data+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	699b      	ldr	r3, [r3, #24]
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601d8 	.word	0x080601d8

080a077c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <HAL_USB_USART_Send_Data+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	69db      	ldr	r3, [r3, #28]
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601d8 	.word	0x080601d8

080a078c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <HAL_USB_USART_Flush_Data+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	6a1b      	ldr	r3, [r3, #32]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601d8 	.word	0x080601d8

080a079c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <set_system_mode+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	685b      	ldr	r3, [r3, #4]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601a4 	.word	0x080601a4

080a07ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <system_delay_ms+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	695b      	ldr	r3, [r3, #20]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601a4 	.word	0x080601a4

080a07bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <system_thread_set_state+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601a4 	.word	0x080601a4

080a07cc <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <system_set_usb_request_app_handler+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601a4 	.word	0x080601a4

080a07dc <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <system_set_usb_request_result+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601a4 	.word	0x080601a4

080a07ec <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <network_ready+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	691b      	ldr	r3, [r3, #16]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601c8 	.word	0x080601c8

080a07fc <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <free+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	685b      	ldr	r3, [r3, #4]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601a0 	.word	0x080601a0

080a080c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <vsnprintf+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601a0 	.word	0x080601a0

080a081c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a081c:	4770      	bx	lr

080a081e <_ZN8SPIClassD0Ev>:
 80a081e:	b510      	push	{r4, lr}
 80a0820:	4604      	mov	r4, r0
 80a0822:	f7ff fc3a 	bl	80a009a <_ZdlPv>
 80a0826:	4620      	mov	r0, r4
 80a0828:	bd10      	pop	{r4, pc}
	...

080a082c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a082c:	b570      	push	{r4, r5, r6, lr}
 80a082e:	4604      	mov	r4, r0
 80a0830:	460e      	mov	r6, r1
 80a0832:	4b07      	ldr	r3, [pc, #28]	; (80a0850 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a0834:	2500      	movs	r5, #0
 80a0836:	6003      	str	r3, [r0, #0]
 80a0838:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a083c:	f7ff fedc 	bl	80a05f8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0840:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0842:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0844:	f7ff fea0 	bl	80a0588 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0848:	60a5      	str	r5, [r4, #8]
}
 80a084a:	4620      	mov	r0, r4
 80a084c:	bd70      	pop	{r4, r5, r6, pc}
 80a084e:	bf00      	nop
 80a0850:	080a133c 	.word	0x080a133c

080a0854 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0854:	2000      	movs	r0, #0
 80a0856:	f7ff bfa1 	b.w	80a079c <set_system_mode>

080a085a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a085a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a085c:	4606      	mov	r6, r0
 80a085e:	460d      	mov	r5, r1
 80a0860:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0862:	2400      	movs	r4, #0
  while (size--) {
 80a0864:	42bd      	cmp	r5, r7
 80a0866:	d00c      	beq.n	80a0882 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0868:	6833      	ldr	r3, [r6, #0]
 80a086a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a086e:	689b      	ldr	r3, [r3, #8]
 80a0870:	4630      	mov	r0, r6
 80a0872:	4798      	blx	r3
     if (chunk>=0)
 80a0874:	2800      	cmp	r0, #0
 80a0876:	db01      	blt.n	80a087c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0878:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a087a:	e7f3      	b.n	80a0864 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a087c:	2c00      	cmp	r4, #0
 80a087e:	bf08      	it	eq
 80a0880:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0882:	4620      	mov	r0, r4
 80a0884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0886 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0886:	b570      	push	{r4, r5, r6, lr}
 80a0888:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a088a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a088c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a088e:	b149      	cbz	r1, 80a08a4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0890:	f000 fcfd 	bl	80a128e <strlen>
 80a0894:	682b      	ldr	r3, [r5, #0]
 80a0896:	4602      	mov	r2, r0
 80a0898:	4621      	mov	r1, r4
 80a089a:	4628      	mov	r0, r5
    }
 80a089c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a08a0:	68db      	ldr	r3, [r3, #12]
 80a08a2:	4718      	bx	r3
    }
 80a08a4:	bd70      	pop	{r4, r5, r6, pc}

080a08a6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a08a6:	6803      	ldr	r3, [r0, #0]
 80a08a8:	689b      	ldr	r3, [r3, #8]
 80a08aa:	4718      	bx	r3

080a08ac <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a08ac:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a08ae:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a08b0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a08b2:	f7ff fff8 	bl	80a08a6 <_ZN5Print5printEc>
  n += print('\n');
 80a08b6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a08b8:	4604      	mov	r4, r0
  n += print('\n');
 80a08ba:	4628      	mov	r0, r5
 80a08bc:	f7ff fff3 	bl	80a08a6 <_ZN5Print5printEc>
  return n;
}
 80a08c0:	4420      	add	r0, r4
 80a08c2:	bd38      	pop	{r3, r4, r5, pc}

080a08c4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a08c4:	b538      	push	{r3, r4, r5, lr}
 80a08c6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a08c8:	f7ff ffdd 	bl	80a0886 <_ZN5Print5writeEPKc>
 80a08cc:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a08ce:	4628      	mov	r0, r5
 80a08d0:	f7ff ffec 	bl	80a08ac <_ZN5Print7printlnEv>
  return n;
}
 80a08d4:	4420      	add	r0, r4
 80a08d6:	bd38      	pop	{r3, r4, r5, pc}

080a08d8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a08d8:	2a01      	cmp	r2, #1
 80a08da:	bf98      	it	ls
 80a08dc:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a08de:	b530      	push	{r4, r5, lr}
 80a08e0:	460b      	mov	r3, r1
 80a08e2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a08e4:	2100      	movs	r1, #0
 80a08e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a08ea:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a08ee:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a08f2:	fb05 3312 	mls	r3, r5, r2, r3
 80a08f6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a08f8:	2b09      	cmp	r3, #9
 80a08fa:	bf94      	ite	ls
 80a08fc:	3330      	addls	r3, #48	; 0x30
 80a08fe:	3337      	addhi	r3, #55	; 0x37
 80a0900:	b2db      	uxtb	r3, r3
 80a0902:	4621      	mov	r1, r4
 80a0904:	f804 3901 	strb.w	r3, [r4], #-1
 80a0908:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a090a:	2d00      	cmp	r5, #0
 80a090c:	d1ef      	bne.n	80a08ee <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a090e:	f7ff ffba 	bl	80a0886 <_ZN5Print5writeEPKc>
}
 80a0912:	b00b      	add	sp, #44	; 0x2c
 80a0914:	bd30      	pop	{r4, r5, pc}

080a0916 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0916:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0918:	b922      	cbnz	r2, 80a0924 <_ZN5Print5printEmi+0xe>
 80a091a:	6803      	ldr	r3, [r0, #0]
 80a091c:	b2c9      	uxtb	r1, r1
 80a091e:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0920:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0922:	4718      	bx	r3
  else return printNumber(n, base);
 80a0924:	b2d2      	uxtb	r2, r2
}
 80a0926:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0928:	f7ff bfd6 	b.w	80a08d8 <_ZN5Print11printNumberEmh>

080a092c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a092c:	f7ff bff3 	b.w	80a0916 <_ZN5Print5printEmi>

080a0930 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0934:	4607      	mov	r7, r0
 80a0936:	460e      	mov	r6, r1
  if (base == 0) {
 80a0938:	4615      	mov	r5, r2
 80a093a:	b92a      	cbnz	r2, 80a0948 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a093c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0940:	6803      	ldr	r3, [r0, #0]
 80a0942:	b2c9      	uxtb	r1, r1
 80a0944:	689b      	ldr	r3, [r3, #8]
 80a0946:	4718      	bx	r3
  } else if (base == 10) {
 80a0948:	2a0a      	cmp	r2, #10
 80a094a:	d102      	bne.n	80a0952 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a094c:	2900      	cmp	r1, #0
 80a094e:	da01      	bge.n	80a0954 <_ZN5Print5printEli+0x24>
 80a0950:	e004      	b.n	80a095c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0952:	b2d2      	uxtb	r2, r2
  }
}
 80a0954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0958:	f7ff bfbe 	b.w	80a08d8 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a095c:	212d      	movs	r1, #45	; 0x2d
 80a095e:	f7ff ffa2 	bl	80a08a6 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0962:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0964:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0966:	4271      	negs	r1, r6
 80a0968:	4638      	mov	r0, r7
 80a096a:	f7ff ffb5 	bl	80a08d8 <_ZN5Print11printNumberEmh>
 80a096e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0974 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a0974:	b538      	push	{r3, r4, r5, lr}
 80a0976:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0978:	f7ff ffda 	bl	80a0930 <_ZN5Print5printEli>
 80a097c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a097e:	4628      	mov	r0, r5
 80a0980:	f7ff ff94 	bl	80a08ac <_ZN5Print7printlnEv>
  return n;
}
 80a0984:	4420      	add	r0, r4
 80a0986:	bd38      	pop	{r3, r4, r5, pc}

080a0988 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a0988:	b40c      	push	{r2, r3}
 80a098a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a098e:	b087      	sub	sp, #28
 80a0990:	af00      	add	r7, sp, #0
 80a0992:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a0996:	f854 9b04 	ldr.w	r9, [r4], #4
 80a099a:	4605      	mov	r5, r0
 80a099c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a099e:	4623      	mov	r3, r4
 80a09a0:	464a      	mov	r2, r9
 80a09a2:	2114      	movs	r1, #20
 80a09a4:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a09a6:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a09a8:	f7ff ff30 	bl	80a080c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a09ac:	2813      	cmp	r0, #19
 80a09ae:	d805      	bhi.n	80a09bc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a09b0:	1d39      	adds	r1, r7, #4
 80a09b2:	4628      	mov	r0, r5
 80a09b4:	f7ff ff67 	bl	80a0886 <_ZN5Print5writeEPKc>
 80a09b8:	4604      	mov	r4, r0
 80a09ba:	e013      	b.n	80a09e4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a09bc:	f100 0308 	add.w	r3, r0, #8
 80a09c0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a09c4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a09c6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a09ca:	1c41      	adds	r1, r0, #1
 80a09cc:	4623      	mov	r3, r4
 80a09ce:	464a      	mov	r2, r9
 80a09d0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a09d2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a09d4:	f7ff ff1a 	bl	80a080c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a09d8:	4669      	mov	r1, sp
 80a09da:	4628      	mov	r0, r5
 80a09dc:	f7ff ff53 	bl	80a0886 <_ZN5Print5writeEPKc>
 80a09e0:	4604      	mov	r4, r0
 80a09e2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a09e4:	b11e      	cbz	r6, 80a09ee <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a09e6:	4628      	mov	r0, r5
 80a09e8:	f7ff ff60 	bl	80a08ac <_ZN5Print7printlnEv>
 80a09ec:	4404      	add	r4, r0
    return n;
}
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	371c      	adds	r7, #28
 80a09f2:	46bd      	mov	sp, r7
 80a09f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a09f8:	b002      	add	sp, #8
 80a09fa:	4770      	bx	lr

080a09fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a09fc:	4a01      	ldr	r2, [pc, #4]	; (80a0a04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a00:	601a      	str	r2, [r3, #0]
 80a0a02:	4770      	bx	lr
 80a0a04:	080a13fc 	.word	0x080a13fc
 80a0a08:	20000344 	.word	0x20000344

080a0a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0a0c:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0a0e:	681a      	ldr	r2, [r3, #0]
 80a0a10:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0a12:	601a      	str	r2, [r3, #0]
 80a0a14:	4770      	bx	lr
 80a0a16:	bf00      	nop
 80a0a18:	20000300 	.word	0x20000300
 80a0a1c:	20000348 	.word	0x20000348

080a0a20 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a20:	2100      	movs	r1, #0
 80a0a22:	f7ff bec3 	b.w	80a07ac <system_delay_ms>
	...

080a0a28 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0a28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0a2a:	4b14      	ldr	r3, [pc, #80]	; (80a0a7c <serialEventRun+0x54>)
 80a0a2c:	b133      	cbz	r3, 80a0a3c <serialEventRun+0x14>
 80a0a2e:	f000 f925 	bl	80a0c7c <_Z16_fetch_usbserialv>
 80a0a32:	6803      	ldr	r3, [r0, #0]
 80a0a34:	691b      	ldr	r3, [r3, #16]
 80a0a36:	4798      	blx	r3
 80a0a38:	2800      	cmp	r0, #0
 80a0a3a:	dc16      	bgt.n	80a0a6a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0a3c:	4b10      	ldr	r3, [pc, #64]	; (80a0a80 <serialEventRun+0x58>)
 80a0a3e:	b133      	cbz	r3, 80a0a4e <serialEventRun+0x26>
 80a0a40:	f000 f9be 	bl	80a0dc0 <_Z22__fetch_global_Serial1v>
 80a0a44:	6803      	ldr	r3, [r0, #0]
 80a0a46:	691b      	ldr	r3, [r3, #16]
 80a0a48:	4798      	blx	r3
 80a0a4a:	2800      	cmp	r0, #0
 80a0a4c:	dc10      	bgt.n	80a0a70 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0a4e:	4b0d      	ldr	r3, [pc, #52]	; (80a0a84 <serialEventRun+0x5c>)
 80a0a50:	b10b      	cbz	r3, 80a0a56 <serialEventRun+0x2e>
 80a0a52:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0a56:	4b0c      	ldr	r3, [pc, #48]	; (80a0a88 <serialEventRun+0x60>)
 80a0a58:	b17b      	cbz	r3, 80a0a7a <serialEventRun+0x52>
 80a0a5a:	f000 f94b 	bl	80a0cf4 <_Z17_fetch_usbserial1v>
 80a0a5e:	6803      	ldr	r3, [r0, #0]
 80a0a60:	691b      	ldr	r3, [r3, #16]
 80a0a62:	4798      	blx	r3
 80a0a64:	2800      	cmp	r0, #0
 80a0a66:	dc06      	bgt.n	80a0a76 <serialEventRun+0x4e>
 80a0a68:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0a6a:	f3af 8000 	nop.w
 80a0a6e:	e7e5      	b.n	80a0a3c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0a70:	f3af 8000 	nop.w
 80a0a74:	e7eb      	b.n	80a0a4e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0a76:	f3af 8000 	nop.w
 80a0a7a:	bd08      	pop	{r3, pc}
	...

080a0a8c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0a8c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0a8e:	f7ff ffcb 	bl	80a0a28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0a92:	f7ff fd89 	bl	80a05a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0a96:	4b01      	ldr	r3, [pc, #4]	; (80a0a9c <_post_loop+0x10>)
 80a0a98:	6018      	str	r0, [r3, #0]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	200007d4 	.word	0x200007d4

080a0aa0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0aa0:	4802      	ldr	r0, [pc, #8]	; (80a0aac <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0aa2:	4a03      	ldr	r2, [pc, #12]	; (80a0ab0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0aa4:	4903      	ldr	r1, [pc, #12]	; (80a0ab4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0aa6:	1a12      	subs	r2, r2, r0
 80a0aa8:	f000 bbde 	b.w	80a1268 <memcpy>
 80a0aac:	40024000 	.word	0x40024000
 80a0ab0:	40024004 	.word	0x40024004
 80a0ab4:	080a1530 	.word	0x080a1530

080a0ab8 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a0ab8:	2000      	movs	r0, #0
 80a0aba:	4770      	bx	lr

080a0abc <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a0abe:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0ac0:	4604      	mov	r4, r0
    switch (req->type) {
 80a0ac2:	2b0a      	cmp	r3, #10
 80a0ac4:	d00e      	beq.n	80a0ae4 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a0ac6:	2b50      	cmp	r3, #80	; 0x50
 80a0ac8:	d11c      	bne.n	80a0b04 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a0aca:	4b10      	ldr	r3, [pc, #64]	; (80a0b0c <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a0acc:	681d      	ldr	r5, [r3, #0]
 80a0ace:	b1cd      	cbz	r5, 80a0b04 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a0ad0:	7d03      	ldrb	r3, [r0, #20]
 80a0ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a0ad6:	9300      	str	r3, [sp, #0]
 80a0ad8:	68c2      	ldr	r2, [r0, #12]
 80a0ada:	f100 0310 	add.w	r3, r0, #16
 80a0ade:	6880      	ldr	r0, [r0, #8]
 80a0ae0:	47a8      	blx	r5
 80a0ae2:	e007      	b.n	80a0af4 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a0ae4:	f100 0310 	add.w	r3, r0, #16
 80a0ae8:	68c2      	ldr	r2, [r0, #12]
 80a0aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a0aee:	6880      	ldr	r0, [r0, #8]
 80a0af0:	f7ff ffe2 	bl	80a0ab8 <_Z26usb_request_custom_handlerPcjjPj>
 80a0af4:	b130      	cbz	r0, 80a0b04 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a0af6:	2200      	movs	r2, #0
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	4611      	mov	r1, r2
 80a0afc:	f7ff fe6e 	bl	80a07dc <system_set_usb_request_result>
        return true;
 80a0b00:	2001      	movs	r0, #1
 80a0b02:	e000      	b.n	80a0b06 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a0b04:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a0b06:	b003      	add	sp, #12
 80a0b08:	bd30      	pop	{r4, r5, pc}
 80a0b0a:	bf00      	nop
 80a0b0c:	2000034c 	.word	0x2000034c

080a0b10 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a0b10:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0b12:	4c0c      	ldr	r4, [pc, #48]	; (80a0b44 <module_user_init_hook+0x34>)
 80a0b14:	4d0c      	ldr	r5, [pc, #48]	; (80a0b48 <module_user_init_hook+0x38>)
 80a0b16:	6823      	ldr	r3, [r4, #0]
 80a0b18:	42ab      	cmp	r3, r5
 80a0b1a:	4b0c      	ldr	r3, [pc, #48]	; (80a0b4c <module_user_init_hook+0x3c>)
 80a0b1c:	bf0c      	ite	eq
 80a0b1e:	2201      	moveq	r2, #1
 80a0b20:	2200      	movne	r2, #0
 80a0b22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0b24:	d002      	beq.n	80a0b2c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0b26:	f7ff ffbb 	bl	80a0aa0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0b2a:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a0b2c:	4b08      	ldr	r3, [pc, #32]	; (80a0b50 <module_user_init_hook+0x40>)
 80a0b2e:	b11b      	cbz	r3, 80a0b38 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0b30:	f7ff fd32 	bl	80a0598 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a0b34:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a0b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a0b3c:	2100      	movs	r1, #0
 80a0b3e:	4805      	ldr	r0, [pc, #20]	; (80a0b54 <module_user_init_hook+0x44>)
 80a0b40:	f7ff be44 	b.w	80a07cc <system_set_usb_request_app_handler>
 80a0b44:	40024000 	.word	0x40024000
 80a0b48:	9a271c1e 	.word	0x9a271c1e
 80a0b4c:	20000350 	.word	0x20000350
 80a0b50:	00000000 	.word	0x00000000
 80a0b54:	080a0abd 	.word	0x080a0abd

080a0b58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0b58:	4770      	bx	lr

080a0b5a <_ZN9IPAddressD0Ev>:
 80a0b5a:	b510      	push	{r4, lr}
 80a0b5c:	4604      	mov	r4, r0
 80a0b5e:	f7ff fa9c 	bl	80a009a <_ZdlPv>
 80a0b62:	4620      	mov	r0, r4
 80a0b64:	bd10      	pop	{r4, pc}

080a0b66 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b68:	460f      	mov	r7, r1
 80a0b6a:	f100 0608 	add.w	r6, r0, #8
 80a0b6e:	1d05      	adds	r5, r0, #4
 80a0b70:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0b76:	220a      	movs	r2, #10
 80a0b78:	4638      	mov	r0, r7
 80a0b7a:	f7ff fed7 	bl	80a092c <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b7e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b80:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b82:	d007      	beq.n	80a0b94 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0b84:	2c00      	cmp	r4, #0
 80a0b86:	d0f4      	beq.n	80a0b72 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0b88:	212e      	movs	r1, #46	; 0x2e
 80a0b8a:	4638      	mov	r0, r7
 80a0b8c:	f7ff fe8b 	bl	80a08a6 <_ZN5Print5printEc>
 80a0b90:	4404      	add	r4, r0
 80a0b92:	e7ee      	b.n	80a0b72 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0b94:	4620      	mov	r0, r4
 80a0b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0b98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0ba2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0ba6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0baa:	2304      	movs	r3, #4
 80a0bac:	6041      	str	r1, [r0, #4]
 80a0bae:	7503      	strb	r3, [r0, #20]
 80a0bb0:	bd10      	pop	{r4, pc}
	...

080a0bb4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0bb6:	4d04      	ldr	r5, [pc, #16]	; (80a0bc8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0bb8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0bba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0bbe:	9500      	str	r5, [sp, #0]
 80a0bc0:	f7ff ffea 	bl	80a0b98 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0bc4:	b003      	add	sp, #12
 80a0bc6:	bd30      	pop	{r4, r5, pc}
 80a0bc8:	080a1458 	.word	0x080a1458

080a0bcc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0bcc:	7441      	strb	r1, [r0, #17]
 80a0bce:	4770      	bx	lr

080a0bd0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0bd0:	4770      	bx	lr

080a0bd2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0bd2:	2100      	movs	r1, #0
 80a0bd4:	7c00      	ldrb	r0, [r0, #16]
 80a0bd6:	f7ff bdc9 	b.w	80a076c <HAL_USB_USART_Receive_Data>

080a0bda <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0bda:	2101      	movs	r1, #1
 80a0bdc:	7c00      	ldrb	r0, [r0, #16]
 80a0bde:	f7ff bdc5 	b.w	80a076c <HAL_USB_USART_Receive_Data>

080a0be2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0be2:	7c00      	ldrb	r0, [r0, #16]
 80a0be4:	f7ff bdba 	b.w	80a075c <HAL_USB_USART_Available_Data_For_Write>

080a0be8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0be8:	7c00      	ldrb	r0, [r0, #16]
 80a0bea:	f7ff bdaf 	b.w	80a074c <HAL_USB_USART_Available_Data>

080a0bee <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0bee:	b538      	push	{r3, r4, r5, lr}
 80a0bf0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bf2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0bf4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bf6:	f7ff fdb1 	bl	80a075c <HAL_USB_USART_Available_Data_For_Write>
 80a0bfa:	2800      	cmp	r0, #0
 80a0bfc:	dc01      	bgt.n	80a0c02 <_ZN9USBSerial5writeEh+0x14>
 80a0bfe:	7c60      	ldrb	r0, [r4, #17]
 80a0c00:	b120      	cbz	r0, 80a0c0c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a0c02:	4629      	mov	r1, r5
 80a0c04:	7c20      	ldrb	r0, [r4, #16]
 80a0c06:	f7ff fdb9 	bl	80a077c <HAL_USB_USART_Send_Data>
    return 1;
 80a0c0a:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0c0c:	bd38      	pop	{r3, r4, r5, pc}

080a0c0e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0c0e:	7c00      	ldrb	r0, [r0, #16]
 80a0c10:	f7ff bdbc 	b.w	80a078c <HAL_USB_USART_Flush_Data>

080a0c14 <_ZN9USBSerialD0Ev>:
 80a0c14:	b510      	push	{r4, lr}
 80a0c16:	4604      	mov	r4, r0
 80a0c18:	f7ff fa3f 	bl	80a009a <_ZdlPv>
 80a0c1c:	4620      	mov	r0, r4
 80a0c1e:	bd10      	pop	{r4, pc}

080a0c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c20:	b510      	push	{r4, lr}
 80a0c22:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c24:	2300      	movs	r3, #0
 80a0c26:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c2c:	60a3      	str	r3, [r4, #8]
 80a0c2e:	4b05      	ldr	r3, [pc, #20]	; (80a0c44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0c30:	4608      	mov	r0, r1
 80a0c32:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0c34:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0c36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0c38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0c3a:	4611      	mov	r1, r2
 80a0c3c:	f7ff fd76 	bl	80a072c <HAL_USB_USART_Init>
}
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	bd10      	pop	{r4, pc}
 80a0c44:	080a146c 	.word	0x080a146c

080a0c48 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0c48:	2200      	movs	r2, #0
 80a0c4a:	7c00      	ldrb	r0, [r0, #16]
 80a0c4c:	f7ff bd76 	b.w	80a073c <HAL_USB_USART_Begin>

080a0c50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0c50:	b510      	push	{r4, lr}
 80a0c52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c54:	2214      	movs	r2, #20
 80a0c56:	2100      	movs	r1, #0
 80a0c58:	f000 fb11 	bl	80a127e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c5c:	4b05      	ldr	r3, [pc, #20]	; (80a0c74 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c5e:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0c62:	4b05      	ldr	r3, [pc, #20]	; (80a0c78 <_Z19acquireSerialBufferv+0x28>)
 80a0c64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c66:	f240 1301 	movw	r3, #257	; 0x101
 80a0c6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c6c:	2381      	movs	r3, #129	; 0x81
 80a0c6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0c70:	bd10      	pop	{r4, pc}
 80a0c72:	bf00      	nop
 80a0c74:	200003d9 	.word	0x200003d9
 80a0c78:	20000358 	.word	0x20000358

080a0c7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0c7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c7e:	4d0e      	ldr	r5, [pc, #56]	; (80a0cb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0c80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0c82:	a801      	add	r0, sp, #4
 80a0c84:	f7ff ffe4 	bl	80a0c50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c88:	6829      	ldr	r1, [r5, #0]
 80a0c8a:	f011 0401 	ands.w	r4, r1, #1
 80a0c8e:	d110      	bne.n	80a0cb2 <_Z16_fetch_usbserialv+0x36>
 80a0c90:	4628      	mov	r0, r5
 80a0c92:	f7ff fa04 	bl	80a009e <__cxa_guard_acquire>
 80a0c96:	b160      	cbz	r0, 80a0cb2 <_Z16_fetch_usbserialv+0x36>
 80a0c98:	aa01      	add	r2, sp, #4
 80a0c9a:	4621      	mov	r1, r4
 80a0c9c:	4807      	ldr	r0, [pc, #28]	; (80a0cbc <_Z16_fetch_usbserialv+0x40>)
 80a0c9e:	f7ff ffbf 	bl	80a0c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ca2:	4628      	mov	r0, r5
 80a0ca4:	f7ff fa00 	bl	80a00a8 <__cxa_guard_release>
 80a0ca8:	4a05      	ldr	r2, [pc, #20]	; (80a0cc0 <_Z16_fetch_usbserialv+0x44>)
 80a0caa:	4906      	ldr	r1, [pc, #24]	; (80a0cc4 <_Z16_fetch_usbserialv+0x48>)
 80a0cac:	4803      	ldr	r0, [pc, #12]	; (80a0cbc <_Z16_fetch_usbserialv+0x40>)
 80a0cae:	f000 f97f 	bl	80a0fb0 <__aeabi_atexit>
	return _usbserial;
}
 80a0cb2:	4802      	ldr	r0, [pc, #8]	; (80a0cbc <_Z16_fetch_usbserialv+0x40>)
 80a0cb4:	b007      	add	sp, #28
 80a0cb6:	bd30      	pop	{r4, r5, pc}
 80a0cb8:	20000354 	.word	0x20000354
 80a0cbc:	200004dc 	.word	0x200004dc
 80a0cc0:	20000304 	.word	0x20000304
 80a0cc4:	080a0bd1 	.word	0x080a0bd1

080a0cc8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0cc8:	b510      	push	{r4, lr}
 80a0cca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ccc:	2214      	movs	r2, #20
 80a0cce:	2100      	movs	r1, #0
 80a0cd0:	f000 fad5 	bl	80a127e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cd4:	4b05      	ldr	r3, [pc, #20]	; (80a0cec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0cd6:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cd8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0cda:	4b05      	ldr	r3, [pc, #20]	; (80a0cf0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0cdc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0cde:	f240 1301 	movw	r3, #257	; 0x101
 80a0ce2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ce4:	2381      	movs	r3, #129	; 0x81
 80a0ce6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ce8:	bd10      	pop	{r4, pc}
 80a0cea:	bf00      	nop
 80a0cec:	2000058c 	.word	0x2000058c
 80a0cf0:	200004f4 	.word	0x200004f4

080a0cf4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0cf4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cf6:	4c0e      	ldr	r4, [pc, #56]	; (80a0d30 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0cf8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0cfa:	a801      	add	r0, sp, #4
 80a0cfc:	f7ff ffe4 	bl	80a0cc8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0d00:	6823      	ldr	r3, [r4, #0]
 80a0d02:	07db      	lsls	r3, r3, #31
 80a0d04:	d410      	bmi.n	80a0d28 <_Z17_fetch_usbserial1v+0x34>
 80a0d06:	4620      	mov	r0, r4
 80a0d08:	f7ff f9c9 	bl	80a009e <__cxa_guard_acquire>
 80a0d0c:	b160      	cbz	r0, 80a0d28 <_Z17_fetch_usbserial1v+0x34>
 80a0d0e:	aa01      	add	r2, sp, #4
 80a0d10:	2101      	movs	r1, #1
 80a0d12:	4808      	ldr	r0, [pc, #32]	; (80a0d34 <_Z17_fetch_usbserial1v+0x40>)
 80a0d14:	f7ff ff84 	bl	80a0c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	f7ff f9c5 	bl	80a00a8 <__cxa_guard_release>
 80a0d1e:	4a06      	ldr	r2, [pc, #24]	; (80a0d38 <_Z17_fetch_usbserial1v+0x44>)
 80a0d20:	4906      	ldr	r1, [pc, #24]	; (80a0d3c <_Z17_fetch_usbserial1v+0x48>)
 80a0d22:	4804      	ldr	r0, [pc, #16]	; (80a0d34 <_Z17_fetch_usbserial1v+0x40>)
 80a0d24:	f000 f944 	bl	80a0fb0 <__aeabi_atexit>
  return _usbserial1;
}
 80a0d28:	4802      	ldr	r0, [pc, #8]	; (80a0d34 <_Z17_fetch_usbserial1v+0x40>)
 80a0d2a:	b006      	add	sp, #24
 80a0d2c:	bd10      	pop	{r4, pc}
 80a0d2e:	bf00      	nop
 80a0d30:	200004f0 	.word	0x200004f0
 80a0d34:	20000578 	.word	0x20000578
 80a0d38:	20000304 	.word	0x20000304
 80a0d3c:	080a0bd1 	.word	0x080a0bd1

080a0d40 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0d40:	4770      	bx	lr

080a0d42 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d42:	7441      	strb	r1, [r0, #17]
 80a0d44:	4770      	bx	lr

080a0d46 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a0d46:	7c00      	ldrb	r0, [r0, #16]
 80a0d48:	f7ff bc8e 	b.w	80a0668 <HAL_USART_Available_Data_For_Write>

080a0d4c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0d4c:	7c00      	ldrb	r0, [r0, #16]
 80a0d4e:	f7ff bc6b 	b.w	80a0628 <HAL_USART_Available_Data>

080a0d52 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0d52:	7c00      	ldrb	r0, [r0, #16]
 80a0d54:	f7ff bc78 	b.w	80a0648 <HAL_USART_Peek_Data>

080a0d58 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0d58:	7c00      	ldrb	r0, [r0, #16]
 80a0d5a:	f7ff bc6d 	b.w	80a0638 <HAL_USART_Read_Data>

080a0d5e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0d5e:	7c00      	ldrb	r0, [r0, #16]
 80a0d60:	f7ff bc7a 	b.w	80a0658 <HAL_USART_Flush_Data>

080a0d64 <_ZN11USARTSerialD0Ev>:
 80a0d64:	b510      	push	{r4, lr}
 80a0d66:	4604      	mov	r4, r0
 80a0d68:	f7ff f997 	bl	80a009a <_ZdlPv>
 80a0d6c:	4620      	mov	r0, r4
 80a0d6e:	bd10      	pop	{r4, pc}

080a0d70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d70:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d72:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0d74:	4604      	mov	r4, r0
 80a0d76:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0d78:	b925      	cbnz	r5, 80a0d84 <_ZN11USARTSerial5writeEh+0x14>
 80a0d7a:	7c00      	ldrb	r0, [r0, #16]
 80a0d7c:	f7ff fc74 	bl	80a0668 <HAL_USART_Available_Data_For_Write>
 80a0d80:	2800      	cmp	r0, #0
 80a0d82:	dd05      	ble.n	80a0d90 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0d84:	4631      	mov	r1, r6
 80a0d86:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0d8c:	f7ff bc44 	b.w	80a0618 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0d90:	4628      	mov	r0, r5
 80a0d92:	bd70      	pop	{r4, r5, r6, pc}

080a0d94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0d94:	b510      	push	{r4, lr}
 80a0d96:	4604      	mov	r4, r0
 80a0d98:	4608      	mov	r0, r1
 80a0d9a:	4611      	mov	r1, r2
 80a0d9c:	2200      	movs	r2, #0
 80a0d9e:	6062      	str	r2, [r4, #4]
 80a0da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0da4:	60a2      	str	r2, [r4, #8]
 80a0da6:	4a05      	ldr	r2, [pc, #20]	; (80a0dbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0da8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0daa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0dac:	2201      	movs	r2, #1
 80a0dae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0db0:	461a      	mov	r2, r3
 80a0db2:	f7ff fc29 	bl	80a0608 <HAL_USART_Init>
}
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	bd10      	pop	{r4, pc}
 80a0dba:	bf00      	nop
 80a0dbc:	080a149c 	.word	0x080a149c

080a0dc0 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a0dc0:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0dc2:	4d0c      	ldr	r5, [pc, #48]	; (80a0df4 <_Z22__fetch_global_Serial1v+0x34>)
 80a0dc4:	6829      	ldr	r1, [r5, #0]
 80a0dc6:	f011 0401 	ands.w	r4, r1, #1
 80a0dca:	d111      	bne.n	80a0df0 <_Z22__fetch_global_Serial1v+0x30>
 80a0dcc:	4628      	mov	r0, r5
 80a0dce:	f7ff f966 	bl	80a009e <__cxa_guard_acquire>
 80a0dd2:	b168      	cbz	r0, 80a0df0 <_Z22__fetch_global_Serial1v+0x30>
 80a0dd4:	4a08      	ldr	r2, [pc, #32]	; (80a0df8 <_Z22__fetch_global_Serial1v+0x38>)
 80a0dd6:	4621      	mov	r1, r4
 80a0dd8:	4b08      	ldr	r3, [pc, #32]	; (80a0dfc <_Z22__fetch_global_Serial1v+0x3c>)
 80a0dda:	4809      	ldr	r0, [pc, #36]	; (80a0e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a0ddc:	f7ff ffda 	bl	80a0d94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0de0:	4628      	mov	r0, r5
 80a0de2:	f7ff f961 	bl	80a00a8 <__cxa_guard_release>
 80a0de6:	4a07      	ldr	r2, [pc, #28]	; (80a0e04 <_Z22__fetch_global_Serial1v+0x44>)
 80a0de8:	4907      	ldr	r1, [pc, #28]	; (80a0e08 <_Z22__fetch_global_Serial1v+0x48>)
 80a0dea:	4805      	ldr	r0, [pc, #20]	; (80a0e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a0dec:	f000 f8e0 	bl	80a0fb0 <__aeabi_atexit>
	return serial1;
}
 80a0df0:	4803      	ldr	r0, [pc, #12]	; (80a0e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a0df2:	bd38      	pop	{r3, r4, r5, pc}
 80a0df4:	20000728 	.word	0x20000728
 80a0df8:	2000072c 	.word	0x2000072c
 80a0dfc:	200006a4 	.word	0x200006a4
 80a0e00:	20000690 	.word	0x20000690
 80a0e04:	20000304 	.word	0x20000304
 80a0e08:	080a0d41 	.word	0x080a0d41

080a0e0c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0e0c:	4770      	bx	lr

080a0e0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e10:	4606      	mov	r6, r0
 80a0e12:	4615      	mov	r5, r2
 80a0e14:	460c      	mov	r4, r1
 80a0e16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e18:	42bc      	cmp	r4, r7
 80a0e1a:	d006      	beq.n	80a0e2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e1c:	6833      	ldr	r3, [r6, #0]
 80a0e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e22:	689b      	ldr	r3, [r3, #8]
 80a0e24:	4630      	mov	r0, r6
 80a0e26:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e28:	e7f6      	b.n	80a0e18 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0e2a:	4628      	mov	r0, r5
 80a0e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e2e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0e2e:	2200      	movs	r2, #0
 80a0e30:	7c00      	ldrb	r0, [r0, #16]
 80a0e32:	f7ff bc49 	b.w	80a06c8 <HAL_I2C_Write_Data>

080a0e36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0e36:	2100      	movs	r1, #0
 80a0e38:	7c00      	ldrb	r0, [r0, #16]
 80a0e3a:	f7ff bc4d 	b.w	80a06d8 <HAL_I2C_Available_Data>

080a0e3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e3e:	2100      	movs	r1, #0
 80a0e40:	7c00      	ldrb	r0, [r0, #16]
 80a0e42:	f7ff bc51 	b.w	80a06e8 <HAL_I2C_Read_Data>

080a0e46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0e46:	2100      	movs	r1, #0
 80a0e48:	7c00      	ldrb	r0, [r0, #16]
 80a0e4a:	f7ff bc55 	b.w	80a06f8 <HAL_I2C_Peek_Data>

080a0e4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0e4e:	2100      	movs	r1, #0
 80a0e50:	7c00      	ldrb	r0, [r0, #16]
 80a0e52:	f7ff bc59 	b.w	80a0708 <HAL_I2C_Flush_Data>

080a0e56 <_ZN7TwoWireD0Ev>:
 80a0e56:	b510      	push	{r4, lr}
 80a0e58:	4604      	mov	r4, r0
 80a0e5a:	f7ff f91e 	bl	80a009a <_ZdlPv>
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	bd10      	pop	{r4, pc}
	...

080a0e64 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e64:	b510      	push	{r4, lr}
 80a0e66:	4604      	mov	r4, r0
 80a0e68:	4608      	mov	r0, r1
 80a0e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e6e:	60a3      	str	r3, [r4, #8]
 80a0e70:	4b04      	ldr	r3, [pc, #16]	; (80a0e84 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0e72:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0e74:	7420      	strb	r0, [r4, #16]
 80a0e76:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e78:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0e7a:	f7ff fc4d 	bl	80a0718 <HAL_I2C_Init>

}
 80a0e7e:	4620      	mov	r0, r4
 80a0e80:	bd10      	pop	{r4, pc}
 80a0e82:	bf00      	nop
 80a0e84:	080a14cc 	.word	0x080a14cc

080a0e88 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a0e88:	2200      	movs	r2, #0
 80a0e8a:	7c00      	ldrb	r0, [r0, #16]
 80a0e8c:	f7ff bbf4 	b.w	80a0678 <HAL_I2C_Set_Speed>

080a0e90 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0e90:	2300      	movs	r3, #0
 80a0e92:	461a      	mov	r2, r3
 80a0e94:	4619      	mov	r1, r3
 80a0e96:	7c00      	ldrb	r0, [r0, #16]
 80a0e98:	f7ff bbf6 	b.w	80a0688 <HAL_I2C_Begin>

080a0e9c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a0e9c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a0e9e:	2400      	movs	r4, #0
 80a0ea0:	7c00      	ldrb	r0, [r0, #16]
 80a0ea2:	9400      	str	r4, [sp, #0]
 80a0ea4:	f7ff fbf8 	bl	80a0698 <HAL_I2C_Request_Data>
  return result;
}
 80a0ea8:	b2c0      	uxtb	r0, r0
 80a0eaa:	b002      	add	sp, #8
 80a0eac:	bd10      	pop	{r4, pc}

080a0eae <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a0eae:	2301      	movs	r3, #1
 80a0eb0:	b2d2      	uxtb	r2, r2
 80a0eb2:	b2c9      	uxtb	r1, r1
 80a0eb4:	f7ff bff2 	b.w	80a0e9c <_ZN7TwoWire11requestFromEhhh>

080a0eb8 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0eb8:	2200      	movs	r2, #0
 80a0eba:	7c00      	ldrb	r0, [r0, #16]
 80a0ebc:	f7ff bbf4 	b.w	80a06a8 <HAL_I2C_Begin_Transmission>

080a0ec0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0ec0:	2200      	movs	r2, #0
 80a0ec2:	7c00      	ldrb	r0, [r0, #16]
 80a0ec4:	f7ff bbf8 	b.w	80a06b8 <HAL_I2C_End_Transmission>

080a0ec8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0ec8:	2101      	movs	r1, #1
 80a0eca:	f7ff bff9 	b.w	80a0ec0 <_ZN7TwoWire15endTransmissionEh>

080a0ece <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0ece:	4770      	bx	lr

080a0ed0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0ed0:	2200      	movs	r2, #0
 80a0ed2:	4611      	mov	r1, r2
 80a0ed4:	4610      	mov	r0, r2
 80a0ed6:	f7ff bc89 	b.w	80a07ec <network_ready>
	...

080a0edc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0edc:	4803      	ldr	r0, [pc, #12]	; (80a0eec <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a0ede:	4b04      	ldr	r3, [pc, #16]	; (80a0ef0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0ee0:	4a04      	ldr	r2, [pc, #16]	; (80a0ef4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a0ee2:	4905      	ldr	r1, [pc, #20]	; (80a0ef8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a0ee4:	6003      	str	r3, [r0, #0]
 80a0ee6:	f000 b863 	b.w	80a0fb0 <__aeabi_atexit>
 80a0eea:	bf00      	nop
 80a0eec:	200007b0 	.word	0x200007b0
 80a0ef0:	080a14f4 	.word	0x080a14f4
 80a0ef4:	20000304 	.word	0x20000304
 80a0ef8:	080a0ecf 	.word	0x080a0ecf

080a0efc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0efc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0efe:	4c0c      	ldr	r4, [pc, #48]	; (80a0f30 <_GLOBAL__sub_I_SPI+0x34>)
 80a0f00:	4e0c      	ldr	r6, [pc, #48]	; (80a0f34 <_GLOBAL__sub_I_SPI+0x38>)
 80a0f02:	4d0d      	ldr	r5, [pc, #52]	; (80a0f38 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0f04:	2100      	movs	r1, #0
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	f7ff fc90 	bl	80a082c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0f0c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f0e:	4c0b      	ldr	r4, [pc, #44]	; (80a0f3c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0f10:	4632      	mov	r2, r6
 80a0f12:	4629      	mov	r1, r5
 80a0f14:	f000 f84c 	bl	80a0fb0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f18:	2101      	movs	r1, #1
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	f7ff fc86 	bl	80a082c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0f20:	4632      	mov	r2, r6
 80a0f22:	4629      	mov	r1, r5
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0f2a:	f000 b841 	b.w	80a0fb0 <__aeabi_atexit>
 80a0f2e:	bf00      	nop
 80a0f30:	200007b4 	.word	0x200007b4
 80a0f34:	20000304 	.word	0x20000304
 80a0f38:	080a081d 	.word	0x080a081d
 80a0f3c:	200007c4 	.word	0x200007c4

080a0f40 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f40:	b513      	push	{r0, r1, r4, lr}
 80a0f42:	4c08      	ldr	r4, [pc, #32]	; (80a0f64 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0f44:	2300      	movs	r3, #0
 80a0f46:	461a      	mov	r2, r3
 80a0f48:	4619      	mov	r1, r3
 80a0f4a:	9300      	str	r3, [sp, #0]
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f7ff fe31 	bl	80a0bb4 <_ZN9IPAddressC1Ehhhh>
 80a0f52:	4620      	mov	r0, r4
 80a0f54:	4a04      	ldr	r2, [pc, #16]	; (80a0f68 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0f56:	4905      	ldr	r1, [pc, #20]	; (80a0f6c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0f58:	b002      	add	sp, #8
 80a0f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0f5e:	f000 b827 	b.w	80a0fb0 <__aeabi_atexit>
 80a0f62:	bf00      	nop
 80a0f64:	200007d8 	.word	0x200007d8
 80a0f68:	20000304 	.word	0x20000304
 80a0f6c:	080a0b59 	.word	0x080a0b59

080a0f70 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0f70:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0f72:	4d0b      	ldr	r5, [pc, #44]	; (80a0fa0 <_Z19__fetch_global_Wirev+0x30>)
 80a0f74:	6829      	ldr	r1, [r5, #0]
 80a0f76:	f011 0401 	ands.w	r4, r1, #1
 80a0f7a:	d10f      	bne.n	80a0f9c <_Z19__fetch_global_Wirev+0x2c>
 80a0f7c:	4628      	mov	r0, r5
 80a0f7e:	f7ff f88e 	bl	80a009e <__cxa_guard_acquire>
 80a0f82:	b158      	cbz	r0, 80a0f9c <_Z19__fetch_global_Wirev+0x2c>
 80a0f84:	4621      	mov	r1, r4
 80a0f86:	4807      	ldr	r0, [pc, #28]	; (80a0fa4 <_Z19__fetch_global_Wirev+0x34>)
 80a0f88:	f7ff ff6c 	bl	80a0e64 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0f8c:	4628      	mov	r0, r5
 80a0f8e:	f7ff f88b 	bl	80a00a8 <__cxa_guard_release>
 80a0f92:	4a05      	ldr	r2, [pc, #20]	; (80a0fa8 <_Z19__fetch_global_Wirev+0x38>)
 80a0f94:	4905      	ldr	r1, [pc, #20]	; (80a0fac <_Z19__fetch_global_Wirev+0x3c>)
 80a0f96:	4803      	ldr	r0, [pc, #12]	; (80a0fa4 <_Z19__fetch_global_Wirev+0x34>)
 80a0f98:	f000 f80a 	bl	80a0fb0 <__aeabi_atexit>
	return wire;
}
 80a0f9c:	4801      	ldr	r0, [pc, #4]	; (80a0fa4 <_Z19__fetch_global_Wirev+0x34>)
 80a0f9e:	bd38      	pop	{r3, r4, r5, pc}
 80a0fa0:	200007f0 	.word	0x200007f0
 80a0fa4:	200007f4 	.word	0x200007f4
 80a0fa8:	20000304 	.word	0x20000304
 80a0fac:	080a0e0d 	.word	0x080a0e0d

080a0fb0 <__aeabi_atexit>:
 80a0fb0:	460b      	mov	r3, r1
 80a0fb2:	4601      	mov	r1, r0
 80a0fb4:	4618      	mov	r0, r3
 80a0fb6:	f000 b949 	b.w	80a124c <__cxa_atexit>
	...

080a0fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0fbc:	4b18      	ldr	r3, [pc, #96]	; (80a1020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0fbe:	681a      	ldr	r2, [r3, #0]
 80a0fc0:	07d1      	lsls	r1, r2, #31
 80a0fc2:	bf5c      	itt	pl
 80a0fc4:	2201      	movpl	r2, #1
 80a0fc6:	601a      	strpl	r2, [r3, #0]
 80a0fc8:	4b16      	ldr	r3, [pc, #88]	; (80a1024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0fca:	681a      	ldr	r2, [r3, #0]
 80a0fcc:	07d2      	lsls	r2, r2, #31
 80a0fce:	bf5c      	itt	pl
 80a0fd0:	2201      	movpl	r2, #1
 80a0fd2:	601a      	strpl	r2, [r3, #0]
 80a0fd4:	4b14      	ldr	r3, [pc, #80]	; (80a1028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0fd6:	681a      	ldr	r2, [r3, #0]
 80a0fd8:	07d0      	lsls	r0, r2, #31
 80a0fda:	bf5c      	itt	pl
 80a0fdc:	2201      	movpl	r2, #1
 80a0fde:	601a      	strpl	r2, [r3, #0]
 80a0fe0:	4b12      	ldr	r3, [pc, #72]	; (80a102c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0fe2:	681a      	ldr	r2, [r3, #0]
 80a0fe4:	07d1      	lsls	r1, r2, #31
 80a0fe6:	bf5c      	itt	pl
 80a0fe8:	2201      	movpl	r2, #1
 80a0fea:	601a      	strpl	r2, [r3, #0]
 80a0fec:	4b10      	ldr	r3, [pc, #64]	; (80a1030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0fee:	681a      	ldr	r2, [r3, #0]
 80a0ff0:	07d2      	lsls	r2, r2, #31
 80a0ff2:	bf5c      	itt	pl
 80a0ff4:	2201      	movpl	r2, #1
 80a0ff6:	601a      	strpl	r2, [r3, #0]
 80a0ff8:	4b0e      	ldr	r3, [pc, #56]	; (80a1034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0ffa:	681a      	ldr	r2, [r3, #0]
 80a0ffc:	07d0      	lsls	r0, r2, #31
 80a0ffe:	bf5c      	itt	pl
 80a1000:	2201      	movpl	r2, #1
 80a1002:	601a      	strpl	r2, [r3, #0]
 80a1004:	4b0c      	ldr	r3, [pc, #48]	; (80a1038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1006:	681a      	ldr	r2, [r3, #0]
 80a1008:	07d1      	lsls	r1, r2, #31
 80a100a:	bf5c      	itt	pl
 80a100c:	2201      	movpl	r2, #1
 80a100e:	601a      	strpl	r2, [r3, #0]
 80a1010:	4b0a      	ldr	r3, [pc, #40]	; (80a103c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1012:	681a      	ldr	r2, [r3, #0]
 80a1014:	07d2      	lsls	r2, r2, #31
 80a1016:	bf5c      	itt	pl
 80a1018:	2201      	movpl	r2, #1
 80a101a:	601a      	strpl	r2, [r3, #0]
 80a101c:	4770      	bx	lr
 80a101e:	bf00      	nop
 80a1020:	20000824 	.word	0x20000824
 80a1024:	20000820 	.word	0x20000820
 80a1028:	2000081c 	.word	0x2000081c
 80a102c:	20000818 	.word	0x20000818
 80a1030:	20000814 	.word	0x20000814
 80a1034:	20000810 	.word	0x20000810
 80a1038:	2000080c 	.word	0x2000080c
 80a103c:	20000808 	.word	0x20000808

080a1040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1040:	4b24      	ldr	r3, [pc, #144]	; (80a10d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1042:	681a      	ldr	r2, [r3, #0]
 80a1044:	07d0      	lsls	r0, r2, #31
 80a1046:	bf5c      	itt	pl
 80a1048:	2201      	movpl	r2, #1
 80a104a:	601a      	strpl	r2, [r3, #0]
 80a104c:	4b22      	ldr	r3, [pc, #136]	; (80a10d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a104e:	681a      	ldr	r2, [r3, #0]
 80a1050:	07d1      	lsls	r1, r2, #31
 80a1052:	bf5c      	itt	pl
 80a1054:	2201      	movpl	r2, #1
 80a1056:	601a      	strpl	r2, [r3, #0]
 80a1058:	4b20      	ldr	r3, [pc, #128]	; (80a10dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a105a:	681a      	ldr	r2, [r3, #0]
 80a105c:	07d2      	lsls	r2, r2, #31
 80a105e:	bf5c      	itt	pl
 80a1060:	2201      	movpl	r2, #1
 80a1062:	601a      	strpl	r2, [r3, #0]
 80a1064:	4b1e      	ldr	r3, [pc, #120]	; (80a10e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1066:	681a      	ldr	r2, [r3, #0]
 80a1068:	07d0      	lsls	r0, r2, #31
 80a106a:	bf5c      	itt	pl
 80a106c:	2201      	movpl	r2, #1
 80a106e:	601a      	strpl	r2, [r3, #0]
 80a1070:	4b1c      	ldr	r3, [pc, #112]	; (80a10e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1072:	681a      	ldr	r2, [r3, #0]
 80a1074:	07d1      	lsls	r1, r2, #31
 80a1076:	bf5c      	itt	pl
 80a1078:	2201      	movpl	r2, #1
 80a107a:	601a      	strpl	r2, [r3, #0]
 80a107c:	4b1a      	ldr	r3, [pc, #104]	; (80a10e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a107e:	681a      	ldr	r2, [r3, #0]
 80a1080:	07d2      	lsls	r2, r2, #31
 80a1082:	bf5c      	itt	pl
 80a1084:	2201      	movpl	r2, #1
 80a1086:	601a      	strpl	r2, [r3, #0]
 80a1088:	4b18      	ldr	r3, [pc, #96]	; (80a10ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a108a:	681a      	ldr	r2, [r3, #0]
 80a108c:	07d0      	lsls	r0, r2, #31
 80a108e:	bf5c      	itt	pl
 80a1090:	2201      	movpl	r2, #1
 80a1092:	601a      	strpl	r2, [r3, #0]
 80a1094:	4b16      	ldr	r3, [pc, #88]	; (80a10f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1096:	681a      	ldr	r2, [r3, #0]
 80a1098:	07d1      	lsls	r1, r2, #31
 80a109a:	bf5c      	itt	pl
 80a109c:	2201      	movpl	r2, #1
 80a109e:	601a      	strpl	r2, [r3, #0]
 80a10a0:	4b14      	ldr	r3, [pc, #80]	; (80a10f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a10a2:	681a      	ldr	r2, [r3, #0]
 80a10a4:	07d2      	lsls	r2, r2, #31
 80a10a6:	bf5c      	itt	pl
 80a10a8:	2201      	movpl	r2, #1
 80a10aa:	601a      	strpl	r2, [r3, #0]
 80a10ac:	4b12      	ldr	r3, [pc, #72]	; (80a10f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a10ae:	681a      	ldr	r2, [r3, #0]
 80a10b0:	07d0      	lsls	r0, r2, #31
 80a10b2:	bf5c      	itt	pl
 80a10b4:	2201      	movpl	r2, #1
 80a10b6:	601a      	strpl	r2, [r3, #0]
 80a10b8:	4b10      	ldr	r3, [pc, #64]	; (80a10fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a10ba:	681a      	ldr	r2, [r3, #0]
 80a10bc:	07d1      	lsls	r1, r2, #31
 80a10be:	bf5c      	itt	pl
 80a10c0:	2201      	movpl	r2, #1
 80a10c2:	601a      	strpl	r2, [r3, #0]
 80a10c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a10c6:	681a      	ldr	r2, [r3, #0]
 80a10c8:	07d2      	lsls	r2, r2, #31
 80a10ca:	bf5c      	itt	pl
 80a10cc:	2201      	movpl	r2, #1
 80a10ce:	601a      	strpl	r2, [r3, #0]
 80a10d0:	4770      	bx	lr
 80a10d2:	bf00      	nop
 80a10d4:	20000854 	.word	0x20000854
 80a10d8:	20000850 	.word	0x20000850
 80a10dc:	2000084c 	.word	0x2000084c
 80a10e0:	20000848 	.word	0x20000848
 80a10e4:	20000844 	.word	0x20000844
 80a10e8:	20000840 	.word	0x20000840
 80a10ec:	2000083c 	.word	0x2000083c
 80a10f0:	20000838 	.word	0x20000838
 80a10f4:	20000834 	.word	0x20000834
 80a10f8:	20000830 	.word	0x20000830
 80a10fc:	2000082c 	.word	0x2000082c
 80a1100:	20000828 	.word	0x20000828

080a1104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1104:	4b24      	ldr	r3, [pc, #144]	; (80a1198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d0      	lsls	r0, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b22      	ldr	r3, [pc, #136]	; (80a119c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d1      	lsls	r1, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b20      	ldr	r3, [pc, #128]	; (80a11a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d2      	lsls	r2, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b1e      	ldr	r3, [pc, #120]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d0      	lsls	r0, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b1c      	ldr	r3, [pc, #112]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d1      	lsls	r1, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b1a      	ldr	r3, [pc, #104]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d2      	lsls	r2, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b18      	ldr	r3, [pc, #96]	; (80a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d0      	lsls	r0, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b16      	ldr	r3, [pc, #88]	; (80a11b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d1      	lsls	r1, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4b14      	ldr	r3, [pc, #80]	; (80a11b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1166:	681a      	ldr	r2, [r3, #0]
 80a1168:	07d2      	lsls	r2, r2, #31
 80a116a:	bf5c      	itt	pl
 80a116c:	2201      	movpl	r2, #1
 80a116e:	601a      	strpl	r2, [r3, #0]
 80a1170:	4b12      	ldr	r3, [pc, #72]	; (80a11bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1172:	681a      	ldr	r2, [r3, #0]
 80a1174:	07d0      	lsls	r0, r2, #31
 80a1176:	bf5c      	itt	pl
 80a1178:	2201      	movpl	r2, #1
 80a117a:	601a      	strpl	r2, [r3, #0]
 80a117c:	4b10      	ldr	r3, [pc, #64]	; (80a11c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a117e:	681a      	ldr	r2, [r3, #0]
 80a1180:	07d1      	lsls	r1, r2, #31
 80a1182:	bf5c      	itt	pl
 80a1184:	2201      	movpl	r2, #1
 80a1186:	601a      	strpl	r2, [r3, #0]
 80a1188:	4b0e      	ldr	r3, [pc, #56]	; (80a11c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a118a:	681a      	ldr	r2, [r3, #0]
 80a118c:	07d2      	lsls	r2, r2, #31
 80a118e:	bf5c      	itt	pl
 80a1190:	2201      	movpl	r2, #1
 80a1192:	601a      	strpl	r2, [r3, #0]
 80a1194:	4770      	bx	lr
 80a1196:	bf00      	nop
 80a1198:	20000884 	.word	0x20000884
 80a119c:	20000880 	.word	0x20000880
 80a11a0:	2000087c 	.word	0x2000087c
 80a11a4:	20000878 	.word	0x20000878
 80a11a8:	20000874 	.word	0x20000874
 80a11ac:	20000870 	.word	0x20000870
 80a11b0:	2000086c 	.word	0x2000086c
 80a11b4:	20000868 	.word	0x20000868
 80a11b8:	20000864 	.word	0x20000864
 80a11bc:	20000860 	.word	0x20000860
 80a11c0:	2000085c 	.word	0x2000085c
 80a11c4:	20000858 	.word	0x20000858

080a11c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a11c8:	4b18      	ldr	r3, [pc, #96]	; (80a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a11ca:	681a      	ldr	r2, [r3, #0]
 80a11cc:	07d1      	lsls	r1, r2, #31
 80a11ce:	bf5c      	itt	pl
 80a11d0:	2201      	movpl	r2, #1
 80a11d2:	601a      	strpl	r2, [r3, #0]
 80a11d4:	4b16      	ldr	r3, [pc, #88]	; (80a1230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a11d6:	681a      	ldr	r2, [r3, #0]
 80a11d8:	07d2      	lsls	r2, r2, #31
 80a11da:	bf5c      	itt	pl
 80a11dc:	2201      	movpl	r2, #1
 80a11de:	601a      	strpl	r2, [r3, #0]
 80a11e0:	4b14      	ldr	r3, [pc, #80]	; (80a1234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a11e2:	681a      	ldr	r2, [r3, #0]
 80a11e4:	07d0      	lsls	r0, r2, #31
 80a11e6:	bf5c      	itt	pl
 80a11e8:	2201      	movpl	r2, #1
 80a11ea:	601a      	strpl	r2, [r3, #0]
 80a11ec:	4b12      	ldr	r3, [pc, #72]	; (80a1238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a11ee:	681a      	ldr	r2, [r3, #0]
 80a11f0:	07d1      	lsls	r1, r2, #31
 80a11f2:	bf5c      	itt	pl
 80a11f4:	2201      	movpl	r2, #1
 80a11f6:	601a      	strpl	r2, [r3, #0]
 80a11f8:	4b10      	ldr	r3, [pc, #64]	; (80a123c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11fa:	681a      	ldr	r2, [r3, #0]
 80a11fc:	07d2      	lsls	r2, r2, #31
 80a11fe:	bf5c      	itt	pl
 80a1200:	2201      	movpl	r2, #1
 80a1202:	601a      	strpl	r2, [r3, #0]
 80a1204:	4b0e      	ldr	r3, [pc, #56]	; (80a1240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1206:	681a      	ldr	r2, [r3, #0]
 80a1208:	07d0      	lsls	r0, r2, #31
 80a120a:	bf5c      	itt	pl
 80a120c:	2201      	movpl	r2, #1
 80a120e:	601a      	strpl	r2, [r3, #0]
 80a1210:	4b0c      	ldr	r3, [pc, #48]	; (80a1244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1212:	681a      	ldr	r2, [r3, #0]
 80a1214:	07d1      	lsls	r1, r2, #31
 80a1216:	bf5c      	itt	pl
 80a1218:	2201      	movpl	r2, #1
 80a121a:	601a      	strpl	r2, [r3, #0]
 80a121c:	4b0a      	ldr	r3, [pc, #40]	; (80a1248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a121e:	681a      	ldr	r2, [r3, #0]
 80a1220:	07d2      	lsls	r2, r2, #31
 80a1222:	bf5c      	itt	pl
 80a1224:	2201      	movpl	r2, #1
 80a1226:	601a      	strpl	r2, [r3, #0]
 80a1228:	4770      	bx	lr
 80a122a:	bf00      	nop
 80a122c:	200008a4 	.word	0x200008a4
 80a1230:	200008a0 	.word	0x200008a0
 80a1234:	2000089c 	.word	0x2000089c
 80a1238:	20000898 	.word	0x20000898
 80a123c:	20000894 	.word	0x20000894
 80a1240:	20000890 	.word	0x20000890
 80a1244:	2000088c 	.word	0x2000088c
 80a1248:	20000888 	.word	0x20000888

080a124c <__cxa_atexit>:
 80a124c:	b510      	push	{r4, lr}
 80a124e:	4c05      	ldr	r4, [pc, #20]	; (80a1264 <__cxa_atexit+0x18>)
 80a1250:	4613      	mov	r3, r2
 80a1252:	b12c      	cbz	r4, 80a1260 <__cxa_atexit+0x14>
 80a1254:	460a      	mov	r2, r1
 80a1256:	4601      	mov	r1, r0
 80a1258:	2002      	movs	r0, #2
 80a125a:	f3af 8000 	nop.w
 80a125e:	bd10      	pop	{r4, pc}
 80a1260:	4620      	mov	r0, r4
 80a1262:	bd10      	pop	{r4, pc}
 80a1264:	00000000 	.word	0x00000000

080a1268 <memcpy>:
 80a1268:	b510      	push	{r4, lr}
 80a126a:	1e43      	subs	r3, r0, #1
 80a126c:	440a      	add	r2, r1
 80a126e:	4291      	cmp	r1, r2
 80a1270:	d004      	beq.n	80a127c <memcpy+0x14>
 80a1272:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1276:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a127a:	e7f8      	b.n	80a126e <memcpy+0x6>
 80a127c:	bd10      	pop	{r4, pc}

080a127e <memset>:
 80a127e:	4603      	mov	r3, r0
 80a1280:	4402      	add	r2, r0
 80a1282:	4293      	cmp	r3, r2
 80a1284:	d002      	beq.n	80a128c <memset+0xe>
 80a1286:	f803 1b01 	strb.w	r1, [r3], #1
 80a128a:	e7fa      	b.n	80a1282 <memset+0x4>
 80a128c:	4770      	bx	lr

080a128e <strlen>:
 80a128e:	4603      	mov	r3, r0
 80a1290:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1294:	2a00      	cmp	r2, #0
 80a1296:	d1fb      	bne.n	80a1290 <strlen+0x2>
 80a1298:	1a18      	subs	r0, r3, r0
 80a129a:	3801      	subs	r0, #1
 80a129c:	4770      	bx	lr

080a129e <link_code_end>:
	...

080a12a0 <dynalib_user>:
 80a12a0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a12b0:	0000 0000                                   ....

080a12b4 <_ZTV5Timer>:
	...
 80a12bc:	0159 080a 0199 080a 00f1 080a 6573 7574     Y...........setu
 80a12cc:	5370 6375 6563 7373 253d 0064               pSuccess=%d.

080a12d8 <_ZTV9LIS3DHI2C>:
	...
 80a12e0:	0325 080a 0327 080a 037b 080a 0333 080a     %...'...{...3...
 80a12f0:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a1300:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a1310:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a1320:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a1330:	6e69 0067                                   ing.

080a1334 <_ZTV8SPIClass>:
	...
 80a133c:	081d 080a 081f 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a134c:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a135c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a136c:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a137c:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a138c:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a139c:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a13ac:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a13bc:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a13cc:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a13dc:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a13ec:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a13fc:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a140c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a141c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a142c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a143c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a144c:	0065 0000                                   e...

080a1450 <_ZTV9IPAddress>:
	...
 80a1458:	0b67 080a 0b59 080a 0b5b 080a               g...Y...[...

080a1464 <_ZTV9USBSerial>:
	...
 80a146c:	0bd1 080a 0c15 080a 0bef 080a 085b 080a     ............[...
 80a147c:	0be9 080a 0bd3 080a 0bdb 080a 0c0f 080a     ................
 80a148c:	0be3 080a 0bcd 080a                         ........

080a1494 <_ZTV11USARTSerial>:
	...
 80a149c:	0d41 080a 0d65 080a 0d71 080a 085b 080a     A...e...q...[...
 80a14ac:	0d4d 080a 0d59 080a 0d53 080a 0d5f 080a     M...Y...S..._...
 80a14bc:	0d43 080a 0d47 080a                         C...G...

080a14c4 <_ZTV7TwoWire>:
	...
 80a14cc:	0e0d 080a 0e57 080a 0e2f 080a 0e0f 080a     ....W.../.......
 80a14dc:	0e37 080a 0e3f 080a 0e47 080a 0e4f 080a     7...?...G...O...

080a14ec <_ZTVN5spark9WiFiClassE>:
	...
 80a14f4:	0ed1 080a                                   ....

080a14f8 <link_const_variable_data_end>:
 80a14f8:	080a0261 	.word	0x080a0261
 80a14fc:	080a0321 	.word	0x080a0321
 80a1500:	080a0575 	.word	0x080a0575
 80a1504:	080a0855 	.word	0x080a0855
 80a1508:	080a09fd 	.word	0x080a09fd
 80a150c:	080a0a0d 	.word	0x080a0a0d
 80a1510:	080a0edd 	.word	0x080a0edd
 80a1514:	080a0efd 	.word	0x080a0efd
 80a1518:	080a0f41 	.word	0x080a0f41
 80a151c:	080a0fbd 	.word	0x080a0fbd
 80a1520:	080a1041 	.word	0x080a1041
 80a1524:	080a1105 	.word	0x080a1105
 80a1528:	080a11c9 	.word	0x080a11c9

080a152c <link_constructors_end>:
 80a152c:	00000000 	.word	0x00000000
