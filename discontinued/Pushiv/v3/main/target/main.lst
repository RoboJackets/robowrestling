
C:/src/battlebots-sumo/v3/main/target/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2ff0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000002c  20000300  080a2ff4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000061c  2000032c  2000032c  0003032c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a3020  080a3020  00023020  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3048  080a3048  00023048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00087394  00000000  00000000  0002304c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e22c  00000000  00000000  000aa3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f0ca  00000000  00000000  000b860c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001980  00000000  00000000  000c76d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000026b0  00000000  00000000  000c9056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022dd8  00000000  00000000  000cb706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001fb39  00000000  00000000  000ee4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00084e5c  00000000  00000000  0010e017  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a624  00000000  00000000  00192e74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	34 2d 0a 08                                         4-..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe65 	bl	80a2cfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe6a 	bl	80a2d12 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2ff4 	.word	0x080a2ff4
 80a004c:	2000032c 	.word	0x2000032c
 80a0050:	2000032c 	.word	0x2000032c
 80a0054:	20000948 	.word	0x20000948
 80a0058:	20000948 	.word	0x20000948

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fde7 	bl	80a1c30 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2fbc 	.word	0x080a2fbc
 80a0084:	080a2ff0 	.word	0x080a2ff0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bac6 	b.w	80a0618 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fae5 	bl	80a065c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd89 	b.w	80a1bac <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bc09 	b.w	80a18b0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00ae:	6803      	ldr	r3, [r0, #0]
 80a00b0:	4718      	bx	r3

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z5FLISRv>:
int curAccel = 0;
void getAccel();        // ISR prototype
LIS3DHSample sample;
LIS3DHI2C accel(Wire, 0, WKP);

void FLISR() {
 80a00cc:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00ce:	4b05      	ldr	r3, [pc, #20]	; (80a00e4 <_Z5FLISRv+0x18>)
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f002 f823 	bl	80a211c <digitalRead>
 80a00d6:	4b04      	ldr	r3, [pc, #16]	; (80a00e8 <_Z5FLISRv+0x1c>)
 80a00d8:	3000      	adds	r0, #0
 80a00da:	bf18      	it	ne
 80a00dc:	2001      	movne	r0, #1
 80a00de:	7018      	strb	r0, [r3, #0]
 80a00e0:	bd08      	pop	{r3, pc}
 80a00e2:	bf00      	nop
 80a00e4:	20000304 	.word	0x20000304
 80a00e8:	20000314 	.word	0x20000314

080a00ec <_Z5FRISRv>:
}

void FRISR() {
 80a00ec:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00ee:	4b05      	ldr	r3, [pc, #20]	; (80a0104 <_Z5FRISRv+0x18>)
 80a00f0:	8818      	ldrh	r0, [r3, #0]
 80a00f2:	f002 f813 	bl	80a211c <digitalRead>
 80a00f6:	4b04      	ldr	r3, [pc, #16]	; (80a0108 <_Z5FRISRv+0x1c>)
 80a00f8:	3000      	adds	r0, #0
 80a00fa:	bf18      	it	ne
 80a00fc:	2001      	movne	r0, #1
 80a00fe:	7018      	strb	r0, [r3, #0]
 80a0100:	bd08      	pop	{r3, pc}
 80a0102:	bf00      	nop
 80a0104:	20000308 	.word	0x20000308
 80a0108:	2000031c 	.word	0x2000031c

080a010c <_Z5BLISRv>:
}

void BLISR() {
 80a010c:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a010e:	4b05      	ldr	r3, [pc, #20]	; (80a0124 <_Z5BLISRv+0x18>)
 80a0110:	8818      	ldrh	r0, [r3, #0]
 80a0112:	f002 f803 	bl	80a211c <digitalRead>
 80a0116:	4b04      	ldr	r3, [pc, #16]	; (80a0128 <_Z5BLISRv+0x1c>)
 80a0118:	3000      	adds	r0, #0
 80a011a:	bf18      	it	ne
 80a011c:	2001      	movne	r0, #1
 80a011e:	7018      	strb	r0, [r3, #0]
 80a0120:	bd08      	pop	{r3, pc}
 80a0122:	bf00      	nop
 80a0124:	2000030c 	.word	0x2000030c
 80a0128:	20000315 	.word	0x20000315

080a012c <_Z5BRISRv>:
}

void BRISR() {
 80a012c:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a012e:	4b05      	ldr	r3, [pc, #20]	; (80a0144 <_Z5BRISRv+0x18>)
 80a0130:	8818      	ldrh	r0, [r3, #0]
 80a0132:	f001 fff3 	bl	80a211c <digitalRead>
 80a0136:	4b04      	ldr	r3, [pc, #16]	; (80a0148 <_Z5BRISRv+0x1c>)
 80a0138:	3000      	adds	r0, #0
 80a013a:	bf18      	it	ne
 80a013c:	2001      	movne	r0, #1
 80a013e:	7018      	strb	r0, [r3, #0]
 80a0140:	bd08      	pop	{r3, pc}
 80a0142:	bf00      	nop
 80a0144:	20000310 	.word	0x20000310
 80a0148:	20000324 	.word	0x20000324

080a014c <_Z5RSISRv>:
}

void RSISR() {
 80a014c:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a014e:	4b05      	ldr	r3, [pc, #20]	; (80a0164 <_Z5RSISRv+0x18>)
 80a0150:	8818      	ldrh	r0, [r3, #0]
 80a0152:	f001 ffe3 	bl	80a211c <digitalRead>
 80a0156:	4b04      	ldr	r3, [pc, #16]	; (80a0168 <_Z5RSISRv+0x1c>)
 80a0158:	3000      	adds	r0, #0
 80a015a:	bf18      	it	ne
 80a015c:	2001      	movne	r0, #1
 80a015e:	7018      	strb	r0, [r3, #0]
 80a0160:	bd08      	pop	{r3, pc}
 80a0162:	bf00      	nop
 80a0164:	20000300 	.word	0x20000300
 80a0168:	200003d4 	.word	0x200003d4

080a016c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a016c:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a016e:	2300      	movs	r3, #0
 80a0170:	a902      	add	r1, sp, #8
 80a0172:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a0176:	f001 fa61 	bl	80a163c <os_timer_get_id>
 80a017a:	b920      	cbnz	r0, 80a0186 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a017c:	9801      	ldr	r0, [sp, #4]
 80a017e:	b110      	cbz	r0, 80a0186 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a0180:	6803      	ldr	r3, [r0, #0]
 80a0182:	689b      	ldr	r3, [r3, #8]
 80a0184:	4798      	blx	r3
        }
    }
 80a0186:	b003      	add	sp, #12
 80a0188:	f85d fb04 	ldr.w	pc, [sp], #4

080a018c <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a018c:	b510      	push	{r4, lr}
    {
		running = true;
 80a018e:	2301      	movs	r3, #1
 80a0190:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0192:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0194:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a0196:	b113      	cbz	r3, 80a019e <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0198:	6983      	ldr	r3, [r0, #24]
 80a019a:	300c      	adds	r0, #12
 80a019c:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a019e:	2300      	movs	r3, #0
 80a01a0:	7123      	strb	r3, [r4, #4]
 80a01a2:	bd10      	pop	{r4, pc}

080a01a4 <_Z8getAccelv>:
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void getAccel() {
 80a01a4:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a01a6:	4c05      	ldr	r4, [pc, #20]	; (80a01bc <_Z8getAccelv+0x18>)
 80a01a8:	4805      	ldr	r0, [pc, #20]	; (80a01c0 <_Z8getAccelv+0x1c>)
 80a01aa:	4621      	mov	r1, r4
 80a01ac:	f001 f936 	bl	80a141c <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a01b0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a01b4:	4b03      	ldr	r3, [pc, #12]	; (80a01c4 <_Z8getAccelv+0x20>)
 80a01b6:	601a      	str	r2, [r3, #0]
 80a01b8:	bd10      	pop	{r4, pc}
 80a01ba:	bf00      	nop
 80a01bc:	20000330 	.word	0x20000330
 80a01c0:	2000034c 	.word	0x2000034c
 80a01c4:	200003d0 	.word	0x200003d0

080a01c8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01c8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01ca:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01cc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01ce:	b113      	cbz	r3, 80a01d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01d0:	2203      	movs	r2, #3
 80a01d2:	4601      	mov	r1, r0
 80a01d4:	4798      	blx	r3
    }
 80a01d6:	4620      	mov	r0, r4
 80a01d8:	bd10      	pop	{r4, pc}

080a01da <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a01da:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a01dc:	6880      	ldr	r0, [r0, #8]
 80a01de:	2300      	movs	r3, #0
 80a01e0:	b138      	cbz	r0, 80a01f2 <_ZN5Timer5_stopEjb+0x18>
 80a01e2:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a01e6:	2102      	movs	r1, #2
 80a01e8:	f001 fa30 	bl	80a164c <os_timer_change>
 80a01ec:	fab0 f080 	clz	r0, r0
 80a01f0:	0940      	lsrs	r0, r0, #5
    }
 80a01f2:	b003      	add	sp, #12
 80a01f4:	f85d fb04 	ldr.w	pc, [sp], #4

080a01f8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a01f8:	b538      	push	{r3, r4, r5, lr}
 80a01fa:	4b0e      	ldr	r3, [pc, #56]	; (80a0234 <_ZN5TimerD1Ev+0x3c>)
 80a01fc:	4604      	mov	r4, r0
 80a01fe:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0200:	6883      	ldr	r3, [r0, #8]
 80a0202:	b18b      	cbz	r3, 80a0228 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0204:	2200      	movs	r2, #0
 80a0206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a020a:	f7ff ffe6 	bl	80a01da <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a020e:	7923      	ldrb	r3, [r4, #4]
 80a0210:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0214:	b11b      	cbz	r3, 80a021e <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a0216:	2001      	movs	r0, #1
 80a0218:	f001 fc92 	bl	80a1b40 <delay>
 80a021c:	e7f7      	b.n	80a020e <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a021e:	4629      	mov	r1, r5
 80a0220:	68a0      	ldr	r0, [r4, #8]
 80a0222:	f001 fa03 	bl	80a162c <os_timer_destroy>
            handle = nullptr;
 80a0226:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0228:	f104 000c 	add.w	r0, r4, #12
 80a022c:	f7ff ffcc 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0230:	4620      	mov	r0, r4
 80a0232:	bd38      	pop	{r3, r4, r5, pc}
 80a0234:	080a2d50 	.word	0x080a2d50

080a0238 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0238:	b510      	push	{r4, lr}
 80a023a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a023c:	f7ff ffdc 	bl	80a01f8 <_ZN5TimerD1Ev>
 80a0240:	4620      	mov	r0, r4
 80a0242:	f7ff ff2a 	bl	80a009a <_ZdlPv>
 80a0246:	4620      	mov	r0, r4
 80a0248:	bd10      	pop	{r4, pc}
	...

080a024c <_Z8tof_initv>:

void RSISR() {
    RSflag = digitalRead(RS);
}

void tof_init() {
 80a024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0250:	2101      	movs	r1, #1
 80a0252:	200a      	movs	r0, #10
 80a0254:	f001 ff38 	bl	80a20c8 <pinMode>
    pinMode(A1, OUTPUT);
 80a0258:	2101      	movs	r1, #1
 80a025a:	200b      	movs	r0, #11
 80a025c:	f001 ff34 	bl	80a20c8 <pinMode>
    pinMode(A2, OUTPUT);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200c      	movs	r0, #12
 80a0264:	f001 ff30 	bl	80a20c8 <pinMode>
    pinMode(A3, OUTPUT);
 80a0268:	2101      	movs	r1, #1
 80a026a:	200d      	movs	r0, #13
 80a026c:	f001 ff2c 	bl	80a20c8 <pinMode>
    digitalWrite(A0, LOW);
 80a0270:	2100      	movs	r1, #0
 80a0272:	200a      	movs	r0, #10
 80a0274:	f001 ff39 	bl	80a20ea <digitalWrite>
    digitalWrite(A1, LOW);
 80a0278:	2100      	movs	r1, #0
 80a027a:	200b      	movs	r0, #11
 80a027c:	f001 ff35 	bl	80a20ea <digitalWrite>
    digitalWrite(A2, LOW);
 80a0280:	2100      	movs	r1, #0
 80a0282:	200c      	movs	r0, #12
 80a0284:	f001 ff31 	bl	80a20ea <digitalWrite>
    digitalWrite(A3, LOW);
 80a0288:	2100      	movs	r1, #0
 80a028a:	200d      	movs	r0, #13
 80a028c:	f001 ff2d 	bl	80a20ea <digitalWrite>
    delay(500);
 80a0290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0294:	f001 fc54 	bl	80a1b40 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a0298:	f001 ff8e 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a029c:	4940      	ldr	r1, [pc, #256]	; (80a03a0 <_Z8tof_initv+0x154>)
 80a029e:	f001 feaf 	bl	80a2000 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a02a2:	f001 ff89 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a02a6:	f001 feaf 	bl	80a2008 <_ZN7TwoWire5beginEv>

    delay(10);
 80a02aa:	200a      	movs	r0, #10
 80a02ac:	f001 fc48 	bl	80a1b40 <delay>
    digitalWrite(A0, HIGH);
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	200a      	movs	r0, #10
 80a02b4:	f001 ff19 	bl	80a20ea <digitalWrite>
    digitalWrite(A1, HIGH);
 80a02b8:	2101      	movs	r1, #1
 80a02ba:	200b      	movs	r0, #11
 80a02bc:	f001 ff15 	bl	80a20ea <digitalWrite>
    digitalWrite(A2, HIGH);
 80a02c0:	2101      	movs	r1, #1
 80a02c2:	200c      	movs	r0, #12
 80a02c4:	f001 ff11 	bl	80a20ea <digitalWrite>
    digitalWrite(A3, HIGH);
 80a02c8:	2101      	movs	r1, #1
 80a02ca:	200d      	movs	r0, #13
 80a02cc:	f001 ff0d 	bl	80a20ea <digitalWrite>
    delay(10);
 80a02d0:	200a      	movs	r0, #10
 80a02d2:	f001 fc35 	bl	80a1b40 <delay>
    digitalWrite(A1, LOW);
 80a02d6:	2100      	movs	r1, #0
 80a02d8:	200b      	movs	r0, #11
 80a02da:	f001 ff06 	bl	80a20ea <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a02de:	4f31      	ldr	r7, [pc, #196]	; (80a03a4 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a02e0:	2100      	movs	r1, #0
 80a02e2:	200c      	movs	r0, #12
 80a02e4:	f001 ff01 	bl	80a20ea <digitalWrite>
    digitalWrite(A3, LOW);
 80a02e8:	2100      	movs	r1, #0
 80a02ea:	200d      	movs	r0, #13
 80a02ec:	f001 fefd 	bl	80a20ea <digitalWrite>
    sensor0.init();
 80a02f0:	2101      	movs	r1, #1
 80a02f2:	4638      	mov	r0, r7
 80a02f4:	f000 fd90 	bl	80a0e18 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a02f8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a02fc:	2130      	movs	r1, #48	; 0x30
 80a02fe:	4638      	mov	r0, r7
 80a0300:	f000 fa41 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0304:	4e28      	ldr	r6, [pc, #160]	; (80a03a8 <_Z8tof_initv+0x15c>)
 80a0306:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a030a:	200a      	movs	r0, #10
 80a030c:	f001 fc18 	bl	80a1b40 <delay>
    digitalWrite(A1, HIGH);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200b      	movs	r0, #11
 80a0314:	f001 fee9 	bl	80a20ea <digitalWrite>
    sensor1.init();
 80a0318:	2101      	movs	r1, #1
 80a031a:	4630      	mov	r0, r6
 80a031c:	f000 fd7c 	bl	80a0e18 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0320:	2131      	movs	r1, #49	; 0x31
 80a0322:	4630      	mov	r0, r6
 80a0324:	f000 fa2f 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0328:	4d20      	ldr	r5, [pc, #128]	; (80a03ac <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a032a:	200a      	movs	r0, #10
 80a032c:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0330:	f001 fc06 	bl	80a1b40 <delay>
    digitalWrite(A2, HIGH);
 80a0334:	2101      	movs	r1, #1
 80a0336:	200c      	movs	r0, #12
 80a0338:	f001 fed7 	bl	80a20ea <digitalWrite>
    sensor2.init();
 80a033c:	2101      	movs	r1, #1
 80a033e:	4628      	mov	r0, r5
 80a0340:	f000 fd6a 	bl	80a0e18 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0344:	2132      	movs	r1, #50	; 0x32
 80a0346:	4628      	mov	r0, r5
 80a0348:	f000 fa1d 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a034c:	4c18      	ldr	r4, [pc, #96]	; (80a03b0 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a034e:	200a      	movs	r0, #10
 80a0350:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0354:	f001 fbf4 	bl	80a1b40 <delay>
    digitalWrite(A3, HIGH);
 80a0358:	2101      	movs	r1, #1
 80a035a:	200d      	movs	r0, #13
 80a035c:	f001 fec5 	bl	80a20ea <digitalWrite>
    sensor3.init();
 80a0360:	2101      	movs	r1, #1
 80a0362:	4620      	mov	r0, r4
 80a0364:	f000 fd58 	bl	80a0e18 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0368:	2133      	movs	r1, #51	; 0x33
 80a036a:	4620      	mov	r0, r4
 80a036c:	f000 fa0b 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0370:	200a      	movs	r0, #10
 80a0372:	f8c4 8004 	str.w	r8, [r4, #4]
 80a0376:	f001 fbe3 	bl	80a1b40 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a037a:	4638      	mov	r0, r7
 80a037c:	210a      	movs	r1, #10
 80a037e:	f000 fb1e 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0382:	4630      	mov	r0, r6
 80a0384:	210a      	movs	r1, #10
 80a0386:	f000 fb1a 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a038a:	4628      	mov	r0, r5
 80a038c:	210a      	movs	r1, #10
 80a038e:	f000 fb16 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a0392:	4620      	mov	r0, r4
}
 80a0394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a0398:	210a      	movs	r1, #10
 80a039a:	f000 bb10 	b.w	80a09be <_ZN7VL53L0X15startContinuousEm>
 80a039e:	bf00      	nop
 80a03a0:	000186a0 	.word	0x000186a0
 80a03a4:	20000360 	.word	0x20000360
 80a03a8:	20000378 	.word	0x20000378
 80a03ac:	20000390 	.word	0x20000390
 80a03b0:	200003a8 	.word	0x200003a8

080a03b4 <_Z10accel_initv>:
}

void accel_init() {
 80a03b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a03b6:	a801      	add	r0, sp, #4
 80a03b8:	f001 f803 	bl	80a13c2 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a03bc:	2150      	movs	r1, #80	; 0x50
 80a03be:	a801      	add	r0, sp, #4
 80a03c0:	f001 f80c 	bl	80a13dc <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a03c4:	a901      	add	r1, sp, #4
 80a03c6:	4806      	ldr	r0, [pc, #24]	; (80a03e0 <_Z10accel_initv+0x2c>)
 80a03c8:	f001 f860 	bl	80a148c <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a03cc:	4604      	mov	r4, r0
  Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a03ce:	f001 fce5 	bl	80a1d9c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a03d2:	4623      	mov	r3, r4
 80a03d4:	4a03      	ldr	r2, [pc, #12]	; (80a03e4 <_Z10accel_initv+0x30>)
 80a03d6:	2101      	movs	r1, #1
 80a03d8:	f001 fb66 	bl	80a1aa8 <_ZN5Print11printf_implEbPKcz>
}
 80a03dc:	b004      	add	sp, #16
 80a03de:	bd10      	pop	{r4, pc}
 80a03e0:	2000034c 	.word	0x2000034c
 80a03e4:	080a2d5c 	.word	0x080a2d5c

080a03e8 <_Z11others_initv>:

void others_init() {
 80a03e8:	b508      	push	{r3, lr}
  // Line sensors
  pinMode(FL, INPUT);
 80a03ea:	4b15      	ldr	r3, [pc, #84]	; (80a0440 <_Z11others_initv+0x58>)
 80a03ec:	2100      	movs	r1, #0
 80a03ee:	8818      	ldrh	r0, [r3, #0]
 80a03f0:	f001 fe6a 	bl	80a20c8 <pinMode>
  pinMode(FR, INPUT);
 80a03f4:	4b13      	ldr	r3, [pc, #76]	; (80a0444 <_Z11others_initv+0x5c>)
 80a03f6:	2100      	movs	r1, #0
 80a03f8:	8818      	ldrh	r0, [r3, #0]
 80a03fa:	f001 fe65 	bl	80a20c8 <pinMode>
  pinMode(BL, INPUT);
 80a03fe:	4b12      	ldr	r3, [pc, #72]	; (80a0448 <_Z11others_initv+0x60>)
 80a0400:	2100      	movs	r1, #0
 80a0402:	8818      	ldrh	r0, [r3, #0]
 80a0404:	f001 fe60 	bl	80a20c8 <pinMode>
  pinMode(BR, INPUT);
 80a0408:	4b10      	ldr	r3, [pc, #64]	; (80a044c <_Z11others_initv+0x64>)
 80a040a:	2100      	movs	r1, #0
 80a040c:	8818      	ldrh	r0, [r3, #0]
 80a040e:	f001 fe5b 	bl	80a20c8 <pinMode>
  // Remote switch
  pinMode(RS, INPUT);
 80a0412:	4b0f      	ldr	r3, [pc, #60]	; (80a0450 <_Z11others_initv+0x68>)
 80a0414:	2100      	movs	r1, #0
 80a0416:	8818      	ldrh	r0, [r3, #0]
 80a0418:	f001 fe56 	bl	80a20c8 <pinMode>
  // Car ESCs
  pinMode(Lmotor, OUTPUT);
 80a041c:	4b0d      	ldr	r3, [pc, #52]	; (80a0454 <_Z11others_initv+0x6c>)
 80a041e:	2101      	movs	r1, #1
 80a0420:	8818      	ldrh	r0, [r3, #0]
 80a0422:	f001 fe51 	bl	80a20c8 <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a0426:	4b0c      	ldr	r3, [pc, #48]	; (80a0458 <_Z11others_initv+0x70>)
 80a0428:	2101      	movs	r1, #1
 80a042a:	8818      	ldrh	r0, [r3, #0]
 80a042c:	f001 fe4c 	bl	80a20c8 <pinMode>

  // ***Remove for competition***
  // ***Serial monitor***
  Serial.begin(9600); // *** need to modify before comp ***
 80a0430:	f001 fcb4 	bl	80a1d9c <_Z16_fetch_usbserialv>
} 
 80a0434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);

  // ***Remove for competition***
  // ***Serial monitor***
  Serial.begin(9600); // *** need to modify before comp ***
 80a0438:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a043c:	f001 bc94 	b.w	80a1d68 <_ZN9USBSerial5beginEl>
 80a0440:	20000304 	.word	0x20000304
 80a0444:	20000308 	.word	0x20000308
 80a0448:	2000030c 	.word	0x2000030c
 80a044c:	20000310 	.word	0x20000310
 80a0450:	20000300 	.word	0x20000300
 80a0454:	20000320 	.word	0x20000320
 80a0458:	20000318 	.word	0x20000318

080a045c <_Z14interrupt_initv>:
} 

void interrupt_init() {
 80a045c:	b530      	push	{r4, r5, lr}
  // Line sensors
  attachInterrupt(FL, FLISR, CHANGE);
 80a045e:	4b36      	ldr	r3, [pc, #216]	; (80a0538 <_Z14interrupt_initv+0xdc>)
  // ***Remove for competition***
  // ***Serial monitor***
  Serial.begin(9600); // *** need to modify before comp ***
} 

void interrupt_init() {
 80a0460:	b091      	sub	sp, #68	; 0x44
  // Line sensors
  attachInterrupt(FL, FLISR, CHANGE);
 80a0462:	2400      	movs	r4, #0
 80a0464:	8818      	ldrh	r0, [r3, #0]
 80a0466:	4622      	mov	r2, r4
 80a0468:	f04f 33ff 	mov.w	r3, #4294967295
 80a046c:	4933      	ldr	r1, [pc, #204]	; (80a053c <_Z14interrupt_initv+0xe0>)
 80a046e:	9400      	str	r4, [sp, #0]
 80a0470:	f001 fcf8 	bl	80a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR, FRISR, CHANGE);
 80a0474:	4b32      	ldr	r3, [pc, #200]	; (80a0540 <_Z14interrupt_initv+0xe4>)
 80a0476:	4622      	mov	r2, r4
 80a0478:	8818      	ldrh	r0, [r3, #0]
 80a047a:	4932      	ldr	r1, [pc, #200]	; (80a0544 <_Z14interrupt_initv+0xe8>)
 80a047c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0480:	9400      	str	r4, [sp, #0]
 80a0482:	f001 fcef 	bl	80a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL, BLISR, CHANGE);
 80a0486:	4b30      	ldr	r3, [pc, #192]	; (80a0548 <_Z14interrupt_initv+0xec>)
 80a0488:	4622      	mov	r2, r4
 80a048a:	8818      	ldrh	r0, [r3, #0]
 80a048c:	492f      	ldr	r1, [pc, #188]	; (80a054c <_Z14interrupt_initv+0xf0>)
 80a048e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0492:	9400      	str	r4, [sp, #0]
 80a0494:	f001 fce6 	bl	80a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR, BRISR, CHANGE);
 80a0498:	4b2d      	ldr	r3, [pc, #180]	; (80a0550 <_Z14interrupt_initv+0xf4>)
 80a049a:	4622      	mov	r2, r4
 80a049c:	8818      	ldrh	r0, [r3, #0]
 80a049e:	492d      	ldr	r1, [pc, #180]	; (80a0554 <_Z14interrupt_initv+0xf8>)
 80a04a0:	f04f 33ff 	mov.w	r3, #4294967295
 80a04a4:	9400      	str	r4, [sp, #0]
 80a04a6:	f001 fcdd 	bl	80a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>
  // Remote switch
  attachInterrupt(RS, RSISR, CHANGE);
 80a04aa:	4b2b      	ldr	r3, [pc, #172]	; (80a0558 <_Z14interrupt_initv+0xfc>)
 80a04ac:	4622      	mov	r2, r4
 80a04ae:	8818      	ldrh	r0, [r3, #0]
 80a04b0:	492a      	ldr	r1, [pc, #168]	; (80a055c <_Z14interrupt_initv+0x100>)
 80a04b2:	f04f 33ff 	mov.w	r3, #4294967295
 80a04b6:	9400      	str	r4, [sp, #0]
 80a04b8:	f001 fcd4 	bl	80a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a04bc:	4b28      	ldr	r3, [pc, #160]	; (80a0560 <_Z14interrupt_initv+0x104>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a04be:	aa03      	add	r2, sp, #12
 80a04c0:	9305      	str	r3, [sp, #20]
 80a04c2:	ad05      	add	r5, sp, #20
 80a04c4:	e895 0003 	ldmia.w	r5, {r0, r1}
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a04c8:	4b26      	ldr	r3, [pc, #152]	; (80a0564 <_Z14interrupt_initv+0x108>)
 80a04ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80a04ce:	9309      	str	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80a04d0:	ab0c      	add	r3, sp, #48	; 0x30
 80a04d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a04d6:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a04da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a04de:	e883 0003 	stmia.w	r3, {r0, r1}
 80a04e2:	4b21      	ldr	r3, [pc, #132]	; (80a0568 <_Z14interrupt_initv+0x10c>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a04e4:	4a21      	ldr	r2, [pc, #132]	; (80a056c <_Z14interrupt_initv+0x110>)
 80a04e6:	930e      	str	r3, [sp, #56]	; 0x38
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a04e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a04ea:	2164      	movs	r1, #100	; 0x64
 80a04ec:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 80a04ee:	4b20      	ldr	r3, [pc, #128]	; (80a0570 <_Z14interrupt_initv+0x114>)
 80a04f0:	9401      	str	r4, [sp, #4]
 80a04f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80a04f4:	9400      	str	r4, [sp, #0]
 80a04f6:	ab09      	add	r3, sp, #36	; 0x24
 80a04f8:	a80b      	add	r0, sp, #44	; 0x2c
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a04fa:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80a04fe:	940b      	str	r4, [sp, #44]	; 0x2c
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0500:	9407      	str	r4, [sp, #28]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0502:	f001 f88b 	bl	80a161c <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0506:	4628      	mov	r0, r5
 80a0508:	f7ff fe5e 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a050c:	4622      	mov	r2, r4
 80a050e:	4621      	mov	r1, r4
 80a0510:	a809      	add	r0, sp, #36	; 0x24
 80a0512:	f7ff fe62 	bl	80a01da <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a0516:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0518:	b140      	cbz	r0, 80a052c <_Z14interrupt_initv+0xd0>
 80a051a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a051e:	9300      	str	r3, [sp, #0]
 80a0520:	9401      	str	r4, [sp, #4]
 80a0522:	4623      	mov	r3, r4
 80a0524:	4622      	mov	r2, r4
 80a0526:	4621      	mov	r1, r4
 80a0528:	f001 f890 	bl	80a164c <os_timer_change>
  // Accel software timer
  Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel); 
 80a052c:	a809      	add	r0, sp, #36	; 0x24
 80a052e:	f7ff fe63 	bl	80a01f8 <_ZN5TimerD1Ev>
  accelTimer.start();  
}
 80a0532:	b011      	add	sp, #68	; 0x44
 80a0534:	bd30      	pop	{r4, r5, pc}
 80a0536:	bf00      	nop
 80a0538:	20000304 	.word	0x20000304
 80a053c:	080a00cd 	.word	0x080a00cd
 80a0540:	20000308 	.word	0x20000308
 80a0544:	080a00ed 	.word	0x080a00ed
 80a0548:	2000030c 	.word	0x2000030c
 80a054c:	080a010d 	.word	0x080a010d
 80a0550:	20000310 	.word	0x20000310
 80a0554:	080a012d 	.word	0x080a012d
 80a0558:	20000300 	.word	0x20000300
 80a055c:	080a014d 	.word	0x080a014d
 80a0560:	080a01a5 	.word	0x080a01a5
 80a0564:	080a2d50 	.word	0x080a2d50
 80a0568:	080a00b3 	.word	0x080a00b3
 80a056c:	080a016d 	.word	0x080a016d
 80a0570:	080a00af 	.word	0x080a00af

080a0574 <_Z8ESC_initv>:

void ESC_init() {
 80a0574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
 80a0576:	4b13      	ldr	r3, [pc, #76]	; (80a05c4 <_Z8ESC_initv+0x50>)
 80a0578:	4d13      	ldr	r5, [pc, #76]	; (80a05c8 <_Z8ESC_initv+0x54>)
 80a057a:	2600      	movs	r6, #0
 80a057c:	27b4      	movs	r7, #180	; 0xb4
 80a057e:	8819      	ldrh	r1, [r3, #0]
 80a0580:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0584:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0588:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a058c:	4628      	mov	r0, r5
 80a058e:	f001 f9f2 	bl	80a1976 <_ZN5Servo6attachEtttss>
    RESC.attach(Rmotor);
 80a0592:	4c0e      	ldr	r4, [pc, #56]	; (80a05cc <_Z8ESC_initv+0x58>)
 80a0594:	4b0e      	ldr	r3, [pc, #56]	; (80a05d0 <_Z8ESC_initv+0x5c>)
 80a0596:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a059a:	8819      	ldrh	r1, [r3, #0]
 80a059c:	4620      	mov	r0, r4
 80a059e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a05a2:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a05a6:	f001 f9e6 	bl	80a1976 <_ZN5Servo6attachEtttss>
    // Write stop command
    LESC.writeMicroseconds(1500);
 80a05aa:	4628      	mov	r0, r5
 80a05ac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a05b0:	f001 f9ad 	bl	80a190e <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);
 80a05b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a05b8:	4620      	mov	r0, r4
}
 80a05ba:	b003      	add	sp, #12
 80a05bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
    RESC.attach(Rmotor);
    // Write stop command
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
 80a05c0:	f001 b9a5 	b.w	80a190e <_ZN5Servo17writeMicrosecondsEt>
 80a05c4:	20000320 	.word	0x20000320
 80a05c8:	2000033c 	.word	0x2000033c
 80a05cc:	200003c0 	.word	0x200003c0
 80a05d0:	20000318 	.word	0x20000318

080a05d4 <_Z10robot_initv>:
}

void robot_init() {
 80a05d4:	b510      	push	{r4, lr}
  while(!RSflag) {    // initial LOW
 80a05d6:	4c0c      	ldr	r4, [pc, #48]	; (80a0608 <_Z10robot_initv+0x34>)
 80a05d8:	7823      	ldrb	r3, [r4, #0]
 80a05da:	b92b      	cbnz	r3, 80a05e8 <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a05dc:	f001 fbde 	bl	80a1d9c <_Z16_fetch_usbserialv>
 80a05e0:	490a      	ldr	r1, [pc, #40]	; (80a060c <_Z10robot_initv+0x38>)
 80a05e2:	f001 fa2b 	bl	80a1a3c <_ZN5Print7printlnEPKc>
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
}

void robot_init() {
  while(!RSflag) {    // initial LOW
 80a05e6:	e7f7      	b.n	80a05d8 <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a05e8:	f001 fbd8 	bl	80a1d9c <_Z16_fetch_usbserialv>
 80a05ec:	4908      	ldr	r1, [pc, #32]	; (80a0610 <_Z10robot_initv+0x3c>)
 80a05ee:	f001 fa25 	bl	80a1a3c <_ZN5Print7printlnEPKc>
  delay(5000);
 80a05f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a05f6:	f001 faa3 	bl	80a1b40 <delay>
  Serial.println("GO!");    
 80a05fa:	f001 fbcf 	bl	80a1d9c <_Z16_fetch_usbserialv>
}
 80a05fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(!RSflag) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a0602:	4904      	ldr	r1, [pc, #16]	; (80a0614 <_Z10robot_initv+0x40>)
 80a0604:	f001 ba1a 	b.w	80a1a3c <_ZN5Print7printlnEPKc>
 80a0608:	200003d4 	.word	0x200003d4
 80a060c:	080a2d6c 	.word	0x080a2d6c
 80a0610:	080a2d7e 	.word	0x080a2d7e
 80a0614:	080a2d97 	.word	0x080a2d97

080a0618 <setup>:
void getAccel() {
  accel.getSample(sample);
  curAccel = sample.x;
}

void setup() {
 80a0618:	b508      	push	{r3, lr}
  tof_init();         // ToF and I2C
 80a061a:	f7ff fe17 	bl	80a024c <_Z8tof_initv>
  accel_init();       // accelerometer
 80a061e:	f7ff fec9 	bl	80a03b4 <_Z10accel_initv>
  others_init();      // line, remote, esc, ***printing***
 80a0622:	f7ff fee1 	bl	80a03e8 <_Z11others_initv>
  interrupt_init();   // interrupts for lines and remote
 80a0626:	f7ff ff19 	bl	80a045c <_Z14interrupt_initv>
  ESC_init();         // Car ESCs
 80a062a:	f7ff ffa3 	bl	80a0574 <_Z8ESC_initv>

  robot_init();       // 5-second countdown after remote switch is activated
}
 80a062e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  accel_init();       // accelerometer
  others_init();      // line, remote, esc, ***printing***
  interrupt_init();   // interrupts for lines and remote
  ESC_init();         // Car ESCs

  robot_init();       // 5-second countdown after remote switch is activated
 80a0632:	f7ff bfcf 	b.w	80a05d4 <_Z10robot_initv>
	...

080a0638 <_Z4stopv>:
}

void stop() {
 80a0638:	b508      	push	{r3, lr}
    LESC.writeMicroseconds(1500);
 80a063a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a063e:	4805      	ldr	r0, [pc, #20]	; (80a0654 <_Z4stopv+0x1c>)
 80a0640:	f001 f965 	bl	80a190e <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);    
}
 80a0644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  robot_init();       // 5-second countdown after remote switch is activated
}

void stop() {
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);    
 80a0648:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a064c:	4802      	ldr	r0, [pc, #8]	; (80a0658 <_Z4stopv+0x20>)
 80a064e:	f001 b95e 	b.w	80a190e <_ZN5Servo17writeMicrosecondsEt>
 80a0652:	bf00      	nop
 80a0654:	2000033c 	.word	0x2000033c
 80a0658:	200003c0 	.word	0x200003c0

080a065c <loop>:
}

void loop() {
 80a065c:	b508      	push	{r3, lr}
    // Handle remote switching
    if(RSflag == LOW) {
 80a065e:	4b0d      	ldr	r3, [pc, #52]	; (80a0694 <loop+0x38>)
 80a0660:	781b      	ldrb	r3, [r3, #0]
 80a0662:	b913      	cbnz	r3, 80a066a <loop+0xe>
        stop();
 80a0664:	f7ff ffe8 	bl	80a0638 <_Z4stopv>
 80a0668:	e7fe      	b.n	80a0668 <loop+0xc>
        while(true);    // must power-cycle to restart operation
    }

    // Read from Time of Flight sensors
    LL_distance = sensor0.readRangeContinuousMillimeters();
 80a066a:	480b      	ldr	r0, [pc, #44]	; (80a0698 <loop+0x3c>)
 80a066c:	f000 f9e2 	bl	80a0a34 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0670:	4b0a      	ldr	r3, [pc, #40]	; (80a069c <loop+0x40>)
 80a0672:	6018      	str	r0, [r3, #0]
    LM_distance = sensor1.readRangeContinuousMillimeters();
 80a0674:	480a      	ldr	r0, [pc, #40]	; (80a06a0 <loop+0x44>)
 80a0676:	f000 f9dd 	bl	80a0a34 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a067a:	4b0a      	ldr	r3, [pc, #40]	; (80a06a4 <loop+0x48>)
 80a067c:	6018      	str	r0, [r3, #0]
    RM_distance = sensor2.readRangeContinuousMillimeters();
 80a067e:	480a      	ldr	r0, [pc, #40]	; (80a06a8 <loop+0x4c>)
 80a0680:	f000 f9d8 	bl	80a0a34 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0684:	4b09      	ldr	r3, [pc, #36]	; (80a06ac <loop+0x50>)
 80a0686:	6018      	str	r0, [r3, #0]
    RR_distance = sensor3.readRangeContinuousMillimeters();
 80a0688:	4809      	ldr	r0, [pc, #36]	; (80a06b0 <loop+0x54>)
 80a068a:	f000 f9d3 	bl	80a0a34 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a068e:	4b09      	ldr	r3, [pc, #36]	; (80a06b4 <loop+0x58>)
 80a0690:	6018      	str	r0, [r3, #0]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	200003d4 	.word	0x200003d4
 80a0698:	20000360 	.word	0x20000360
 80a069c:	200003e0 	.word	0x200003e0
 80a06a0:	20000378 	.word	0x20000378
 80a06a4:	200003d8 	.word	0x200003d8
 80a06a8:	20000390 	.word	0x20000390
 80a06ac:	200003dc 	.word	0x200003dc
 80a06b0:	200003a8 	.word	0x200003a8
 80a06b4:	20000338 	.word	0x20000338

080a06b8 <_GLOBAL__sub_I_high1>:
            Line - 4
            Stall - 1, curAccel

    */
     
 80a06b8:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a06ba:	f000 ff4f 	bl	80a155c <HAL_Pin_Map>
#if !defined(PARTICLE)
#  include <Wire.h>
#endif

// Time of Flight sensors
VL53L0X sensor0;
 80a06be:	4814      	ldr	r0, [pc, #80]	; (80a0710 <_GLOBAL__sub_I_high1+0x58>)
 80a06c0:	f000 f840 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a06c4:	4813      	ldr	r0, [pc, #76]	; (80a0714 <_GLOBAL__sub_I_high1+0x5c>)
 80a06c6:	f000 f83d 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a06ca:	4813      	ldr	r0, [pc, #76]	; (80a0718 <_GLOBAL__sub_I_high1+0x60>)
 80a06cc:	f000 f83a 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a06d0:	4812      	ldr	r0, [pc, #72]	; (80a071c <_GLOBAL__sub_I_high1+0x64>)
 80a06d2:	f000 f837 	bl	80a0744 <_ZN7VL53L0XC1Ev>
// Remote switch module
int RS = D4;
boolean RSflag = false;

// Car ESCs
Servo LESC;
 80a06d6:	4812      	ldr	r0, [pc, #72]	; (80a0720 <_GLOBAL__sub_I_high1+0x68>)
 80a06d8:	f001 f939 	bl	80a194e <_ZN5ServoC1Ev>
Servo RESC;
 80a06dc:	4811      	ldr	r0, [pc, #68]	; (80a0724 <_GLOBAL__sub_I_high1+0x6c>)
 80a06de:	f001 f936 	bl	80a194e <_ZN5ServoC1Ev>
int Rmotor = D3;
int L_command = 1500;
int R_command = 1500;

// Photon settings
SYSTEM_THREAD(ENABLED);
 80a06e2:	2100      	movs	r1, #0
 80a06e4:	2001      	movs	r0, #1
 80a06e6:	f001 f8c3 	bl	80a1870 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06ea:	2003      	movs	r0, #3
 80a06ec:	f001 f8b0 	bl	80a1850 <set_system_mode>
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
int curAccel = 0;
void getAccel();        // ISR prototype
LIS3DHSample sample;
LIS3DHI2C accel(Wire, 0, WKP);
 80a06f0:	f001 fd62 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a06f4:	4c0c      	ldr	r4, [pc, #48]	; (80a0728 <_GLOBAL__sub_I_high1+0x70>)
 80a06f6:	4601      	mov	r1, r0
 80a06f8:	2200      	movs	r2, #0
 80a06fa:	4620      	mov	r0, r4
 80a06fc:	2311      	movs	r3, #17
 80a06fe:	f000 ff21 	bl	80a1544 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a0702:	4620      	mov	r0, r4
            Line - 4
            Stall - 1, curAccel

    */
     
 80a0704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
int curAccel = 0;
void getAccel();        // ISR prototype
LIS3DHSample sample;
LIS3DHI2C accel(Wire, 0, WKP);
 80a0708:	4a08      	ldr	r2, [pc, #32]	; (80a072c <_GLOBAL__sub_I_high1+0x74>)
 80a070a:	4909      	ldr	r1, [pc, #36]	; (80a0730 <_GLOBAL__sub_I_high1+0x78>)
 80a070c:	f001 bd74 	b.w	80a21f8 <__aeabi_atexit>
 80a0710:	20000360 	.word	0x20000360
 80a0714:	20000378 	.word	0x20000378
 80a0718:	20000390 	.word	0x20000390
 80a071c:	200003a8 	.word	0x200003a8
 80a0720:	2000033c 	.word	0x2000033c
 80a0724:	200003c0 	.word	0x200003c0
 80a0728:	2000034c 	.word	0x2000034c
 80a072c:	2000032c 	.word	0x2000032c
 80a0730:	080a1309 	.word	0x080a1309

080a0734 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a0734:	6803      	ldr	r3, [r0, #0]
 80a0736:	b2c9      	uxtb	r1, r1
 80a0738:	689b      	ldr	r3, [r3, #8]
 80a073a:	4718      	bx	r3

080a073c <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a073c:	6803      	ldr	r3, [r0, #0]
 80a073e:	b2c9      	uxtb	r1, r1
 80a0740:	689b      	ldr	r3, [r3, #8]
 80a0742:	4718      	bx	r3

080a0744 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a0744:	2229      	movs	r2, #41	; 0x29
 80a0746:	7042      	strb	r2, [r0, #1]
 80a0748:	2200      	movs	r2, #0
 80a074a:	6042      	str	r2, [r0, #4]
 80a074c:	7202      	strb	r2, [r0, #8]
{
}
 80a074e:	4770      	bx	lr

080a0750 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0750:	b570      	push	{r4, r5, r6, lr}
 80a0752:	4604      	mov	r4, r0
 80a0754:	4615      	mov	r5, r2
 80a0756:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0758:	f001 fd2e 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a075c:	7861      	ldrb	r1, [r4, #1]
 80a075e:	f001 fc6a 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0762:	f001 fd29 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0766:	6803      	ldr	r3, [r0, #0]
 80a0768:	4631      	mov	r1, r6
 80a076a:	689b      	ldr	r3, [r3, #8]
 80a076c:	4798      	blx	r3
  Wire.write(value);
 80a076e:	f001 fd23 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0772:	6803      	ldr	r3, [r0, #0]
 80a0774:	4629      	mov	r1, r5
 80a0776:	689b      	ldr	r3, [r3, #8]
 80a0778:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a077a:	f001 fd1d 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a077e:	f001 fc62 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a0782:	7020      	strb	r0, [r4, #0]
 80a0784:	bd70      	pop	{r4, r5, r6, pc}

080a0786 <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a0786:	b538      	push	{r3, r4, r5, lr}
 80a0788:	4605      	mov	r5, r0
 80a078a:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a078c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0790:	218a      	movs	r1, #138	; 0x8a
 80a0792:	f7ff ffdd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a0796:	706c      	strb	r4, [r5, #1]
 80a0798:	bd38      	pop	{r3, r4, r5, pc}

080a079a <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a079a:	b570      	push	{r4, r5, r6, lr}
 80a079c:	4604      	mov	r4, r0
 80a079e:	4615      	mov	r5, r2
 80a07a0:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a07a2:	f001 fd09 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07a6:	7861      	ldrb	r1, [r4, #1]
 80a07a8:	f001 fc45 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a07ac:	f001 fd04 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07b0:	6803      	ldr	r3, [r0, #0]
 80a07b2:	4631      	mov	r1, r6
 80a07b4:	689b      	ldr	r3, [r3, #8]
 80a07b6:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a07b8:	f001 fcfe 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07bc:	0a29      	lsrs	r1, r5, #8
 80a07be:	f7ff ffbd 	bl	80a073c <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a07c2:	f001 fcf9 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07c6:	b2e9      	uxtb	r1, r5
 80a07c8:	f7ff ffb8 	bl	80a073c <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a07cc:	f001 fcf4 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07d0:	f001 fc39 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a07d4:	7020      	strb	r0, [r4, #0]
 80a07d6:	bd70      	pop	{r4, r5, r6, pc}

080a07d8 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a07d8:	b570      	push	{r4, r5, r6, lr}
 80a07da:	4605      	mov	r5, r0
 80a07dc:	4614      	mov	r4, r2
 80a07de:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a07e0:	f001 fcea 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07e4:	7869      	ldrb	r1, [r5, #1]
 80a07e6:	f001 fc26 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a07ea:	f001 fce5 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07ee:	6803      	ldr	r3, [r0, #0]
 80a07f0:	4631      	mov	r1, r6
 80a07f2:	689b      	ldr	r3, [r3, #8]
 80a07f4:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a07f6:	f001 fcdf 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a07fa:	0e21      	lsrs	r1, r4, #24
 80a07fc:	f7ff ff9a 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a0800:	f001 fcda 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0804:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a0808:	f7ff ff94 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a080c:	f001 fcd4 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0810:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0814:	f7ff ff8e 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a0818:	f001 fcce 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a081c:	b2e1      	uxtb	r1, r4
 80a081e:	f7ff ff89 	bl	80a0734 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a0822:	f001 fcc9 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0826:	f001 fc0e 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a082a:	7028      	strb	r0, [r5, #0]
 80a082c:	bd70      	pop	{r4, r5, r6, pc}

080a082e <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a082e:	b538      	push	{r3, r4, r5, lr}
 80a0830:	4604      	mov	r4, r0
 80a0832:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a0834:	f001 fcc0 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0838:	7861      	ldrb	r1, [r4, #1]
 80a083a:	f001 fbfc 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a083e:	f001 fcbb 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0842:	6803      	ldr	r3, [r0, #0]
 80a0844:	4629      	mov	r1, r5
 80a0846:	689b      	ldr	r3, [r3, #8]
 80a0848:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a084a:	f001 fcb5 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a084e:	f001 fbfa 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a0852:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0854:	f001 fcb0 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0858:	2201      	movs	r2, #1
 80a085a:	7861      	ldrb	r1, [r4, #1]
 80a085c:	f001 fbe3 	bl	80a2026 <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0860:	f001 fcaa 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0864:	6803      	ldr	r3, [r0, #0]
 80a0866:	695b      	ldr	r3, [r3, #20]
 80a0868:	4798      	blx	r3

  return value;
}
 80a086a:	b2c0      	uxtb	r0, r0
 80a086c:	bd38      	pop	{r3, r4, r5, pc}

080a086e <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a086e:	b538      	push	{r3, r4, r5, lr}
 80a0870:	4604      	mov	r4, r0
 80a0872:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0874:	f001 fca0 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0878:	7861      	ldrb	r1, [r4, #1]
 80a087a:	f001 fbdc 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a087e:	f001 fc9b 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0882:	6803      	ldr	r3, [r0, #0]
 80a0884:	4629      	mov	r1, r5
 80a0886:	689b      	ldr	r3, [r3, #8]
 80a0888:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a088a:	f001 fc95 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a088e:	f001 fbda 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a0892:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0894:	f001 fc90 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0898:	7861      	ldrb	r1, [r4, #1]
 80a089a:	2202      	movs	r2, #2
 80a089c:	f001 fbc3 	bl	80a2026 <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a08a0:	f001 fc8a 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08a4:	6803      	ldr	r3, [r0, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	4798      	blx	r3
 80a08aa:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a08ac:	f001 fc84 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08b0:	6803      	ldr	r3, [r0, #0]
 80a08b2:	695b      	ldr	r3, [r3, #20]
 80a08b4:	4798      	blx	r3
 80a08b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a08ba:	b280      	uxth	r0, r0
 80a08bc:	bd38      	pop	{r3, r4, r5, pc}

080a08be <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a08be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08c0:	4606      	mov	r6, r0
 80a08c2:	4614      	mov	r4, r2
 80a08c4:	461d      	mov	r5, r3
 80a08c6:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a08c8:	f001 fc76 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08cc:	7871      	ldrb	r1, [r6, #1]
 80a08ce:	f001 fbb2 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a08d2:	f001 fc71 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08d6:	6803      	ldr	r3, [r0, #0]
 80a08d8:	4639      	mov	r1, r7
 80a08da:	689b      	ldr	r3, [r3, #8]
 80a08dc:	4798      	blx	r3
 80a08de:	4425      	add	r5, r4

  while (count-- > 0)
 80a08e0:	42ac      	cmp	r4, r5
 80a08e2:	d007      	beq.n	80a08f4 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a08e4:	f001 fc68 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08e8:	6803      	ldr	r3, [r0, #0]
 80a08ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a08ee:	689b      	ldr	r3, [r3, #8]
 80a08f0:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a08f2:	e7f5      	b.n	80a08e0 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a08f4:	f001 fc60 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a08f8:	f001 fba5 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a08fc:	7030      	strb	r0, [r6, #0]
 80a08fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0900 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a0900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0902:	4606      	mov	r6, r0
 80a0904:	4614      	mov	r4, r2
 80a0906:	461d      	mov	r5, r3
 80a0908:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a090a:	f001 fc55 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a090e:	7871      	ldrb	r1, [r6, #1]
 80a0910:	f001 fb91 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0914:	f001 fc50 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0918:	6803      	ldr	r3, [r0, #0]
 80a091a:	4639      	mov	r1, r7
 80a091c:	689b      	ldr	r3, [r3, #8]
 80a091e:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0920:	f001 fc4a 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0924:	f001 fb8f 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
 80a0928:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a092a:	f001 fc45 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a092e:	462a      	mov	r2, r5
 80a0930:	7871      	ldrb	r1, [r6, #1]
 80a0932:	f001 fb78 	bl	80a2026 <_ZN7TwoWire11requestFromEhh>
 80a0936:	4425      	add	r5, r4

  while (count-- > 0)
 80a0938:	42ac      	cmp	r4, r5
 80a093a:	d007      	beq.n	80a094c <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a093c:	f001 fc3c 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a0940:	6803      	ldr	r3, [r0, #0]
 80a0942:	695b      	ldr	r3, [r3, #20]
 80a0944:	4798      	blx	r3
 80a0946:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a094a:	e7f5      	b.n	80a0938 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0950 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0950:	b570      	push	{r4, r5, r6, lr}
 80a0952:	460d      	mov	r5, r1
 80a0954:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0956:	2100      	movs	r1, #0
 80a0958:	4628      	mov	r0, r5
 80a095a:	f002 f979 	bl	80a2c50 <__aeabi_fcmplt>
 80a095e:	b9b0      	cbnz	r0, 80a098e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0960:	4628      	mov	r0, r5
 80a0962:	f001 fefb 	bl	80a275c <__aeabi_f2d>
 80a0966:	a30c      	add	r3, pc, #48	; (adr r3, 80a0998 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0968:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a096c:	f001 ffc8 	bl	80a2900 <__aeabi_dcmpgt>
 80a0970:	b968      	cbnz	r0, 80a098e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a0972:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a0976:	4628      	mov	r0, r5
 80a0978:	f001 ffcc 	bl	80a2914 <__aeabi_fmul>
 80a097c:	f002 f990 	bl	80a2ca0 <__aeabi_f2uiz>
 80a0980:	2144      	movs	r1, #68	; 0x44
 80a0982:	b282      	uxth	r2, r0
 80a0984:	4630      	mov	r0, r6
 80a0986:	f7ff ff08 	bl	80a079a <_ZN7VL53L0X13writeReg16BitEht>
 80a098a:	2001      	movs	r0, #1
 80a098c:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a098e:	2000      	movs	r0, #0
 80a0990:	bd70      	pop	{r4, r5, r6, pc}
 80a0992:	bf00      	nop
 80a0994:	f3af 8000 	nop.w
 80a0998:	0a3d70a4 	.word	0x0a3d70a4
 80a099c:	407fffd7 	.word	0x407fffd7

080a09a0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a09a0:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a09a2:	b909      	cbnz	r1, 80a09a8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a09a4:	2150      	movs	r1, #80	; 0x50
 80a09a6:	e002      	b.n	80a09ae <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a09a8:	2901      	cmp	r1, #1
 80a09aa:	d106      	bne.n	80a09ba <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a09ac:	2170      	movs	r1, #112	; 0x70
 80a09ae:	f7ff ff3e 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a09b2:	3001      	adds	r0, #1
 80a09b4:	0040      	lsls	r0, r0, #1
 80a09b6:	b2c0      	uxtb	r0, r0
 80a09b8:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a09ba:	20ff      	movs	r0, #255	; 0xff
}
 80a09bc:	bd08      	pop	{r3, pc}

080a09be <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a09be:	b538      	push	{r3, r4, r5, lr}
 80a09c0:	4604      	mov	r4, r0
 80a09c2:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a09c4:	2201      	movs	r2, #1
 80a09c6:	2180      	movs	r1, #128	; 0x80
 80a09c8:	f7ff fec2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a09cc:	2201      	movs	r2, #1
 80a09ce:	21ff      	movs	r1, #255	; 0xff
 80a09d0:	4620      	mov	r0, r4
 80a09d2:	f7ff febd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a09d6:	2200      	movs	r2, #0
 80a09d8:	4611      	mov	r1, r2
 80a09da:	4620      	mov	r0, r4
 80a09dc:	f7ff feb8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a09e0:	7c22      	ldrb	r2, [r4, #16]
 80a09e2:	2191      	movs	r1, #145	; 0x91
 80a09e4:	4620      	mov	r0, r4
 80a09e6:	f7ff feb3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a09ea:	2201      	movs	r2, #1
 80a09ec:	2100      	movs	r1, #0
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f7ff feae 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a09f4:	2200      	movs	r2, #0
 80a09f6:	21ff      	movs	r1, #255	; 0xff
 80a09f8:	4620      	mov	r0, r4
 80a09fa:	f7ff fea9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a09fe:	2200      	movs	r2, #0
 80a0a00:	2180      	movs	r1, #128	; 0x80
 80a0a02:	4620      	mov	r0, r4
 80a0a04:	f7ff fea4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a0a08:	b16d      	cbz	r5, 80a0a26 <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0a0a:	21f8      	movs	r1, #248	; 0xf8
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	f7ff ff2e 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a0a12:	b100      	cbz	r0, 80a0a16 <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a0a14:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a0a16:	462a      	mov	r2, r5
 80a0a18:	2104      	movs	r1, #4
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	f7ff fedc 	bl	80a07d8 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0a20:	2204      	movs	r2, #4
 80a0a22:	2100      	movs	r1, #0
 80a0a24:	e001      	b.n	80a0a2a <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0a26:	4629      	mov	r1, r5
 80a0a28:	2202      	movs	r2, #2
 80a0a2a:	4620      	mov	r0, r4
  }
}
 80a0a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0a30:	f7ff be8e 	b.w	80a0750 <_ZN7VL53L0X8writeRegEhh>

080a0a34 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a0a34:	b538      	push	{r3, r4, r5, lr}
 80a0a36:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0a38:	f000 fde8 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0a3c:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0a3e:	2113      	movs	r1, #19
 80a0a40:	4620      	mov	r0, r4
 80a0a42:	f7ff fef4 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0a46:	0743      	lsls	r3, r0, #29
 80a0a48:	d10e      	bne.n	80a0a68 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0a4a:	6863      	ldr	r3, [r4, #4]
 80a0a4c:	2b00      	cmp	r3, #0
 80a0a4e:	d0f6      	beq.n	80a0a3e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0a50:	f000 fddc 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
 80a0a54:	68e3      	ldr	r3, [r4, #12]
 80a0a56:	1ac0      	subs	r0, r0, r3
 80a0a58:	6863      	ldr	r3, [r4, #4]
 80a0a5a:	4298      	cmp	r0, r3
 80a0a5c:	d9ef      	bls.n	80a0a3e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0a5e:	2301      	movs	r3, #1
 80a0a60:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a0a62:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a0a66:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0a68:	211e      	movs	r1, #30
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	f7ff feff 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>
 80a0a70:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0a72:	2201      	movs	r2, #1
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	210b      	movs	r1, #11
 80a0a78:	f7ff fe6a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0a7c:	4628      	mov	r0, r5
 80a0a7e:	bd38      	pop	{r3, r4, r5, pc}

080a0a80 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a82:	4604      	mov	r4, r0
 80a0a84:	460f      	mov	r7, r1
 80a0a86:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0a88:	2180      	movs	r1, #128	; 0x80
 80a0a8a:	2201      	movs	r2, #1
 80a0a8c:	f7ff fe60 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0a90:	2201      	movs	r2, #1
 80a0a92:	21ff      	movs	r1, #255	; 0xff
 80a0a94:	4620      	mov	r0, r4
 80a0a96:	f7ff fe5b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0a9a:	2200      	movs	r2, #0
 80a0a9c:	4611      	mov	r1, r2
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	f7ff fe56 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0aa4:	2206      	movs	r2, #6
 80a0aa6:	21ff      	movs	r1, #255	; 0xff
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	f7ff fe51 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0aae:	2183      	movs	r1, #131	; 0x83
 80a0ab0:	4620      	mov	r0, r4
 80a0ab2:	f7ff febc 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0ab6:	f040 0204 	orr.w	r2, r0, #4
 80a0aba:	b2d2      	uxtb	r2, r2
 80a0abc:	2183      	movs	r1, #131	; 0x83
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	f7ff fe46 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0ac4:	2207      	movs	r2, #7
 80a0ac6:	21ff      	movs	r1, #255	; 0xff
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	f7ff fe41 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0ace:	2201      	movs	r2, #1
 80a0ad0:	2181      	movs	r1, #129	; 0x81
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	f7ff fe3c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0ad8:	2201      	movs	r2, #1
 80a0ada:	2180      	movs	r1, #128	; 0x80
 80a0adc:	4620      	mov	r0, r4
 80a0ade:	f7ff fe37 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0ae2:	226b      	movs	r2, #107	; 0x6b
 80a0ae4:	2194      	movs	r1, #148	; 0x94
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff fe32 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0aec:	2200      	movs	r2, #0
 80a0aee:	2183      	movs	r1, #131	; 0x83
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	f7ff fe2d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0af6:	f000 fd89 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0afa:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0afc:	2183      	movs	r1, #131	; 0x83
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	f7ff fe95 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0b04:	4605      	mov	r5, r0
 80a0b06:	b958      	cbnz	r0, 80a0b20 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0b08:	6863      	ldr	r3, [r4, #4]
 80a0b0a:	2b00      	cmp	r3, #0
 80a0b0c:	d0f6      	beq.n	80a0afc <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0b0e:	f000 fd7d 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
 80a0b12:	68e3      	ldr	r3, [r4, #12]
 80a0b14:	1ac0      	subs	r0, r0, r3
 80a0b16:	6863      	ldr	r3, [r4, #4]
 80a0b18:	4298      	cmp	r0, r3
 80a0b1a:	d9ef      	bls.n	80a0afc <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0b1c:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0b20:	2201      	movs	r2, #1
 80a0b22:	4620      	mov	r0, r4
 80a0b24:	2183      	movs	r1, #131	; 0x83
 80a0b26:	f7ff fe13 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0b2a:	2192      	movs	r1, #146	; 0x92
 80a0b2c:	4620      	mov	r0, r4
 80a0b2e:	f7ff fe7e 	bl	80a082e <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0b32:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0b36:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0b3a:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0b3c:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0b3e:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0b40:	2181      	movs	r1, #129	; 0x81
 80a0b42:	4620      	mov	r0, r4
 80a0b44:	f7ff fe04 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0b48:	2206      	movs	r2, #6
 80a0b4a:	4620      	mov	r0, r4
 80a0b4c:	21ff      	movs	r1, #255	; 0xff
 80a0b4e:	f7ff fdff 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0b52:	2183      	movs	r1, #131	; 0x83
 80a0b54:	4620      	mov	r0, r4
 80a0b56:	f7ff fe6a 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0b5a:	2183      	movs	r1, #131	; 0x83
 80a0b5c:	4602      	mov	r2, r0
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	f7ff fdf6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	2201      	movs	r2, #1
 80a0b68:	21ff      	movs	r1, #255	; 0xff
 80a0b6a:	f7ff fdf1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	2201      	movs	r2, #1
 80a0b72:	2100      	movs	r1, #0
 80a0b74:	f7ff fdec 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0b78:	4620      	mov	r0, r4
 80a0b7a:	2200      	movs	r2, #0
 80a0b7c:	21ff      	movs	r1, #255	; 0xff
 80a0b7e:	f7ff fde7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0b82:	4620      	mov	r0, r4
 80a0b84:	2200      	movs	r2, #0
 80a0b86:	2180      	movs	r1, #128	; 0x80
 80a0b88:	f7ff fde2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0b8c:	2001      	movs	r0, #1
 80a0b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b90 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0b90:	b510      	push	{r4, lr}
 80a0b92:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0b94:	2101      	movs	r1, #1
 80a0b96:	f7ff fe4a 	bl	80a082e <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0b9a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0b9e:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0ba0:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0ba4:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0ba6:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0baa:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0bac:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0bb0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0bb4:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0bb6:	7120      	strb	r0, [r4, #4]
 80a0bb8:	bd10      	pop	{r4, pc}

080a0bba <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0bbe:	4298      	cmp	r0, r3
 80a0bc0:	bf28      	it	cs
 80a0bc2:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0bc4:	b2c3      	uxtb	r3, r0
 80a0bc6:	0a00      	lsrs	r0, r0, #8
 80a0bc8:	fa03 f000 	lsl.w	r0, r3, r0
 80a0bcc:	3001      	adds	r0, #1
}
 80a0bce:	b280      	uxth	r0, r0
 80a0bd0:	4770      	bx	lr

080a0bd2 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0bd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0bd6:	d201      	bcs.n	80a0bdc <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0bd8:	b178      	cbz	r0, 80a0bfa <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0bda:	e001      	b.n	80a0be0 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0bdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0be0:	3801      	subs	r0, #1
 80a0be2:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0be4:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0be8:	b29a      	uxth	r2, r3
 80a0bea:	f103 0301 	add.w	r3, r3, #1
 80a0bee:	d001      	beq.n	80a0bf4 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0bf0:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0bf2:	e7f7      	b.n	80a0be4 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0bf4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0bf8:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0bfa:	4770      	bx	lr

080a0bfc <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bfc:	4b08      	ldr	r3, [pc, #32]	; (80a0c20 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0c02:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0c04:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0c06:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0c0a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0c0e:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0c12:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0c16:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0c1a:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0c1e:	bd10      	pop	{r4, pc}
 80a0c20:	003a2f00 	.word	0x003a2f00

080a0c24 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0c24:	b570      	push	{r4, r5, r6, lr}
 80a0c26:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0c28:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0c2a:	4614      	mov	r4, r2
 80a0c2c:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0c2e:	f7ff feb7 	bl	80a09a0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0c32:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0c34:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0c36:	4628      	mov	r0, r5
 80a0c38:	f7ff fdf9 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0c3c:	3001      	adds	r0, #1
 80a0c3e:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0c40:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0c42:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0c44:	f7ff ffda 	bl	80a0bfc <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c48:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0c4a:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c4c:	4628      	mov	r0, r5
 80a0c4e:	f7ff fe0e 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>
 80a0c52:	f7ff ffb2 	bl	80a0bba <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c56:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c58:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c5a:	f7ff ffcf 	bl	80a0bfc <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c5e:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0c60:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c62:	4628      	mov	r0, r5
 80a0c64:	f7ff fde3 	bl	80a082e <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0c68:	3001      	adds	r0, #1
 80a0c6a:	0040      	lsls	r0, r0, #1
 80a0c6c:	b2c0      	uxtb	r0, r0
 80a0c6e:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c70:	2171      	movs	r1, #113	; 0x71
 80a0c72:	4628      	mov	r0, r5
 80a0c74:	f7ff fdfb 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>
 80a0c78:	f7ff ff9f 	bl	80a0bba <_ZN7VL53L0X13decodeTimeoutEm>
 80a0c7c:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0c7e:	78f3      	ldrb	r3, [r6, #3]
 80a0c80:	b113      	cbz	r3, 80a0c88 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0c82:	88e3      	ldrh	r3, [r4, #6]
 80a0c84:	1ac0      	subs	r0, r0, r3
 80a0c86:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0c88:	78a1      	ldrb	r1, [r4, #2]
 80a0c8a:	8920      	ldrh	r0, [r4, #8]
 80a0c8c:	f7ff ffb6 	bl	80a0bfc <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0c90:	6160      	str	r0, [r4, #20]
 80a0c92:	bd70      	pop	{r4, r5, r6, pc}

080a0c94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0c94:	b510      	push	{r4, lr}
 80a0c96:	4604      	mov	r4, r0
 80a0c98:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0c9a:	4669      	mov	r1, sp
 80a0c9c:	f7ff ff78 	bl	80a0b90 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0ca0:	aa02      	add	r2, sp, #8
 80a0ca2:	4669      	mov	r1, sp
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	f7ff ffbd 	bl	80a0c24 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0caa:	f89d 3000 	ldrb.w	r3, [sp]
 80a0cae:	b11b      	cbz	r3, 80a0cb8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0cb0:	9805      	ldr	r0, [sp, #20]
 80a0cb2:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0cb6:	e001      	b.n	80a0cbc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0cb8:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0cbc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0cc0:	b12b      	cbz	r3, 80a0cce <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0cc2:	9b05      	ldr	r3, [sp, #20]
 80a0cc4:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0cc8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0ccc:	e006      	b.n	80a0cdc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0cce:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0cd2:	b11b      	cbz	r3, 80a0cdc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0cd4:	9b05      	ldr	r3, [sp, #20]
 80a0cd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0cda:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0cdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0ce0:	b11b      	cbz	r3, 80a0cea <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0ce2:	9b06      	ldr	r3, [sp, #24]
 80a0ce4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0ce8:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0cee:	b11b      	cbz	r3, 80a0cf8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0cf0:	9b07      	ldr	r3, [sp, #28]
 80a0cf2:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0cf6:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0cf8:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0cfa:	b008      	add	sp, #32
 80a0cfc:	bd10      	pop	{r4, pc}
	...

080a0d00 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0d00:	4b08      	ldr	r3, [pc, #32]	; (80a0d24 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0d06:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0d08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0d0c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0d10:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0d14:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0d18:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0d1c:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0d20:	4770      	bx	lr
 80a0d22:	bf00      	nop
 80a0d24:	003a2f00 	.word	0x003a2f00

080a0d28 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0d28:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0d2e:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0d30:	b089      	sub	sp, #36	; 0x24
 80a0d32:	4606      	mov	r6, r0
 80a0d34:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0d36:	d942      	bls.n	80a0dbe <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0d38:	4669      	mov	r1, sp
 80a0d3a:	f7ff ff29 	bl	80a0b90 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0d3e:	aa02      	add	r2, sp, #8
 80a0d40:	4669      	mov	r1, sp
 80a0d42:	4630      	mov	r0, r6
 80a0d44:	f7ff ff6e 	bl	80a0c24 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0d48:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d4c:	b11b      	cbz	r3, 80a0d56 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0d4e:	9805      	ldr	r0, [sp, #20]
 80a0d50:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0d54:	e001      	b.n	80a0d5a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0d56:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0d5a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0d5e:	b12b      	cbz	r3, 80a0d6c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0d60:	9b05      	ldr	r3, [sp, #20]
 80a0d62:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0d66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0d6a:	e006      	b.n	80a0d7a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0d6c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0d70:	b11b      	cbz	r3, 80a0d7a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0d72:	9b05      	ldr	r3, [sp, #20]
 80a0d74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d78:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0d7a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0d7e:	b11f      	cbz	r7, 80a0d88 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0d80:	9b06      	ldr	r3, [sp, #24]
 80a0d82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d86:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0d88:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0d8c:	b1ac      	cbz	r4, 80a0dba <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0d8e:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0d92:	4285      	cmp	r5, r0
 80a0d94:	d313      	bcc.n	80a0dbe <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0d96:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0d9a:	1a28      	subs	r0, r5, r0
 80a0d9c:	f7ff ffb0 	bl	80a0d00 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0da0:	b117      	cbz	r7, 80a0da8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0da2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0da6:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0da8:	f7ff ff13 	bl	80a0bd2 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0dac:	2171      	movs	r1, #113	; 0x71
 80a0dae:	4602      	mov	r2, r0
 80a0db0:	4630      	mov	r0, r6
 80a0db2:	f7ff fcf2 	bl	80a079a <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0db6:	6175      	str	r5, [r6, #20]
 80a0db8:	e002      	b.n	80a0dc0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0dba:	2401      	movs	r4, #1
 80a0dbc:	e000      	b.n	80a0dc0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0dbe:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	b009      	add	sp, #36	; 0x24
 80a0dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dc6 <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0dc6:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0dc8:	f041 0201 	orr.w	r2, r1, #1
 80a0dcc:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0dce:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0dd0:	f7ff fcbe 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0dd4:	f000 fc1a 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0dd8:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0dda:	2113      	movs	r1, #19
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f7ff fd26 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0de2:	f010 0507 	ands.w	r5, r0, #7
 80a0de6:	d10b      	bne.n	80a0e00 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0de8:	6863      	ldr	r3, [r4, #4]
 80a0dea:	2b00      	cmp	r3, #0
 80a0dec:	d0f5      	beq.n	80a0dda <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0dee:	f000 fc0d 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
 80a0df2:	68e3      	ldr	r3, [r4, #12]
 80a0df4:	1ac0      	subs	r0, r0, r3
 80a0df6:	6863      	ldr	r3, [r4, #4]
 80a0df8:	4298      	cmp	r0, r3
 80a0dfa:	d9ee      	bls.n	80a0dda <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0dfc:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0dfe:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	2201      	movs	r2, #1
 80a0e04:	210b      	movs	r1, #11
 80a0e06:	f7ff fca3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0e0a:	2200      	movs	r2, #0
 80a0e0c:	4620      	mov	r0, r4
 80a0e0e:	4611      	mov	r1, r2
 80a0e10:	f7ff fc9e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0e14:	2001      	movs	r0, #1
 80a0e16:	bd38      	pop	{r3, r4, r5, pc}

080a0e18 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e1a:	4604      	mov	r4, r0
 80a0e1c:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0e1e:	b149      	cbz	r1, 80a0e34 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0e20:	2189      	movs	r1, #137	; 0x89
 80a0e22:	f7ff fd04 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0e26:	f040 0201 	orr.w	r2, r0, #1
 80a0e2a:	b2d2      	uxtb	r2, r2
 80a0e2c:	2189      	movs	r1, #137	; 0x89
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	f7ff fc8e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0e34:	2200      	movs	r2, #0
 80a0e36:	2188      	movs	r1, #136	; 0x88
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	f7ff fc89 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0e3e:	2201      	movs	r2, #1
 80a0e40:	2180      	movs	r1, #128	; 0x80
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	f7ff fc84 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0e48:	2201      	movs	r2, #1
 80a0e4a:	21ff      	movs	r1, #255	; 0xff
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	f7ff fc7f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0e52:	2200      	movs	r2, #0
 80a0e54:	4611      	mov	r1, r2
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	f7ff fc7a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0e5c:	2191      	movs	r1, #145	; 0x91
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	f7ff fce5 	bl	80a082e <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0e64:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0e66:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0e68:	2100      	movs	r1, #0
 80a0e6a:	4620      	mov	r0, r4
 80a0e6c:	f7ff fc70 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0e70:	2200      	movs	r2, #0
 80a0e72:	21ff      	movs	r1, #255	; 0xff
 80a0e74:	4620      	mov	r0, r4
 80a0e76:	f7ff fc6b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0e7a:	2200      	movs	r2, #0
 80a0e7c:	2180      	movs	r1, #128	; 0x80
 80a0e7e:	4620      	mov	r0, r4
 80a0e80:	f7ff fc66 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0e84:	2160      	movs	r1, #96	; 0x60
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	f7ff fcd1 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0e8c:	f040 0212 	orr.w	r2, r0, #18
 80a0e90:	b2d2      	uxtb	r2, r2
 80a0e92:	2160      	movs	r1, #96	; 0x60
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f7ff fc5b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0e9a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	f7ff fd56 	bl	80a0950 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0ea4:	22ff      	movs	r2, #255	; 0xff
 80a0ea6:	2101      	movs	r1, #1
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	f7ff fc51 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0eae:	f10d 0207 	add.w	r2, sp, #7
 80a0eb2:	f10d 0106 	add.w	r1, sp, #6
 80a0eb6:	4620      	mov	r0, r4
 80a0eb8:	f7ff fde2 	bl	80a0a80 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0ebc:	b908      	cbnz	r0, 80a0ec2 <_ZN7VL53L0X4initEb+0xaa>
 80a0ebe:	2500      	movs	r5, #0
 80a0ec0:	e21d      	b.n	80a12fe <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0ec2:	2306      	movs	r3, #6
 80a0ec4:	aa02      	add	r2, sp, #8
 80a0ec6:	21b0      	movs	r1, #176	; 0xb0
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	f7ff fd19 	bl	80a0900 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0ece:	2201      	movs	r2, #1
 80a0ed0:	21ff      	movs	r1, #255	; 0xff
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	f7ff fc3c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0ed8:	2200      	movs	r2, #0
 80a0eda:	214f      	movs	r1, #79	; 0x4f
 80a0edc:	4620      	mov	r0, r4
 80a0ede:	f7ff fc37 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0ee2:	222c      	movs	r2, #44	; 0x2c
 80a0ee4:	214e      	movs	r1, #78	; 0x4e
 80a0ee6:	4620      	mov	r0, r4
 80a0ee8:	f7ff fc32 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0eec:	2200      	movs	r2, #0
 80a0eee:	21ff      	movs	r1, #255	; 0xff
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	f7ff fc2d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0ef6:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0ef8:	4620      	mov	r0, r4
 80a0efa:	21b6      	movs	r1, #182	; 0xb6
 80a0efc:	22b4      	movs	r2, #180	; 0xb4
 80a0efe:	f7ff fc27 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0f02:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0f04:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0f08:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0f0c:	2b00      	cmp	r3, #0
 80a0f0e:	bf14      	ite	ne
 80a0f10:	200c      	movne	r0, #12
 80a0f12:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0f14:	2701      	movs	r7, #1
 80a0f16:	b2eb      	uxtb	r3, r5
 80a0f18:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0f1a:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0f1c:	f10d 0e10 	add.w	lr, sp, #16
 80a0f20:	f003 0307 	and.w	r3, r3, #7
 80a0f24:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0f26:	d801      	bhi.n	80a0f2c <_ZN7VL53L0X4initEb+0x114>
 80a0f28:	428e      	cmp	r6, r1
 80a0f2a:	d108      	bne.n	80a0f3e <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0f2c:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a0f30:	fa07 f303 	lsl.w	r3, r7, r3
 80a0f34:	ea2e 0303 	bic.w	r3, lr, r3
 80a0f38:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a0f3c:	e007      	b.n	80a0f4e <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0f3e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0f42:	fa42 f303 	asr.w	r3, r2, r3
 80a0f46:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a0f48:	bf44      	itt	mi
 80a0f4a:	3101      	addmi	r1, #1
 80a0f4c:	b2c9      	uxtbmi	r1, r1
 80a0f4e:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a0f50:	2d30      	cmp	r5, #48	; 0x30
 80a0f52:	d1e0      	bne.n	80a0f16 <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0f54:	2306      	movs	r3, #6
 80a0f56:	aa02      	add	r2, sp, #8
 80a0f58:	21b0      	movs	r1, #176	; 0xb0
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	f7ff fcaf 	bl	80a08be <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a0f60:	2201      	movs	r2, #1
 80a0f62:	21ff      	movs	r1, #255	; 0xff
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f7ff fbf3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0f6a:	2200      	movs	r2, #0
 80a0f6c:	4611      	mov	r1, r2
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	f7ff fbee 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0f74:	2200      	movs	r2, #0
 80a0f76:	21ff      	movs	r1, #255	; 0xff
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	f7ff fbe9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a0f7e:	2200      	movs	r2, #0
 80a0f80:	2109      	movs	r1, #9
 80a0f82:	4620      	mov	r0, r4
 80a0f84:	f7ff fbe4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a0f88:	2200      	movs	r2, #0
 80a0f8a:	2110      	movs	r1, #16
 80a0f8c:	4620      	mov	r0, r4
 80a0f8e:	f7ff fbdf 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a0f92:	2200      	movs	r2, #0
 80a0f94:	2111      	movs	r1, #17
 80a0f96:	4620      	mov	r0, r4
 80a0f98:	f7ff fbda 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a0f9c:	2201      	movs	r2, #1
 80a0f9e:	2124      	movs	r1, #36	; 0x24
 80a0fa0:	4620      	mov	r0, r4
 80a0fa2:	f7ff fbd5 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a0fa6:	22ff      	movs	r2, #255	; 0xff
 80a0fa8:	2125      	movs	r1, #37	; 0x25
 80a0faa:	4620      	mov	r0, r4
 80a0fac:	f7ff fbd0 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a0fb0:	2200      	movs	r2, #0
 80a0fb2:	2175      	movs	r1, #117	; 0x75
 80a0fb4:	4620      	mov	r0, r4
 80a0fb6:	f7ff fbcb 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0fba:	2201      	movs	r2, #1
 80a0fbc:	21ff      	movs	r1, #255	; 0xff
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	f7ff fbc6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a0fc4:	222c      	movs	r2, #44	; 0x2c
 80a0fc6:	214e      	movs	r1, #78	; 0x4e
 80a0fc8:	4620      	mov	r0, r4
 80a0fca:	f7ff fbc1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a0fce:	2200      	movs	r2, #0
 80a0fd0:	2148      	movs	r1, #72	; 0x48
 80a0fd2:	4620      	mov	r0, r4
 80a0fd4:	f7ff fbbc 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a0fd8:	2220      	movs	r2, #32
 80a0fda:	4629      	mov	r1, r5
 80a0fdc:	4620      	mov	r0, r4
 80a0fde:	f7ff fbb7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0fe2:	2200      	movs	r2, #0
 80a0fe4:	21ff      	movs	r1, #255	; 0xff
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	f7ff fbb2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a0fec:	2209      	movs	r2, #9
 80a0fee:	4629      	mov	r1, r5
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	f7ff fbad 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a0ff6:	2200      	movs	r2, #0
 80a0ff8:	2154      	movs	r1, #84	; 0x54
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	f7ff fba8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1000:	2204      	movs	r2, #4
 80a1002:	2131      	movs	r1, #49	; 0x31
 80a1004:	4620      	mov	r0, r4
 80a1006:	f7ff fba3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a100a:	2203      	movs	r2, #3
 80a100c:	2132      	movs	r1, #50	; 0x32
 80a100e:	4620      	mov	r0, r4
 80a1010:	f7ff fb9e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1014:	2283      	movs	r2, #131	; 0x83
 80a1016:	2140      	movs	r1, #64	; 0x40
 80a1018:	4620      	mov	r0, r4
 80a101a:	f7ff fb99 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a101e:	2225      	movs	r2, #37	; 0x25
 80a1020:	2146      	movs	r1, #70	; 0x46
 80a1022:	4620      	mov	r0, r4
 80a1024:	f7ff fb94 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1028:	2200      	movs	r2, #0
 80a102a:	2160      	movs	r1, #96	; 0x60
 80a102c:	4620      	mov	r0, r4
 80a102e:	f7ff fb8f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1032:	2200      	movs	r2, #0
 80a1034:	2127      	movs	r1, #39	; 0x27
 80a1036:	4620      	mov	r0, r4
 80a1038:	f7ff fb8a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a103c:	2206      	movs	r2, #6
 80a103e:	2150      	movs	r1, #80	; 0x50
 80a1040:	4620      	mov	r0, r4
 80a1042:	f7ff fb85 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a1046:	2200      	movs	r2, #0
 80a1048:	2151      	movs	r1, #81	; 0x51
 80a104a:	4620      	mov	r0, r4
 80a104c:	f7ff fb80 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1050:	2296      	movs	r2, #150	; 0x96
 80a1052:	2152      	movs	r1, #82	; 0x52
 80a1054:	4620      	mov	r0, r4
 80a1056:	f7ff fb7b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a105a:	2208      	movs	r2, #8
 80a105c:	2156      	movs	r1, #86	; 0x56
 80a105e:	4620      	mov	r0, r4
 80a1060:	f7ff fb76 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1064:	462a      	mov	r2, r5
 80a1066:	2157      	movs	r1, #87	; 0x57
 80a1068:	4620      	mov	r0, r4
 80a106a:	f7ff fb71 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a106e:	2200      	movs	r2, #0
 80a1070:	2161      	movs	r1, #97	; 0x61
 80a1072:	4620      	mov	r0, r4
 80a1074:	f7ff fb6c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1078:	2200      	movs	r2, #0
 80a107a:	2162      	movs	r1, #98	; 0x62
 80a107c:	4620      	mov	r0, r4
 80a107e:	f7ff fb67 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1082:	2200      	movs	r2, #0
 80a1084:	2164      	movs	r1, #100	; 0x64
 80a1086:	4620      	mov	r0, r4
 80a1088:	f7ff fb62 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a108c:	2200      	movs	r2, #0
 80a108e:	2165      	movs	r1, #101	; 0x65
 80a1090:	4620      	mov	r0, r4
 80a1092:	f7ff fb5d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a1096:	22a0      	movs	r2, #160	; 0xa0
 80a1098:	2166      	movs	r1, #102	; 0x66
 80a109a:	4620      	mov	r0, r4
 80a109c:	f7ff fb58 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a10a0:	2201      	movs	r2, #1
 80a10a2:	21ff      	movs	r1, #255	; 0xff
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	f7ff fb53 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a10aa:	2232      	movs	r2, #50	; 0x32
 80a10ac:	2122      	movs	r1, #34	; 0x22
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	f7ff fb4e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a10b4:	2214      	movs	r2, #20
 80a10b6:	2147      	movs	r1, #71	; 0x47
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	f7ff fb49 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a10be:	22ff      	movs	r2, #255	; 0xff
 80a10c0:	2149      	movs	r1, #73	; 0x49
 80a10c2:	4620      	mov	r0, r4
 80a10c4:	f7ff fb44 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a10c8:	2200      	movs	r2, #0
 80a10ca:	214a      	movs	r1, #74	; 0x4a
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	f7ff fb3f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a10d2:	2200      	movs	r2, #0
 80a10d4:	21ff      	movs	r1, #255	; 0xff
 80a10d6:	4620      	mov	r0, r4
 80a10d8:	f7ff fb3a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a10dc:	220a      	movs	r2, #10
 80a10de:	217a      	movs	r1, #122	; 0x7a
 80a10e0:	4620      	mov	r0, r4
 80a10e2:	f7ff fb35 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a10e6:	2200      	movs	r2, #0
 80a10e8:	217b      	movs	r1, #123	; 0x7b
 80a10ea:	4620      	mov	r0, r4
 80a10ec:	f7ff fb30 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a10f0:	2221      	movs	r2, #33	; 0x21
 80a10f2:	2178      	movs	r1, #120	; 0x78
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	f7ff fb2b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a10fa:	2201      	movs	r2, #1
 80a10fc:	21ff      	movs	r1, #255	; 0xff
 80a10fe:	4620      	mov	r0, r4
 80a1100:	f7ff fb26 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1104:	2234      	movs	r2, #52	; 0x34
 80a1106:	2123      	movs	r1, #35	; 0x23
 80a1108:	4620      	mov	r0, r4
 80a110a:	f7ff fb21 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a110e:	2200      	movs	r2, #0
 80a1110:	2142      	movs	r1, #66	; 0x42
 80a1112:	4620      	mov	r0, r4
 80a1114:	f7ff fb1c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1118:	22ff      	movs	r2, #255	; 0xff
 80a111a:	2144      	movs	r1, #68	; 0x44
 80a111c:	4620      	mov	r0, r4
 80a111e:	f7ff fb17 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1122:	2226      	movs	r2, #38	; 0x26
 80a1124:	2145      	movs	r1, #69	; 0x45
 80a1126:	4620      	mov	r0, r4
 80a1128:	f7ff fb12 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a112c:	2205      	movs	r2, #5
 80a112e:	2146      	movs	r1, #70	; 0x46
 80a1130:	4620      	mov	r0, r4
 80a1132:	f7ff fb0d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1136:	2240      	movs	r2, #64	; 0x40
 80a1138:	4611      	mov	r1, r2
 80a113a:	4620      	mov	r0, r4
 80a113c:	f7ff fb08 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1140:	2206      	movs	r2, #6
 80a1142:	210e      	movs	r1, #14
 80a1144:	4620      	mov	r0, r4
 80a1146:	f7ff fb03 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a114a:	221a      	movs	r2, #26
 80a114c:	2120      	movs	r1, #32
 80a114e:	4620      	mov	r0, r4
 80a1150:	f7ff fafe 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1154:	2240      	movs	r2, #64	; 0x40
 80a1156:	2143      	movs	r1, #67	; 0x43
 80a1158:	4620      	mov	r0, r4
 80a115a:	f7ff faf9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a115e:	2200      	movs	r2, #0
 80a1160:	21ff      	movs	r1, #255	; 0xff
 80a1162:	4620      	mov	r0, r4
 80a1164:	f7ff faf4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a1168:	2203      	movs	r2, #3
 80a116a:	2134      	movs	r1, #52	; 0x34
 80a116c:	4620      	mov	r0, r4
 80a116e:	f7ff faef 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1172:	2244      	movs	r2, #68	; 0x44
 80a1174:	2135      	movs	r1, #53	; 0x35
 80a1176:	4620      	mov	r0, r4
 80a1178:	f7ff faea 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a117c:	2201      	movs	r2, #1
 80a117e:	21ff      	movs	r1, #255	; 0xff
 80a1180:	4620      	mov	r0, r4
 80a1182:	f7ff fae5 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1186:	2204      	movs	r2, #4
 80a1188:	2131      	movs	r1, #49	; 0x31
 80a118a:	4620      	mov	r0, r4
 80a118c:	f7ff fae0 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1190:	2209      	movs	r2, #9
 80a1192:	214b      	movs	r1, #75	; 0x4b
 80a1194:	4620      	mov	r0, r4
 80a1196:	f7ff fadb 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a119a:	2205      	movs	r2, #5
 80a119c:	214c      	movs	r1, #76	; 0x4c
 80a119e:	4620      	mov	r0, r4
 80a11a0:	f7ff fad6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a11a4:	2204      	movs	r2, #4
 80a11a6:	214d      	movs	r1, #77	; 0x4d
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	f7ff fad1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a11ae:	2200      	movs	r2, #0
 80a11b0:	21ff      	movs	r1, #255	; 0xff
 80a11b2:	4620      	mov	r0, r4
 80a11b4:	f7ff facc 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a11b8:	2200      	movs	r2, #0
 80a11ba:	2144      	movs	r1, #68	; 0x44
 80a11bc:	4620      	mov	r0, r4
 80a11be:	f7ff fac7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a11c2:	2220      	movs	r2, #32
 80a11c4:	2145      	movs	r1, #69	; 0x45
 80a11c6:	4620      	mov	r0, r4
 80a11c8:	f7ff fac2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a11cc:	2208      	movs	r2, #8
 80a11ce:	2147      	movs	r1, #71	; 0x47
 80a11d0:	4620      	mov	r0, r4
 80a11d2:	f7ff fabd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a11d6:	2228      	movs	r2, #40	; 0x28
 80a11d8:	2148      	movs	r1, #72	; 0x48
 80a11da:	4620      	mov	r0, r4
 80a11dc:	f7ff fab8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a11e0:	2200      	movs	r2, #0
 80a11e2:	2167      	movs	r1, #103	; 0x67
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	f7ff fab3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a11ea:	2204      	movs	r2, #4
 80a11ec:	2170      	movs	r1, #112	; 0x70
 80a11ee:	4620      	mov	r0, r4
 80a11f0:	f7ff faae 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a11f4:	2201      	movs	r2, #1
 80a11f6:	2171      	movs	r1, #113	; 0x71
 80a11f8:	4620      	mov	r0, r4
 80a11fa:	f7ff faa9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a11fe:	22fe      	movs	r2, #254	; 0xfe
 80a1200:	2172      	movs	r1, #114	; 0x72
 80a1202:	4620      	mov	r0, r4
 80a1204:	f7ff faa4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a1208:	2200      	movs	r2, #0
 80a120a:	2176      	movs	r1, #118	; 0x76
 80a120c:	4620      	mov	r0, r4
 80a120e:	f7ff fa9f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a1212:	2200      	movs	r2, #0
 80a1214:	2177      	movs	r1, #119	; 0x77
 80a1216:	4620      	mov	r0, r4
 80a1218:	f7ff fa9a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a121c:	2201      	movs	r2, #1
 80a121e:	21ff      	movs	r1, #255	; 0xff
 80a1220:	4620      	mov	r0, r4
 80a1222:	f7ff fa95 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a1226:	2201      	movs	r2, #1
 80a1228:	210d      	movs	r1, #13
 80a122a:	4620      	mov	r0, r4
 80a122c:	f7ff fa90 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1230:	2200      	movs	r2, #0
 80a1232:	21ff      	movs	r1, #255	; 0xff
 80a1234:	4620      	mov	r0, r4
 80a1236:	f7ff fa8b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a123a:	2201      	movs	r2, #1
 80a123c:	2180      	movs	r1, #128	; 0x80
 80a123e:	4620      	mov	r0, r4
 80a1240:	f7ff fa86 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a1244:	22f8      	movs	r2, #248	; 0xf8
 80a1246:	2101      	movs	r1, #1
 80a1248:	4620      	mov	r0, r4
 80a124a:	f7ff fa81 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a124e:	2201      	movs	r2, #1
 80a1250:	21ff      	movs	r1, #255	; 0xff
 80a1252:	4620      	mov	r0, r4
 80a1254:	f7ff fa7c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a1258:	2201      	movs	r2, #1
 80a125a:	218e      	movs	r1, #142	; 0x8e
 80a125c:	4620      	mov	r0, r4
 80a125e:	f7ff fa77 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1262:	2201      	movs	r2, #1
 80a1264:	2100      	movs	r1, #0
 80a1266:	4620      	mov	r0, r4
 80a1268:	f7ff fa72 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a126c:	2200      	movs	r2, #0
 80a126e:	21ff      	movs	r1, #255	; 0xff
 80a1270:	4620      	mov	r0, r4
 80a1272:	f7ff fa6d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1276:	2200      	movs	r2, #0
 80a1278:	2180      	movs	r1, #128	; 0x80
 80a127a:	4620      	mov	r0, r4
 80a127c:	f7ff fa68 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a1280:	2204      	movs	r2, #4
 80a1282:	210a      	movs	r1, #10
 80a1284:	4620      	mov	r0, r4
 80a1286:	f7ff fa63 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a128a:	2184      	movs	r1, #132	; 0x84
 80a128c:	4620      	mov	r0, r4
 80a128e:	f7ff face 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a1292:	2184      	movs	r1, #132	; 0x84
 80a1294:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a1298:	4620      	mov	r0, r4
 80a129a:	f7ff fa59 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a129e:	2201      	movs	r2, #1
 80a12a0:	210b      	movs	r1, #11
 80a12a2:	4620      	mov	r0, r4
 80a12a4:	f7ff fa54 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a12a8:	4620      	mov	r0, r4
 80a12aa:	f7ff fcf3 	bl	80a0c94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a12ae:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a12b0:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a12b2:	2101      	movs	r1, #1
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	f7ff fa4b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a12ba:	6961      	ldr	r1, [r4, #20]
 80a12bc:	4620      	mov	r0, r4
 80a12be:	f7ff fd33 	bl	80a0d28 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a12c2:	2201      	movs	r2, #1
 80a12c4:	4611      	mov	r1, r2
 80a12c6:	4620      	mov	r0, r4
 80a12c8:	f7ff fa42 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a12cc:	2140      	movs	r1, #64	; 0x40
 80a12ce:	4620      	mov	r0, r4
 80a12d0:	f7ff fd79 	bl	80a0dc6 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a12d4:	2800      	cmp	r0, #0
 80a12d6:	f43f adf2 	beq.w	80a0ebe <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a12da:	2202      	movs	r2, #2
 80a12dc:	2101      	movs	r1, #1
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f7ff fa36 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a12e4:	2100      	movs	r1, #0
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	f7ff fd6d 	bl	80a0dc6 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a12ec:	4605      	mov	r5, r0
 80a12ee:	2800      	cmp	r0, #0
 80a12f0:	f43f ade5 	beq.w	80a0ebe <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a12f4:	22e8      	movs	r2, #232	; 0xe8
 80a12f6:	2101      	movs	r1, #1
 80a12f8:	4620      	mov	r0, r4
 80a12fa:	f7ff fa29 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a12fe:	4628      	mov	r0, r5
 80a1300:	b005      	add	sp, #20
 80a1302:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1304 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a1304:	f000 b92a 	b.w	80a155c <HAL_Pin_Map>

080a1308 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a1308:	4770      	bx	lr

080a130a <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a130a:	b510      	push	{r4, lr}
 80a130c:	4604      	mov	r4, r0

}
 80a130e:	f7fe fec4 	bl	80a009a <_ZdlPv>
 80a1312:	4620      	mov	r0, r4
 80a1314:	bd10      	pop	{r4, pc}

080a1316 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a1316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1318:	4605      	mov	r5, r0
 80a131a:	461e      	mov	r6, r3
 80a131c:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a131e:	7c01      	ldrb	r1, [r0, #16]
 80a1320:	68c0      	ldr	r0, [r0, #12]
 80a1322:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a1326:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a1328:	f000 fe85 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a132c:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a132e:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1330:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a1332:	bf88      	it	hi
 80a1334:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1338:	689b      	ldr	r3, [r3, #8]
 80a133a:	4639      	mov	r1, r7
 80a133c:	4798      	blx	r3
 80a133e:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1340:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1342:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1344:	d005      	beq.n	80a1352 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a1346:	6803      	ldr	r3, [r0, #0]
 80a1348:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a134c:	689b      	ldr	r3, [r3, #8]
 80a134e:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1350:	e7f6      	b.n	80a1340 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1352:	f000 fe78 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a1356:	fab0 f080 	clz	r0, r0
 80a135a:	0940      	lsrs	r0, r0, #5
 80a135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a135e <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a135e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1360:	4604      	mov	r4, r0
 80a1362:	461e      	mov	r6, r3
 80a1364:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a1366:	7c01      	ldrb	r1, [r0, #16]
 80a1368:	68c0      	ldr	r0, [r0, #12]
 80a136a:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a136e:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1370:	f000 fe61 	bl	80a2036 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1374:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a1376:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1378:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a137a:	bf88      	it	hi
 80a137c:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1380:	689b      	ldr	r3, [r3, #8]
 80a1382:	4639      	mov	r1, r7
 80a1384:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a1386:	68e0      	ldr	r0, [r4, #12]
 80a1388:	f000 fe5d 	bl	80a2046 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a138c:	b9a8      	cbnz	r0, 80a13ba <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a138e:	7c21      	ldrb	r1, [r4, #16]
 80a1390:	4632      	mov	r2, r6
 80a1392:	f041 0118 	orr.w	r1, r1, #24
 80a1396:	68e0      	ldr	r0, [r4, #12]
 80a1398:	f000 fe48 	bl	80a202c <_ZN7TwoWire11requestFromEii>
 80a139c:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a139e:	42ae      	cmp	r6, r5
 80a13a0:	d00d      	beq.n	80a13be <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a13a2:	68e0      	ldr	r0, [r4, #12]
 80a13a4:	6803      	ldr	r3, [r0, #0]
 80a13a6:	691b      	ldr	r3, [r3, #16]
 80a13a8:	4798      	blx	r3
 80a13aa:	b140      	cbz	r0, 80a13be <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a13ac:	68e0      	ldr	r0, [r4, #12]
 80a13ae:	6803      	ldr	r3, [r0, #0]
 80a13b0:	695b      	ldr	r3, [r3, #20]
 80a13b2:	4798      	blx	r3
 80a13b4:	f805 0b01 	strb.w	r0, [r5], #1
 80a13b8:	e7f1      	b.n	80a139e <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a13ba:	2000      	movs	r0, #0
 80a13bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a13be:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a13c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13c2 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a13c2:	2200      	movs	r2, #0
 80a13c4:	7002      	strb	r2, [r0, #0]
 80a13c6:	7042      	strb	r2, [r0, #1]
 80a13c8:	7082      	strb	r2, [r0, #2]
 80a13ca:	70c2      	strb	r2, [r0, #3]
 80a13cc:	7102      	strb	r2, [r0, #4]
 80a13ce:	7142      	strb	r2, [r0, #5]
 80a13d0:	7182      	strb	r2, [r0, #6]
 80a13d2:	71c2      	strb	r2, [r0, #7]
 80a13d4:	7202      	strb	r2, [r0, #8]
 80a13d6:	7242      	strb	r2, [r0, #9]
 80a13d8:	7282      	strb	r2, [r0, #10]
}
 80a13da:	4770      	bx	lr

080a13dc <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a13dc:	f041 0107 	orr.w	r1, r1, #7
 80a13e0:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a13e2:	4770      	bx	lr

080a13e4 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a13e4:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a13e6:	6803      	ldr	r3, [r0, #0]
 80a13e8:	aa01      	add	r2, sp, #4
 80a13ea:	689c      	ldr	r4, [r3, #8]
 80a13ec:	2301      	movs	r3, #1
 80a13ee:	47a0      	blx	r4

	return resp[0];
}
 80a13f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a13f4:	b002      	add	sp, #8
 80a13f6:	bd10      	pop	{r4, pc}

080a13f8 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a13f8:	b538      	push	{r3, r4, r5, lr}
 80a13fa:	4605      	mov	r5, r0
 80a13fc:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a13fe:	210f      	movs	r1, #15
 80a1400:	4628      	mov	r0, r5
 80a1402:	f7ff ffef 	bl	80a13e4 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a1406:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a1408:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a140c:	d005      	beq.n	80a141a <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a140e:	f000 fb97 	bl	80a1b40 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a1412:	3c01      	subs	r4, #1
 80a1414:	d1f3      	bne.n	80a13fe <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a1416:	4620      	mov	r0, r4
 80a1418:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a141a:	bd38      	pop	{r3, r4, r5, pc}

080a141c <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a141c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a141e:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a1420:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a1422:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a1424:	f7ff ffde 	bl	80a13e4 <_ZN6LIS3DH13readRegister8Eh>
 80a1428:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a142c:	2800      	cmp	r0, #0
 80a142e:	bf14      	ite	ne
 80a1430:	2501      	movne	r5, #1
 80a1432:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a1434:	d01b      	beq.n	80a146e <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a1436:	6833      	ldr	r3, [r6, #0]
 80a1438:	466a      	mov	r2, sp
 80a143a:	689f      	ldr	r7, [r3, #8]
 80a143c:	2128      	movs	r1, #40	; 0x28
 80a143e:	2306      	movs	r3, #6
 80a1440:	4630      	mov	r0, r6
 80a1442:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a1444:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a1448:	f89d 3000 	ldrb.w	r3, [sp]
 80a144c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1450:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a1452:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a1456:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a145a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a145e:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a1460:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1464:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a146c:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a146e:	4628      	mov	r0, r5
 80a1470:	b003      	add	sp, #12
 80a1472:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1474 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a1474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a1476:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a1478:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a147a:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a147e:	68dd      	ldr	r5, [r3, #12]
 80a1480:	4622      	mov	r2, r4
 80a1482:	2301      	movs	r3, #1
 80a1484:	47a8      	blx	r5
}
 80a1486:	b003      	add	sp, #12
 80a1488:	bd30      	pop	{r4, r5, pc}
	...

080a148c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a148c:	b570      	push	{r4, r5, r6, lr}
 80a148e:	4604      	mov	r4, r0
 80a1490:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a1492:	f7ff ffb1 	bl	80a13f8 <_ZN6LIS3DH9hasDeviceEv>
 80a1496:	4606      	mov	r6, r0
 80a1498:	b928      	cbnz	r0, 80a14a6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a149a:	f000 fc7f 	bl	80a1d9c <_Z16_fetch_usbserialv>
 80a149e:	4928      	ldr	r1, [pc, #160]	; (80a1540 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a14a0:	f000 facc 	bl	80a1a3c <_ZN5Print7printlnEPKc>
		return false;
 80a14a4:	e049      	b.n	80a153a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a14a6:	782a      	ldrb	r2, [r5, #0]
 80a14a8:	2120      	movs	r1, #32
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	f7ff ffe2 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a14b0:	786a      	ldrb	r2, [r5, #1]
 80a14b2:	2121      	movs	r1, #33	; 0x21
 80a14b4:	4620      	mov	r0, r4
 80a14b6:	f7ff ffdd 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a14ba:	78aa      	ldrb	r2, [r5, #2]
 80a14bc:	2122      	movs	r1, #34	; 0x22
 80a14be:	4620      	mov	r0, r4
 80a14c0:	f7ff ffd8 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a14c4:	78ea      	ldrb	r2, [r5, #3]
 80a14c6:	2123      	movs	r1, #35	; 0x23
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	f7ff ffd3 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a14ce:	792a      	ldrb	r2, [r5, #4]
 80a14d0:	2124      	movs	r1, #36	; 0x24
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	f7ff ffce 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a14d8:	796a      	ldrb	r2, [r5, #5]
 80a14da:	2125      	movs	r1, #37	; 0x25
 80a14dc:	4620      	mov	r0, r4
 80a14de:	f7ff ffc9 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a14e2:	79ab      	ldrb	r3, [r5, #6]
 80a14e4:	b11b      	cbz	r3, 80a14ee <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a14e6:	2126      	movs	r1, #38	; 0x26
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7ff ff7b 	bl	80a13e4 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a14ee:	7aaa      	ldrb	r2, [r5, #10]
 80a14f0:	212e      	movs	r1, #46	; 0x2e
 80a14f2:	4620      	mov	r0, r4
 80a14f4:	f7ff ffbe 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a14f8:	78ab      	ldrb	r3, [r5, #2]
 80a14fa:	065b      	lsls	r3, r3, #25
 80a14fc:	d51d      	bpl.n	80a153a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a14fe:	79ea      	ldrb	r2, [r5, #7]
 80a1500:	2132      	movs	r1, #50	; 0x32
 80a1502:	4620      	mov	r0, r4
 80a1504:	f7ff ffb6 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a1508:	7a2a      	ldrb	r2, [r5, #8]
 80a150a:	2133      	movs	r1, #51	; 0x33
 80a150c:	4620      	mov	r0, r4
 80a150e:	f7ff ffb1 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a1512:	6863      	ldr	r3, [r4, #4]
 80a1514:	2b00      	cmp	r3, #0
 80a1516:	db0a      	blt.n	80a152e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a1518:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a151a:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a151c:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a151e:	2130      	movs	r1, #48	; 0x30
 80a1520:	f7ff ffa8 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a1524:	2131      	movs	r1, #49	; 0x31
 80a1526:	4620      	mov	r0, r4
 80a1528:	f7ff ff5c 	bl	80a13e4 <_ZN6LIS3DH13readRegister8Eh>
 80a152c:	e005      	b.n	80a153a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a152e:	2200      	movs	r2, #0
 80a1530:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a1532:	2130      	movs	r1, #48	; 0x30
 80a1534:	4620      	mov	r0, r4
 80a1536:	f7ff ff9d 	bl	80a1474 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a153a:	4630      	mov	r0, r6
 80a153c:	bd70      	pop	{r4, r5, r6, pc}
 80a153e:	bf00      	nop
 80a1540:	080a2db4 	.word	0x080a2db4

080a1544 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1544:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a1546:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1548:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a154a:	60c1      	str	r1, [r0, #12]
 80a154c:	6003      	str	r3, [r0, #0]
 80a154e:	7402      	strb	r2, [r0, #16]

}
 80a1550:	bd10      	pop	{r4, pc}
 80a1552:	bf00      	nop
 80a1554:	080a2da4 	.word	0x080a2da4

080a1558 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a1558:	f000 b800 	b.w	80a155c <HAL_Pin_Map>

080a155c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <HAL_Pin_Map+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	681b      	ldr	r3, [r3, #0]
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	080601b0 	.word	0x080601b0

080a156c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <HAL_Validate_Pin_Function+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	685b      	ldr	r3, [r3, #4]
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601b0 	.word	0x080601b0

080a157c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <HAL_Pin_Mode+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	689b      	ldr	r3, [r3, #8]
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601b0 	.word	0x080601b0

080a158c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <HAL_Get_Pin_Mode+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	68db      	ldr	r3, [r3, #12]
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	080601b0 	.word	0x080601b0

080a159c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <HAL_GPIO_Write+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	691b      	ldr	r3, [r3, #16]
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601b0 	.word	0x080601b0

080a15ac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <HAL_GPIO_Read+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	695b      	ldr	r3, [r3, #20]
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601b0 	.word	0x080601b0

080a15bc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <HAL_Interrupts_Attach+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	699b      	ldr	r3, [r3, #24]
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601b0 	.word	0x080601b0

080a15cc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <HAL_Interrupts_Detach+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	69db      	ldr	r3, [r3, #28]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601b0 	.word	0x080601b0

080a15dc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <HAL_SPI_Init+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	69db      	ldr	r3, [r3, #28]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601b4 	.word	0x080601b4

080a15ec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <HAL_SPI_Is_Enabled+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	6a1b      	ldr	r3, [r3, #32]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601b4 	.word	0x080601b4

080a15fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <HAL_RNG_GetRandomNumber+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	685b      	ldr	r3, [r3, #4]
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	0806019c 	.word	0x0806019c

080a160c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	695b      	ldr	r3, [r3, #20]
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	0806019c 	.word	0x0806019c

080a161c <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <os_timer_create+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6a1b      	ldr	r3, [r3, #32]
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601d0 	.word	0x080601d0

080a162c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <os_timer_destroy+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601d0 	.word	0x080601d0

080a163c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <os_timer_get_id+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601d0 	.word	0x080601d0

080a164c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <os_timer_change+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601d0 	.word	0x080601d0

080a165c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <os_mutex_create+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601d0 	.word	0x080601d0

080a166c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_USART_Init+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	699b      	ldr	r3, [r3, #24]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601c4 	.word	0x080601c4

080a167c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_USART_Write_Data+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601c4 	.word	0x080601c4

080a168c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_USART_Available_Data+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601c4 	.word	0x080601c4

080a169c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_USART_Read_Data+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601c4 	.word	0x080601c4

080a16ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_USART_Peek_Data+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601c4 	.word	0x080601c4

080a16bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_USART_Flush_Data+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601c4 	.word	0x080601c4

080a16cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_USART_Is_Enabled+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601c4 	.word	0x080601c4

080a16dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601c4 	.word	0x080601c4

080a16ec <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_I2C_Set_Speed+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_I2C_Begin+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_I2C_Request_Data+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601ac 	.word	0x080601ac

080a171c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_I2C_Begin_Transmission+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601ac 	.word	0x080601ac

080a172c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_I2C_End_Transmission+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601ac 	.word	0x080601ac

080a173c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <HAL_I2C_Write_Data+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601ac 	.word	0x080601ac

080a174c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <HAL_I2C_Available_Data+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601ac 	.word	0x080601ac

080a175c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <HAL_I2C_Read_Data+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601ac 	.word	0x080601ac

080a176c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <HAL_I2C_Peek_Data+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601ac 	.word	0x080601ac

080a177c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <HAL_I2C_Flush_Data+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601ac 	.word	0x080601ac

080a178c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <HAL_I2C_Is_Enabled+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601ac 	.word	0x080601ac

080a179c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b03      	ldr	r3, [pc, #12]	; (80a17ac <HAL_I2C_Init+0x10>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a17a6:	9301      	str	r3, [sp, #4]
 80a17a8:	bd08      	pop	{r3, pc}
 80a17aa:	0000      	.short	0x0000
 80a17ac:	080601ac 	.word	0x080601ac

080a17b0 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_Servo_Attach+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	691b      	ldr	r3, [r3, #16]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601a8 	.word	0x080601a8

080a17c0 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_Servo_Detach+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	695b      	ldr	r3, [r3, #20]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601a8 	.word	0x080601a8

080a17d0 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_Servo_Write_Pulse_Width+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	699b      	ldr	r3, [r3, #24]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601a8 	.word	0x080601a8

080a17e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_USB_USART_Init+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	681b      	ldr	r3, [r3, #0]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d8 	.word	0x080601d8

080a17f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_USB_USART_Begin+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	685b      	ldr	r3, [r3, #4]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d8 	.word	0x080601d8

080a1800 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USB_USART_Available_Data+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	691b      	ldr	r3, [r3, #16]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d8 	.word	0x080601d8

080a1810 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	695b      	ldr	r3, [r3, #20]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d8 	.word	0x080601d8

080a1820 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USB_USART_Receive_Data+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	699b      	ldr	r3, [r3, #24]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601d8 	.word	0x080601d8

080a1830 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_USB_USART_Send_Data+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	69db      	ldr	r3, [r3, #28]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601d8 	.word	0x080601d8

080a1840 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_USB_USART_Flush_Data+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6a1b      	ldr	r3, [r3, #32]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601d8 	.word	0x080601d8

080a1850 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <set_system_mode+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	685b      	ldr	r3, [r3, #4]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601a4 	.word	0x080601a4

080a1860 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <system_delay_ms+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	695b      	ldr	r3, [r3, #20]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601a4 	.word	0x080601a4

080a1870 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <system_thread_set_state+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601a4 	.word	0x080601a4

080a1880 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <system_set_usb_request_app_handler+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601a4 	.word	0x080601a4

080a1890 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <system_set_usb_request_result+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601a4 	.word	0x080601a4

080a18a0 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <network_ready+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	691b      	ldr	r3, [r3, #16]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601c8 	.word	0x080601c8

080a18b0 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <free+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	685b      	ldr	r3, [r3, #4]
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601a0 	.word	0x080601a0

080a18c0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <vsnprintf+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601a0 	.word	0x080601a0

080a18d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a18d0:	4770      	bx	lr

080a18d2 <_ZN8SPIClassD0Ev>:
 80a18d2:	b510      	push	{r4, lr}
 80a18d4:	4604      	mov	r4, r0
 80a18d6:	f7fe fbe0 	bl	80a009a <_ZdlPv>
 80a18da:	4620      	mov	r0, r4
 80a18dc:	bd10      	pop	{r4, pc}
	...

080a18e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a18e0:	b570      	push	{r4, r5, r6, lr}
 80a18e2:	4604      	mov	r4, r0
 80a18e4:	460e      	mov	r6, r1
 80a18e6:	4b07      	ldr	r3, [pc, #28]	; (80a1904 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a18e8:	2500      	movs	r5, #0
 80a18ea:	6003      	str	r3, [r0, #0]
 80a18ec:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a18f0:	f7ff feb4 	bl	80a165c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a18f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a18f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a18f8:	f7ff fe70 	bl	80a15dc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a18fc:	60a5      	str	r5, [r4, #8]
}
 80a18fe:	4620      	mov	r0, r4
 80a1900:	bd70      	pop	{r4, r5, r6, pc}
 80a1902:	bf00      	nop
 80a1904:	080a2e00 	.word	0x080a2e00

080a1908 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1908:	7900      	ldrb	r0, [r0, #4]
 80a190a:	f7ff be6f 	b.w	80a15ec <HAL_SPI_Is_Enabled>

080a190e <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a190e:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1912:	1c53      	adds	r3, r2, #1
 80a1914:	d00b      	beq.n	80a192e <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1916:	8843      	ldrh	r3, [r0, #2]
 80a1918:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a191a:	428b      	cmp	r3, r1
 80a191c:	d803      	bhi.n	80a1926 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a191e:	4288      	cmp	r0, r1
 80a1920:	4603      	mov	r3, r0
 80a1922:	bf28      	it	cs
 80a1924:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1926:	4619      	mov	r1, r3
 80a1928:	b290      	uxth	r0, r2
 80a192a:	f7ff bf51 	b.w	80a17d0 <HAL_Servo_Write_Pulse_Width>
 80a192e:	4770      	bx	lr

080a1930 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1930:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a1934:	22b4      	movs	r2, #180	; 0xb4
 80a1936:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1938:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a193c:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a193e:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1940:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1942:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1946:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1948:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a194a:	60c3      	str	r3, [r0, #12]
 80a194c:	4770      	bx	lr

080a194e <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a194e:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a1950:	f7ff ffee 	bl	80a1930 <_ZN5Servo11resetFieldsEv>
}
 80a1954:	bd08      	pop	{r3, pc}

080a1956 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a1956:	b510      	push	{r4, lr}
 80a1958:	4604      	mov	r4, r0
 80a195a:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a195e:	1c43      	adds	r3, r0, #1
 80a1960:	d007      	beq.n	80a1972 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a1962:	b280      	uxth	r0, r0
 80a1964:	f7ff ff2c 	bl	80a17c0 <HAL_Servo_Detach>

  this->resetFields();
 80a1968:	4620      	mov	r0, r4
 80a196a:	f7ff ffe1 	bl	80a1930 <_ZN5Servo11resetFieldsEv>

  return true;
 80a196e:	2001      	movs	r0, #1
 80a1970:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a1972:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a1974:	bd10      	pop	{r4, pc}

080a1976 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a197a:	460d      	mov	r5, r1
 80a197c:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a197e:	2102      	movs	r1, #2
 80a1980:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1982:	4690      	mov	r8, r2
 80a1984:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1986:	f7ff fdf1 	bl	80a156c <HAL_Validate_Pin_Function>
 80a198a:	2802      	cmp	r0, #2
 80a198c:	d001      	beq.n	80a1992 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a198e:	2600      	movs	r6, #0
 80a1990:	e019      	b.n	80a19c6 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1992:	4628      	mov	r0, r5
 80a1994:	f000 fb74 	bl	80a2080 <pinAvailable>
 80a1998:	4606      	mov	r6, r0
 80a199a:	2800      	cmp	r0, #0
 80a199c:	d0f7      	beq.n	80a198e <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a199e:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a19a2:	3301      	adds	r3, #1
 80a19a4:	d002      	beq.n	80a19ac <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a19a6:	4620      	mov	r0, r4
 80a19a8:	f7ff ffd5 	bl	80a1956 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a19ac:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a19b0:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a19b2:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a19b4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a19b8:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a19bc:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a19be:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a19c0:	4628      	mov	r0, r5
 80a19c2:	f7ff fef5 	bl	80a17b0 <HAL_Servo_Attach>

  return true;
}
 80a19c6:	4630      	mov	r0, r6
 80a19c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a19cc <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19cc:	2000      	movs	r0, #0
 80a19ce:	f7ff bf3f 	b.w	80a1850 <set_system_mode>

080a19d2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a19d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19d4:	4606      	mov	r6, r0
 80a19d6:	460d      	mov	r5, r1
 80a19d8:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a19da:	2400      	movs	r4, #0
  while (size--) {
 80a19dc:	42bd      	cmp	r5, r7
 80a19de:	d00c      	beq.n	80a19fa <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a19e0:	6833      	ldr	r3, [r6, #0]
 80a19e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a19e6:	689b      	ldr	r3, [r3, #8]
 80a19e8:	4630      	mov	r0, r6
 80a19ea:	4798      	blx	r3
     if (chunk>=0)
 80a19ec:	2800      	cmp	r0, #0
 80a19ee:	db01      	blt.n	80a19f4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a19f0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a19f2:	e7f3      	b.n	80a19dc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a19f4:	2c00      	cmp	r4, #0
 80a19f6:	bf08      	it	eq
 80a19f8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a19fa:	4620      	mov	r0, r4
 80a19fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19fe <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a19fe:	b570      	push	{r4, r5, r6, lr}
 80a1a00:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a02:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1a04:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1a06:	b149      	cbz	r1, 80a1a1c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a08:	f001 f98b 	bl	80a2d22 <strlen>
 80a1a0c:	682b      	ldr	r3, [r5, #0]
 80a1a0e:	4602      	mov	r2, r0
 80a1a10:	4621      	mov	r1, r4
 80a1a12:	4628      	mov	r0, r5
    }
 80a1a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1a18:	68db      	ldr	r3, [r3, #12]
 80a1a1a:	4718      	bx	r3
    }
 80a1a1c:	bd70      	pop	{r4, r5, r6, pc}

080a1a1e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a1e:	6803      	ldr	r3, [r0, #0]
 80a1a20:	689b      	ldr	r3, [r3, #8]
 80a1a22:	4718      	bx	r3

080a1a24 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1a24:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1a26:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1a28:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1a2a:	f7ff fff8 	bl	80a1a1e <_ZN5Print5printEc>
  n += print('\n');
 80a1a2e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1a30:	4604      	mov	r4, r0
  n += print('\n');
 80a1a32:	4628      	mov	r0, r5
 80a1a34:	f7ff fff3 	bl	80a1a1e <_ZN5Print5printEc>
  return n;
}
 80a1a38:	4420      	add	r0, r4
 80a1a3a:	bd38      	pop	{r3, r4, r5, pc}

080a1a3c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1a3c:	b538      	push	{r3, r4, r5, lr}
 80a1a3e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a40:	f7ff ffdd 	bl	80a19fe <_ZN5Print5writeEPKc>
 80a1a44:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1a46:	4628      	mov	r0, r5
 80a1a48:	f7ff ffec 	bl	80a1a24 <_ZN5Print7printlnEv>
  return n;
}
 80a1a4c:	4420      	add	r0, r4
 80a1a4e:	bd38      	pop	{r3, r4, r5, pc}

080a1a50 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a50:	2a01      	cmp	r2, #1
 80a1a52:	bf98      	it	ls
 80a1a54:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a56:	b530      	push	{r4, r5, lr}
 80a1a58:	460b      	mov	r3, r1
 80a1a5a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1a62:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1a66:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1a6a:	fb05 3312 	mls	r3, r5, r2, r3
 80a1a6e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a70:	2b09      	cmp	r3, #9
 80a1a72:	bf94      	ite	ls
 80a1a74:	3330      	addls	r3, #48	; 0x30
 80a1a76:	3337      	addhi	r3, #55	; 0x37
 80a1a78:	b2db      	uxtb	r3, r3
 80a1a7a:	4621      	mov	r1, r4
 80a1a7c:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a80:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a82:	2d00      	cmp	r5, #0
 80a1a84:	d1ef      	bne.n	80a1a66 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a86:	f7ff ffba 	bl	80a19fe <_ZN5Print5writeEPKc>
}
 80a1a8a:	b00b      	add	sp, #44	; 0x2c
 80a1a8c:	bd30      	pop	{r4, r5, pc}

080a1a8e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a8e:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a90:	b922      	cbnz	r2, 80a1a9c <_ZN5Print5printEmi+0xe>
 80a1a92:	6803      	ldr	r3, [r0, #0]
 80a1a94:	b2c9      	uxtb	r1, r1
 80a1a96:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a98:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a9a:	4718      	bx	r3
  else return printNumber(n, base);
 80a1a9c:	b2d2      	uxtb	r2, r2
}
 80a1a9e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1aa0:	f7ff bfd6 	b.w	80a1a50 <_ZN5Print11printNumberEmh>

080a1aa4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1aa4:	f7ff bff3 	b.w	80a1a8e <_ZN5Print5printEmi>

080a1aa8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1aa8:	b40c      	push	{r2, r3}
 80a1aaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1aae:	b087      	sub	sp, #28
 80a1ab0:	af00      	add	r7, sp, #0
 80a1ab2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1ab6:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1aba:	4605      	mov	r5, r0
 80a1abc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1abe:	4623      	mov	r3, r4
 80a1ac0:	464a      	mov	r2, r9
 80a1ac2:	2114      	movs	r1, #20
 80a1ac4:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1ac6:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1ac8:	f7ff fefa 	bl	80a18c0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1acc:	2813      	cmp	r0, #19
 80a1ace:	d805      	bhi.n	80a1adc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ad0:	1d39      	adds	r1, r7, #4
 80a1ad2:	4628      	mov	r0, r5
 80a1ad4:	f7ff ff93 	bl	80a19fe <_ZN5Print5writeEPKc>
 80a1ad8:	4604      	mov	r4, r0
 80a1ada:	e013      	b.n	80a1b04 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1adc:	f100 0308 	add.w	r3, r0, #8
 80a1ae0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1ae4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1ae6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1aea:	1c41      	adds	r1, r0, #1
 80a1aec:	4623      	mov	r3, r4
 80a1aee:	464a      	mov	r2, r9
 80a1af0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1af2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1af4:	f7ff fee4 	bl	80a18c0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1af8:	4669      	mov	r1, sp
 80a1afa:	4628      	mov	r0, r5
 80a1afc:	f7ff ff7f 	bl	80a19fe <_ZN5Print5writeEPKc>
 80a1b00:	4604      	mov	r4, r0
 80a1b02:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1b04:	b11e      	cbz	r6, 80a1b0e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1b06:	4628      	mov	r0, r5
 80a1b08:	f7ff ff8c 	bl	80a1a24 <_ZN5Print7printlnEv>
 80a1b0c:	4404      	add	r4, r0
    return n;
}
 80a1b0e:	4620      	mov	r0, r4
 80a1b10:	371c      	adds	r7, #28
 80a1b12:	46bd      	mov	sp, r7
 80a1b14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b18:	b002      	add	sp, #8
 80a1b1a:	4770      	bx	lr

080a1b1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1b1c:	4a01      	ldr	r2, [pc, #4]	; (80a1b24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1b1e:	4b02      	ldr	r3, [pc, #8]	; (80a1b28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1b20:	601a      	str	r2, [r3, #0]
 80a1b22:	4770      	bx	lr
 80a1b24:	080a2ec0 	.word	0x080a2ec0
 80a1b28:	200003e4 	.word	0x200003e4

080a1b2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b2c:	4b02      	ldr	r3, [pc, #8]	; (80a1b38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b2e:	681a      	ldr	r2, [r3, #0]
 80a1b30:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b32:	601a      	str	r2, [r3, #0]
 80a1b34:	4770      	bx	lr
 80a1b36:	bf00      	nop
 80a1b38:	20000328 	.word	0x20000328
 80a1b3c:	200003e8 	.word	0x200003e8

080a1b40 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1b40:	2100      	movs	r1, #0
 80a1b42:	f7ff be8d 	b.w	80a1860 <system_delay_ms>
	...

080a1b48 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1b48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1b4a:	4b14      	ldr	r3, [pc, #80]	; (80a1b9c <serialEventRun+0x54>)
 80a1b4c:	b133      	cbz	r3, 80a1b5c <serialEventRun+0x14>
 80a1b4e:	f000 f925 	bl	80a1d9c <_Z16_fetch_usbserialv>
 80a1b52:	6803      	ldr	r3, [r0, #0]
 80a1b54:	691b      	ldr	r3, [r3, #16]
 80a1b56:	4798      	blx	r3
 80a1b58:	2800      	cmp	r0, #0
 80a1b5a:	dc16      	bgt.n	80a1b8a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b5c:	4b10      	ldr	r3, [pc, #64]	; (80a1ba0 <serialEventRun+0x58>)
 80a1b5e:	b133      	cbz	r3, 80a1b6e <serialEventRun+0x26>
 80a1b60:	f000 f9ea 	bl	80a1f38 <_Z22__fetch_global_Serial1v>
 80a1b64:	6803      	ldr	r3, [r0, #0]
 80a1b66:	691b      	ldr	r3, [r3, #16]
 80a1b68:	4798      	blx	r3
 80a1b6a:	2800      	cmp	r0, #0
 80a1b6c:	dc10      	bgt.n	80a1b90 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1b6e:	4b0d      	ldr	r3, [pc, #52]	; (80a1ba4 <serialEventRun+0x5c>)
 80a1b70:	b10b      	cbz	r3, 80a1b76 <serialEventRun+0x2e>
 80a1b72:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1b76:	4b0c      	ldr	r3, [pc, #48]	; (80a1ba8 <serialEventRun+0x60>)
 80a1b78:	b17b      	cbz	r3, 80a1b9a <serialEventRun+0x52>
 80a1b7a:	f000 f94b 	bl	80a1e14 <_Z17_fetch_usbserial1v>
 80a1b7e:	6803      	ldr	r3, [r0, #0]
 80a1b80:	691b      	ldr	r3, [r3, #16]
 80a1b82:	4798      	blx	r3
 80a1b84:	2800      	cmp	r0, #0
 80a1b86:	dc06      	bgt.n	80a1b96 <serialEventRun+0x4e>
 80a1b88:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1b8a:	f3af 8000 	nop.w
 80a1b8e:	e7e5      	b.n	80a1b5c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1b90:	f3af 8000 	nop.w
 80a1b94:	e7eb      	b.n	80a1b6e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1b96:	f3af 8000 	nop.w
 80a1b9a:	bd08      	pop	{r3, pc}
	...

080a1bac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1bac:	b508      	push	{r3, lr}
	serialEventRun();
 80a1bae:	f7ff ffcb 	bl	80a1b48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1bb2:	f7ff fd2b 	bl	80a160c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1bb6:	4b01      	ldr	r3, [pc, #4]	; (80a1bbc <_post_loop+0x10>)
 80a1bb8:	6018      	str	r0, [r3, #0]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	20000874 	.word	0x20000874

080a1bc0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1bc0:	4802      	ldr	r0, [pc, #8]	; (80a1bcc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1bc2:	4a03      	ldr	r2, [pc, #12]	; (80a1bd0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1bc4:	4903      	ldr	r1, [pc, #12]	; (80a1bd4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1bc6:	1a12      	subs	r2, r2, r0
 80a1bc8:	f001 b898 	b.w	80a2cfc <memcpy>
 80a1bcc:	40024000 	.word	0x40024000
 80a1bd0:	40024004 	.word	0x40024004
 80a1bd4:	080a2ff0 	.word	0x080a2ff0

080a1bd8 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1bd8:	2000      	movs	r0, #0
 80a1bda:	4770      	bx	lr

080a1bdc <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1bde:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1be0:	4604      	mov	r4, r0
    switch (req->type) {
 80a1be2:	2b0a      	cmp	r3, #10
 80a1be4:	d00e      	beq.n	80a1c04 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1be6:	2b50      	cmp	r3, #80	; 0x50
 80a1be8:	d11c      	bne.n	80a1c24 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1bea:	4b10      	ldr	r3, [pc, #64]	; (80a1c2c <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1bec:	681d      	ldr	r5, [r3, #0]
 80a1bee:	b1cd      	cbz	r5, 80a1c24 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1bf0:	7d03      	ldrb	r3, [r0, #20]
 80a1bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1bf6:	9300      	str	r3, [sp, #0]
 80a1bf8:	68c2      	ldr	r2, [r0, #12]
 80a1bfa:	f100 0310 	add.w	r3, r0, #16
 80a1bfe:	6880      	ldr	r0, [r0, #8]
 80a1c00:	47a8      	blx	r5
 80a1c02:	e007      	b.n	80a1c14 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1c04:	f100 0310 	add.w	r3, r0, #16
 80a1c08:	68c2      	ldr	r2, [r0, #12]
 80a1c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1c0e:	6880      	ldr	r0, [r0, #8]
 80a1c10:	f7ff ffe2 	bl	80a1bd8 <_Z26usb_request_custom_handlerPcjjPj>
 80a1c14:	b130      	cbz	r0, 80a1c24 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1c16:	2200      	movs	r2, #0
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	4611      	mov	r1, r2
 80a1c1c:	f7ff fe38 	bl	80a1890 <system_set_usb_request_result>
        return true;
 80a1c20:	2001      	movs	r0, #1
 80a1c22:	e000      	b.n	80a1c26 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1c24:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1c26:	b003      	add	sp, #12
 80a1c28:	bd30      	pop	{r4, r5, pc}
 80a1c2a:	bf00      	nop
 80a1c2c:	200003ec 	.word	0x200003ec

080a1c30 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1c30:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1c32:	4c0c      	ldr	r4, [pc, #48]	; (80a1c64 <module_user_init_hook+0x34>)
 80a1c34:	4d0c      	ldr	r5, [pc, #48]	; (80a1c68 <module_user_init_hook+0x38>)
 80a1c36:	6823      	ldr	r3, [r4, #0]
 80a1c38:	42ab      	cmp	r3, r5
 80a1c3a:	4b0c      	ldr	r3, [pc, #48]	; (80a1c6c <module_user_init_hook+0x3c>)
 80a1c3c:	bf0c      	ite	eq
 80a1c3e:	2201      	moveq	r2, #1
 80a1c40:	2200      	movne	r2, #0
 80a1c42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1c44:	d002      	beq.n	80a1c4c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1c46:	f7ff ffbb 	bl	80a1bc0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1c4a:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1c4c:	4b08      	ldr	r3, [pc, #32]	; (80a1c70 <module_user_init_hook+0x40>)
 80a1c4e:	b11b      	cbz	r3, 80a1c58 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1c50:	f7ff fcd4 	bl	80a15fc <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1c54:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1c5c:	2100      	movs	r1, #0
 80a1c5e:	4805      	ldr	r0, [pc, #20]	; (80a1c74 <module_user_init_hook+0x44>)
 80a1c60:	f7ff be0e 	b.w	80a1880 <system_set_usb_request_app_handler>
 80a1c64:	40024000 	.word	0x40024000
 80a1c68:	9a271c1e 	.word	0x9a271c1e
 80a1c6c:	200003f0 	.word	0x200003f0
 80a1c70:	00000000 	.word	0x00000000
 80a1c74:	080a1bdd 	.word	0x080a1bdd

080a1c78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c78:	4770      	bx	lr

080a1c7a <_ZN9IPAddressD0Ev>:
 80a1c7a:	b510      	push	{r4, lr}
 80a1c7c:	4604      	mov	r4, r0
 80a1c7e:	f7fe fa0c 	bl	80a009a <_ZdlPv>
 80a1c82:	4620      	mov	r0, r4
 80a1c84:	bd10      	pop	{r4, pc}

080a1c86 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c88:	460f      	mov	r7, r1
 80a1c8a:	f100 0608 	add.w	r6, r0, #8
 80a1c8e:	1d05      	adds	r5, r0, #4
 80a1c90:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1c96:	220a      	movs	r2, #10
 80a1c98:	4638      	mov	r0, r7
 80a1c9a:	f7ff ff03 	bl	80a1aa4 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c9e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ca0:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ca2:	d007      	beq.n	80a1cb4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1ca4:	2c00      	cmp	r4, #0
 80a1ca6:	d0f4      	beq.n	80a1c92 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1ca8:	212e      	movs	r1, #46	; 0x2e
 80a1caa:	4638      	mov	r0, r7
 80a1cac:	f7ff feb7 	bl	80a1a1e <_ZN5Print5printEc>
 80a1cb0:	4404      	add	r4, r0
 80a1cb2:	e7ee      	b.n	80a1c92 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1cb4:	4620      	mov	r0, r4
 80a1cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1cb8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1cb8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1cba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1cbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1cc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1cc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1cca:	2304      	movs	r3, #4
 80a1ccc:	6041      	str	r1, [r0, #4]
 80a1cce:	7503      	strb	r3, [r0, #20]
 80a1cd0:	bd10      	pop	{r4, pc}
	...

080a1cd4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cd6:	4d04      	ldr	r5, [pc, #16]	; (80a1ce8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1cd8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1cda:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1cde:	9500      	str	r5, [sp, #0]
 80a1ce0:	f7ff ffea 	bl	80a1cb8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ce4:	b003      	add	sp, #12
 80a1ce6:	bd30      	pop	{r4, r5, pc}
 80a1ce8:	080a2f1c 	.word	0x080a2f1c

080a1cec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1cec:	7441      	strb	r1, [r0, #17]
 80a1cee:	4770      	bx	lr

080a1cf0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1cf0:	4770      	bx	lr

080a1cf2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1cf2:	2100      	movs	r1, #0
 80a1cf4:	7c00      	ldrb	r0, [r0, #16]
 80a1cf6:	f7ff bd93 	b.w	80a1820 <HAL_USB_USART_Receive_Data>

080a1cfa <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1cfa:	2101      	movs	r1, #1
 80a1cfc:	7c00      	ldrb	r0, [r0, #16]
 80a1cfe:	f7ff bd8f 	b.w	80a1820 <HAL_USB_USART_Receive_Data>

080a1d02 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1d02:	7c00      	ldrb	r0, [r0, #16]
 80a1d04:	f7ff bd84 	b.w	80a1810 <HAL_USB_USART_Available_Data_For_Write>

080a1d08 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1d08:	7c00      	ldrb	r0, [r0, #16]
 80a1d0a:	f7ff bd79 	b.w	80a1800 <HAL_USB_USART_Available_Data>

080a1d0e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d0e:	b538      	push	{r3, r4, r5, lr}
 80a1d10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d12:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d14:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d16:	f7ff fd7b 	bl	80a1810 <HAL_USB_USART_Available_Data_For_Write>
 80a1d1a:	2800      	cmp	r0, #0
 80a1d1c:	dc01      	bgt.n	80a1d22 <_ZN9USBSerial5writeEh+0x14>
 80a1d1e:	7c60      	ldrb	r0, [r4, #17]
 80a1d20:	b120      	cbz	r0, 80a1d2c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1d22:	4629      	mov	r1, r5
 80a1d24:	7c20      	ldrb	r0, [r4, #16]
 80a1d26:	f7ff fd83 	bl	80a1830 <HAL_USB_USART_Send_Data>
    return 1;
 80a1d2a:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1d2c:	bd38      	pop	{r3, r4, r5, pc}

080a1d2e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d2e:	7c00      	ldrb	r0, [r0, #16]
 80a1d30:	f7ff bd86 	b.w	80a1840 <HAL_USB_USART_Flush_Data>

080a1d34 <_ZN9USBSerialD0Ev>:
 80a1d34:	b510      	push	{r4, lr}
 80a1d36:	4604      	mov	r4, r0
 80a1d38:	f7fe f9af 	bl	80a009a <_ZdlPv>
 80a1d3c:	4620      	mov	r0, r4
 80a1d3e:	bd10      	pop	{r4, pc}

080a1d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d40:	b510      	push	{r4, lr}
 80a1d42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d44:	2300      	movs	r3, #0
 80a1d46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d4c:	60a3      	str	r3, [r4, #8]
 80a1d4e:	4b05      	ldr	r3, [pc, #20]	; (80a1d64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1d50:	4608      	mov	r0, r1
 80a1d52:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1d54:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1d56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1d58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1d5a:	4611      	mov	r1, r2
 80a1d5c:	f7ff fd40 	bl	80a17e0 <HAL_USB_USART_Init>
}
 80a1d60:	4620      	mov	r0, r4
 80a1d62:	bd10      	pop	{r4, pc}
 80a1d64:	080a2f30 	.word	0x080a2f30

080a1d68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1d68:	2200      	movs	r2, #0
 80a1d6a:	7c00      	ldrb	r0, [r0, #16]
 80a1d6c:	f7ff bd40 	b.w	80a17f0 <HAL_USB_USART_Begin>

080a1d70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1d70:	b510      	push	{r4, lr}
 80a1d72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1d74:	2214      	movs	r2, #20
 80a1d76:	2100      	movs	r1, #0
 80a1d78:	f000 ffcb 	bl	80a2d12 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1d7c:	4b05      	ldr	r3, [pc, #20]	; (80a1d94 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1d7e:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1d80:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1d82:	4b05      	ldr	r3, [pc, #20]	; (80a1d98 <_Z19acquireSerialBufferv+0x28>)
 80a1d84:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d86:	f240 1301 	movw	r3, #257	; 0x101
 80a1d8a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d8c:	2381      	movs	r3, #129	; 0x81
 80a1d8e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1d90:	bd10      	pop	{r4, pc}
 80a1d92:	bf00      	nop
 80a1d94:	20000479 	.word	0x20000479
 80a1d98:	200003f8 	.word	0x200003f8

080a1d9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1d9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1d9e:	4d0e      	ldr	r5, [pc, #56]	; (80a1dd8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1da0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1da2:	a801      	add	r0, sp, #4
 80a1da4:	f7ff ffe4 	bl	80a1d70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1da8:	6829      	ldr	r1, [r5, #0]
 80a1daa:	f011 0401 	ands.w	r4, r1, #1
 80a1dae:	d110      	bne.n	80a1dd2 <_Z16_fetch_usbserialv+0x36>
 80a1db0:	4628      	mov	r0, r5
 80a1db2:	f7fe f974 	bl	80a009e <__cxa_guard_acquire>
 80a1db6:	b160      	cbz	r0, 80a1dd2 <_Z16_fetch_usbserialv+0x36>
 80a1db8:	aa01      	add	r2, sp, #4
 80a1dba:	4621      	mov	r1, r4
 80a1dbc:	4807      	ldr	r0, [pc, #28]	; (80a1ddc <_Z16_fetch_usbserialv+0x40>)
 80a1dbe:	f7ff ffbf 	bl	80a1d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1dc2:	4628      	mov	r0, r5
 80a1dc4:	f7fe f970 	bl	80a00a8 <__cxa_guard_release>
 80a1dc8:	4a05      	ldr	r2, [pc, #20]	; (80a1de0 <_Z16_fetch_usbserialv+0x44>)
 80a1dca:	4906      	ldr	r1, [pc, #24]	; (80a1de4 <_Z16_fetch_usbserialv+0x48>)
 80a1dcc:	4803      	ldr	r0, [pc, #12]	; (80a1ddc <_Z16_fetch_usbserialv+0x40>)
 80a1dce:	f000 fa13 	bl	80a21f8 <__aeabi_atexit>
	return _usbserial;
}
 80a1dd2:	4802      	ldr	r0, [pc, #8]	; (80a1ddc <_Z16_fetch_usbserialv+0x40>)
 80a1dd4:	b007      	add	sp, #28
 80a1dd6:	bd30      	pop	{r4, r5, pc}
 80a1dd8:	200003f4 	.word	0x200003f4
 80a1ddc:	2000057c 	.word	0x2000057c
 80a1de0:	2000032c 	.word	0x2000032c
 80a1de4:	080a1cf1 	.word	0x080a1cf1

080a1de8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1de8:	b510      	push	{r4, lr}
 80a1dea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1dec:	2214      	movs	r2, #20
 80a1dee:	2100      	movs	r1, #0
 80a1df0:	f000 ff8f 	bl	80a2d12 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1df4:	4b05      	ldr	r3, [pc, #20]	; (80a1e0c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1df6:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1df8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1dfa:	4b05      	ldr	r3, [pc, #20]	; (80a1e10 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1dfc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1dfe:	f240 1301 	movw	r3, #257	; 0x101
 80a1e02:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e04:	2381      	movs	r3, #129	; 0x81
 80a1e06:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e08:	bd10      	pop	{r4, pc}
 80a1e0a:	bf00      	nop
 80a1e0c:	2000062c 	.word	0x2000062c
 80a1e10:	20000594 	.word	0x20000594

080a1e14 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1e14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e16:	4c0e      	ldr	r4, [pc, #56]	; (80a1e50 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1e18:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1e1a:	a801      	add	r0, sp, #4
 80a1e1c:	f7ff ffe4 	bl	80a1de8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e20:	6823      	ldr	r3, [r4, #0]
 80a1e22:	07db      	lsls	r3, r3, #31
 80a1e24:	d410      	bmi.n	80a1e48 <_Z17_fetch_usbserial1v+0x34>
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7fe f939 	bl	80a009e <__cxa_guard_acquire>
 80a1e2c:	b160      	cbz	r0, 80a1e48 <_Z17_fetch_usbserial1v+0x34>
 80a1e2e:	aa01      	add	r2, sp, #4
 80a1e30:	2101      	movs	r1, #1
 80a1e32:	4808      	ldr	r0, [pc, #32]	; (80a1e54 <_Z17_fetch_usbserial1v+0x40>)
 80a1e34:	f7ff ff84 	bl	80a1d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e38:	4620      	mov	r0, r4
 80a1e3a:	f7fe f935 	bl	80a00a8 <__cxa_guard_release>
 80a1e3e:	4a06      	ldr	r2, [pc, #24]	; (80a1e58 <_Z17_fetch_usbserial1v+0x44>)
 80a1e40:	4906      	ldr	r1, [pc, #24]	; (80a1e5c <_Z17_fetch_usbserial1v+0x48>)
 80a1e42:	4804      	ldr	r0, [pc, #16]	; (80a1e54 <_Z17_fetch_usbserial1v+0x40>)
 80a1e44:	f000 f9d8 	bl	80a21f8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1e48:	4802      	ldr	r0, [pc, #8]	; (80a1e54 <_Z17_fetch_usbserial1v+0x40>)
 80a1e4a:	b006      	add	sp, #24
 80a1e4c:	bd10      	pop	{r4, pc}
 80a1e4e:	bf00      	nop
 80a1e50:	20000590 	.word	0x20000590
 80a1e54:	20000618 	.word	0x20000618
 80a1e58:	2000032c 	.word	0x2000032c
 80a1e5c:	080a1cf1 	.word	0x080a1cf1

080a1e60 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1e60:	4700      	bx	r0
	...

080a1e64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e66:	461c      	mov	r4, r3
 80a1e68:	b085      	sub	sp, #20
 80a1e6a:	4605      	mov	r5, r0
 80a1e6c:	460e      	mov	r6, r1
 80a1e6e:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1e70:	f7ff fbac 	bl	80a15cc <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1e74:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1e76:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e78:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1e7c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e7e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1e82:	bfb4      	ite	lt
 80a1e84:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e86:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e8a:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e8c:	bfa4      	itt	ge
 80a1e8e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1e92:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e94:	9300      	str	r3, [sp, #0]
 80a1e96:	4632      	mov	r2, r6
 80a1e98:	463b      	mov	r3, r7
 80a1e9a:	4904      	ldr	r1, [pc, #16]	; (80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1e9c:	bfa8      	it	ge
 80a1e9e:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1ea2:	f7ff fb8b 	bl	80a15bc <HAL_Interrupts_Attach>
    return true;
}
 80a1ea6:	2001      	movs	r0, #1
 80a1ea8:	b005      	add	sp, #20
 80a1eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1eac:	080a1e61 	.word	0x080a1e61

080a1eb0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1eb0:	4770      	bx	lr

080a1eb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1eb2:	7441      	strb	r1, [r0, #17]
 80a1eb4:	4770      	bx	lr

080a1eb6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1eb6:	7c00      	ldrb	r0, [r0, #16]
 80a1eb8:	f7ff bc10 	b.w	80a16dc <HAL_USART_Available_Data_For_Write>

080a1ebc <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1ebc:	7c00      	ldrb	r0, [r0, #16]
 80a1ebe:	f7ff bbe5 	b.w	80a168c <HAL_USART_Available_Data>

080a1ec2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1ec2:	7c00      	ldrb	r0, [r0, #16]
 80a1ec4:	f7ff bbf2 	b.w	80a16ac <HAL_USART_Peek_Data>

080a1ec8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1ec8:	7c00      	ldrb	r0, [r0, #16]
 80a1eca:	f7ff bbe7 	b.w	80a169c <HAL_USART_Read_Data>

080a1ece <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1ece:	7c00      	ldrb	r0, [r0, #16]
 80a1ed0:	f7ff bbf4 	b.w	80a16bc <HAL_USART_Flush_Data>

080a1ed4 <_ZN11USARTSerialD0Ev>:
 80a1ed4:	b510      	push	{r4, lr}
 80a1ed6:	4604      	mov	r4, r0
 80a1ed8:	f7fe f8df 	bl	80a009a <_ZdlPv>
 80a1edc:	4620      	mov	r0, r4
 80a1ede:	bd10      	pop	{r4, pc}

080a1ee0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ee0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1ee2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1ee4:	4604      	mov	r4, r0
 80a1ee6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1ee8:	b925      	cbnz	r5, 80a1ef4 <_ZN11USARTSerial5writeEh+0x14>
 80a1eea:	7c00      	ldrb	r0, [r0, #16]
 80a1eec:	f7ff fbf6 	bl	80a16dc <HAL_USART_Available_Data_For_Write>
 80a1ef0:	2800      	cmp	r0, #0
 80a1ef2:	dd05      	ble.n	80a1f00 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ef4:	4631      	mov	r1, r6
 80a1ef6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1efc:	f7ff bbbe 	b.w	80a167c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f00:	4628      	mov	r0, r5
 80a1f02:	bd70      	pop	{r4, r5, r6, pc}

080a1f04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	4604      	mov	r4, r0
 80a1f08:	4608      	mov	r0, r1
 80a1f0a:	4611      	mov	r1, r2
 80a1f0c:	2200      	movs	r2, #0
 80a1f0e:	6062      	str	r2, [r4, #4]
 80a1f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f14:	60a2      	str	r2, [r4, #8]
 80a1f16:	4a05      	ldr	r2, [pc, #20]	; (80a1f2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f18:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f1a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f1c:	2201      	movs	r2, #1
 80a1f1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f20:	461a      	mov	r2, r3
 80a1f22:	f7ff fba3 	bl	80a166c <HAL_USART_Init>
}
 80a1f26:	4620      	mov	r0, r4
 80a1f28:	bd10      	pop	{r4, pc}
 80a1f2a:	bf00      	nop
 80a1f2c:	080a2f60 	.word	0x080a2f60

080a1f30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1f30:	7c00      	ldrb	r0, [r0, #16]
 80a1f32:	f7ff bbcb 	b.w	80a16cc <HAL_USART_Is_Enabled>
	...

080a1f38 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a1f38:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f3a:	4d0c      	ldr	r5, [pc, #48]	; (80a1f6c <_Z22__fetch_global_Serial1v+0x34>)
 80a1f3c:	6829      	ldr	r1, [r5, #0]
 80a1f3e:	f011 0401 	ands.w	r4, r1, #1
 80a1f42:	d111      	bne.n	80a1f68 <_Z22__fetch_global_Serial1v+0x30>
 80a1f44:	4628      	mov	r0, r5
 80a1f46:	f7fe f8aa 	bl	80a009e <__cxa_guard_acquire>
 80a1f4a:	b168      	cbz	r0, 80a1f68 <_Z22__fetch_global_Serial1v+0x30>
 80a1f4c:	4a08      	ldr	r2, [pc, #32]	; (80a1f70 <_Z22__fetch_global_Serial1v+0x38>)
 80a1f4e:	4621      	mov	r1, r4
 80a1f50:	4b08      	ldr	r3, [pc, #32]	; (80a1f74 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1f52:	4809      	ldr	r0, [pc, #36]	; (80a1f78 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f54:	f7ff ffd6 	bl	80a1f04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1f58:	4628      	mov	r0, r5
 80a1f5a:	f7fe f8a5 	bl	80a00a8 <__cxa_guard_release>
 80a1f5e:	4a07      	ldr	r2, [pc, #28]	; (80a1f7c <_Z22__fetch_global_Serial1v+0x44>)
 80a1f60:	4907      	ldr	r1, [pc, #28]	; (80a1f80 <_Z22__fetch_global_Serial1v+0x48>)
 80a1f62:	4805      	ldr	r0, [pc, #20]	; (80a1f78 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f64:	f000 f948 	bl	80a21f8 <__aeabi_atexit>
	return serial1;
}
 80a1f68:	4803      	ldr	r0, [pc, #12]	; (80a1f78 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f6a:	bd38      	pop	{r3, r4, r5, pc}
 80a1f6c:	200007c8 	.word	0x200007c8
 80a1f70:	200007cc 	.word	0x200007cc
 80a1f74:	20000744 	.word	0x20000744
 80a1f78:	20000730 	.word	0x20000730
 80a1f7c:	2000032c 	.word	0x2000032c
 80a1f80:	080a1eb1 	.word	0x080a1eb1

080a1f84 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1f84:	4770      	bx	lr

080a1f86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f88:	4606      	mov	r6, r0
 80a1f8a:	4615      	mov	r5, r2
 80a1f8c:	460c      	mov	r4, r1
 80a1f8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f90:	42bc      	cmp	r4, r7
 80a1f92:	d006      	beq.n	80a1fa2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1f94:	6833      	ldr	r3, [r6, #0]
 80a1f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1f9a:	689b      	ldr	r3, [r3, #8]
 80a1f9c:	4630      	mov	r0, r6
 80a1f9e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1fa0:	e7f6      	b.n	80a1f90 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1fa2:	4628      	mov	r0, r5
 80a1fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fa6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1fa6:	2200      	movs	r2, #0
 80a1fa8:	7c00      	ldrb	r0, [r0, #16]
 80a1faa:	f7ff bbc7 	b.w	80a173c <HAL_I2C_Write_Data>

080a1fae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1fae:	2100      	movs	r1, #0
 80a1fb0:	7c00      	ldrb	r0, [r0, #16]
 80a1fb2:	f7ff bbcb 	b.w	80a174c <HAL_I2C_Available_Data>

080a1fb6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1fb6:	2100      	movs	r1, #0
 80a1fb8:	7c00      	ldrb	r0, [r0, #16]
 80a1fba:	f7ff bbcf 	b.w	80a175c <HAL_I2C_Read_Data>

080a1fbe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1fbe:	2100      	movs	r1, #0
 80a1fc0:	7c00      	ldrb	r0, [r0, #16]
 80a1fc2:	f7ff bbd3 	b.w	80a176c <HAL_I2C_Peek_Data>

080a1fc6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1fc6:	2100      	movs	r1, #0
 80a1fc8:	7c00      	ldrb	r0, [r0, #16]
 80a1fca:	f7ff bbd7 	b.w	80a177c <HAL_I2C_Flush_Data>

080a1fce <_ZN7TwoWireD0Ev>:
 80a1fce:	b510      	push	{r4, lr}
 80a1fd0:	4604      	mov	r4, r0
 80a1fd2:	f7fe f862 	bl	80a009a <_ZdlPv>
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	bd10      	pop	{r4, pc}
	...

080a1fdc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1fdc:	b510      	push	{r4, lr}
 80a1fde:	4604      	mov	r4, r0
 80a1fe0:	4608      	mov	r0, r1
 80a1fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fe6:	60a3      	str	r3, [r4, #8]
 80a1fe8:	4b04      	ldr	r3, [pc, #16]	; (80a1ffc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1fea:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1fec:	7420      	strb	r0, [r4, #16]
 80a1fee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1ff0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1ff2:	f7ff fbd3 	bl	80a179c <HAL_I2C_Init>

}
 80a1ff6:	4620      	mov	r0, r4
 80a1ff8:	bd10      	pop	{r4, pc}
 80a1ffa:	bf00      	nop
 80a1ffc:	080a2f90 	.word	0x080a2f90

080a2000 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a2000:	2200      	movs	r2, #0
 80a2002:	7c00      	ldrb	r0, [r0, #16]
 80a2004:	f7ff bb72 	b.w	80a16ec <HAL_I2C_Set_Speed>

080a2008 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2008:	2300      	movs	r3, #0
 80a200a:	461a      	mov	r2, r3
 80a200c:	4619      	mov	r1, r3
 80a200e:	7c00      	ldrb	r0, [r0, #16]
 80a2010:	f7ff bb74 	b.w	80a16fc <HAL_I2C_Begin>

080a2014 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2014:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2016:	2400      	movs	r4, #0
 80a2018:	7c00      	ldrb	r0, [r0, #16]
 80a201a:	9400      	str	r4, [sp, #0]
 80a201c:	f7ff fb76 	bl	80a170c <HAL_I2C_Request_Data>
  return result;
}
 80a2020:	b2c0      	uxtb	r0, r0
 80a2022:	b002      	add	sp, #8
 80a2024:	bd10      	pop	{r4, pc}

080a2026 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2026:	2301      	movs	r3, #1
 80a2028:	f7ff bff4 	b.w	80a2014 <_ZN7TwoWire11requestFromEhhh>

080a202c <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a202c:	2301      	movs	r3, #1
 80a202e:	b2d2      	uxtb	r2, r2
 80a2030:	b2c9      	uxtb	r1, r1
 80a2032:	f7ff bfef 	b.w	80a2014 <_ZN7TwoWire11requestFromEhhh>

080a2036 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2036:	2200      	movs	r2, #0
 80a2038:	7c00      	ldrb	r0, [r0, #16]
 80a203a:	f7ff bb6f 	b.w	80a171c <HAL_I2C_Begin_Transmission>

080a203e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a203e:	2200      	movs	r2, #0
 80a2040:	7c00      	ldrb	r0, [r0, #16]
 80a2042:	f7ff bb73 	b.w	80a172c <HAL_I2C_End_Transmission>

080a2046 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2046:	2101      	movs	r1, #1
 80a2048:	f7ff bff9 	b.w	80a203e <_ZN7TwoWire15endTransmissionEh>

080a204c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a204c:	2100      	movs	r1, #0
 80a204e:	7c00      	ldrb	r0, [r0, #16]
 80a2050:	f7ff bb9c 	b.w	80a178c <HAL_I2C_Is_Enabled>

080a2054 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2054:	4770      	bx	lr

080a2056 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2056:	2200      	movs	r2, #0
 80a2058:	4611      	mov	r1, r2
 80a205a:	4610      	mov	r0, r2
 80a205c:	f7ff bc20 	b.w	80a18a0 <network_ready>

080a2060 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2060:	4803      	ldr	r0, [pc, #12]	; (80a2070 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a2062:	4b04      	ldr	r3, [pc, #16]	; (80a2074 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2064:	4a04      	ldr	r2, [pc, #16]	; (80a2078 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a2066:	4905      	ldr	r1, [pc, #20]	; (80a207c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a2068:	6003      	str	r3, [r0, #0]
 80a206a:	f000 b8c5 	b.w	80a21f8 <__aeabi_atexit>
 80a206e:	bf00      	nop
 80a2070:	20000850 	.word	0x20000850
 80a2074:	080a2fb8 	.word	0x080a2fb8
 80a2078:	2000032c 	.word	0x2000032c
 80a207c:	080a2055 	.word	0x080a2055

080a2080 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2080:	b510      	push	{r4, lr}
 80a2082:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2084:	480f      	ldr	r0, [pc, #60]	; (80a20c4 <pinAvailable+0x44>)
 80a2086:	f7ff fc3f 	bl	80a1908 <_ZN8SPIClass9isEnabledEv>
 80a208a:	b128      	cbz	r0, 80a2098 <pinAvailable+0x18>
 80a208c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2090:	2b02      	cmp	r3, #2
 80a2092:	d801      	bhi.n	80a2098 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2094:	2000      	movs	r0, #0
 80a2096:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2098:	f000 f88e 	bl	80a21b8 <_Z19__fetch_global_Wirev>
 80a209c:	f7ff ffd6 	bl	80a204c <_ZN7TwoWire9isEnabledEv>
 80a20a0:	b108      	cbz	r0, 80a20a6 <pinAvailable+0x26>
 80a20a2:	2c01      	cmp	r4, #1
 80a20a4:	d9f6      	bls.n	80a2094 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a20a6:	f7ff ff47 	bl	80a1f38 <_Z22__fetch_global_Serial1v>
 80a20aa:	f7ff ff41 	bl	80a1f30 <_ZN11USARTSerial9isEnabledEv>
 80a20ae:	b118      	cbz	r0, 80a20b8 <pinAvailable+0x38>
 80a20b0:	f1a4 0312 	sub.w	r3, r4, #18
 80a20b4:	2b01      	cmp	r3, #1
 80a20b6:	d9ed      	bls.n	80a2094 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a20b8:	2c17      	cmp	r4, #23
 80a20ba:	bf8c      	ite	hi
 80a20bc:	2000      	movhi	r0, #0
 80a20be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a20c0:	bd10      	pop	{r4, pc}
 80a20c2:	bf00      	nop
 80a20c4:	20000854 	.word	0x20000854

080a20c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20c8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a20ca:	b538      	push	{r3, r4, r5, lr}
 80a20cc:	4604      	mov	r4, r0
 80a20ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20d0:	d80a      	bhi.n	80a20e8 <pinMode+0x20>
 80a20d2:	29ff      	cmp	r1, #255	; 0xff
 80a20d4:	d008      	beq.n	80a20e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a20d6:	f7ff ffd3 	bl	80a2080 <pinAvailable>
 80a20da:	b128      	cbz	r0, 80a20e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20dc:	4629      	mov	r1, r5
 80a20de:	4620      	mov	r0, r4
}
 80a20e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20e4:	f7ff ba4a 	b.w	80a157c <HAL_Pin_Mode>
 80a20e8:	bd38      	pop	{r3, r4, r5, pc}

080a20ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a20ea:	b538      	push	{r3, r4, r5, lr}
 80a20ec:	4604      	mov	r4, r0
 80a20ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20f0:	f7ff fa4c 	bl	80a158c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a20f4:	28ff      	cmp	r0, #255	; 0xff
 80a20f6:	d010      	beq.n	80a211a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a20f8:	2806      	cmp	r0, #6
 80a20fa:	d804      	bhi.n	80a2106 <digitalWrite+0x1c>
 80a20fc:	234d      	movs	r3, #77	; 0x4d
 80a20fe:	fa23 f000 	lsr.w	r0, r3, r0
 80a2102:	07c3      	lsls	r3, r0, #31
 80a2104:	d409      	bmi.n	80a211a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2106:	4620      	mov	r0, r4
 80a2108:	f7ff ffba 	bl	80a2080 <pinAvailable>
 80a210c:	b128      	cbz	r0, 80a211a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a210e:	4629      	mov	r1, r5
 80a2110:	4620      	mov	r0, r4
}
 80a2112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2116:	f7ff ba41 	b.w	80a159c <HAL_GPIO_Write>
 80a211a:	bd38      	pop	{r3, r4, r5, pc}

080a211c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a211c:	b510      	push	{r4, lr}
 80a211e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2120:	f7ff fa34 	bl	80a158c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2124:	3804      	subs	r0, #4
 80a2126:	b2c0      	uxtb	r0, r0
 80a2128:	2801      	cmp	r0, #1
 80a212a:	d908      	bls.n	80a213e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a212c:	4620      	mov	r0, r4
 80a212e:	f7ff ffa7 	bl	80a2080 <pinAvailable>
 80a2132:	b120      	cbz	r0, 80a213e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2134:	4620      	mov	r0, r4
}
 80a2136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a213a:	f7ff ba37 	b.w	80a15ac <HAL_GPIO_Read>
}
 80a213e:	2000      	movs	r0, #0
 80a2140:	bd10      	pop	{r4, pc}
	...

080a2144 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2144:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2146:	4c0c      	ldr	r4, [pc, #48]	; (80a2178 <_GLOBAL__sub_I_SPI+0x34>)
 80a2148:	4e0c      	ldr	r6, [pc, #48]	; (80a217c <_GLOBAL__sub_I_SPI+0x38>)
 80a214a:	4d0d      	ldr	r5, [pc, #52]	; (80a2180 <_GLOBAL__sub_I_SPI+0x3c>)
 80a214c:	2100      	movs	r1, #0
 80a214e:	4620      	mov	r0, r4
 80a2150:	f7ff fbc6 	bl	80a18e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2154:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2156:	4c0b      	ldr	r4, [pc, #44]	; (80a2184 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2158:	4632      	mov	r2, r6
 80a215a:	4629      	mov	r1, r5
 80a215c:	f000 f84c 	bl	80a21f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2160:	2101      	movs	r1, #1
 80a2162:	4620      	mov	r0, r4
 80a2164:	f7ff fbbc 	bl	80a18e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2168:	4632      	mov	r2, r6
 80a216a:	4629      	mov	r1, r5
 80a216c:	4620      	mov	r0, r4
 80a216e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2172:	f000 b841 	b.w	80a21f8 <__aeabi_atexit>
 80a2176:	bf00      	nop
 80a2178:	20000854 	.word	0x20000854
 80a217c:	2000032c 	.word	0x2000032c
 80a2180:	080a18d1 	.word	0x080a18d1
 80a2184:	20000864 	.word	0x20000864

080a2188 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2188:	b513      	push	{r0, r1, r4, lr}
 80a218a:	4c08      	ldr	r4, [pc, #32]	; (80a21ac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a218c:	2300      	movs	r3, #0
 80a218e:	461a      	mov	r2, r3
 80a2190:	4619      	mov	r1, r3
 80a2192:	9300      	str	r3, [sp, #0]
 80a2194:	4620      	mov	r0, r4
 80a2196:	f7ff fd9d 	bl	80a1cd4 <_ZN9IPAddressC1Ehhhh>
 80a219a:	4620      	mov	r0, r4
 80a219c:	4a04      	ldr	r2, [pc, #16]	; (80a21b0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a219e:	4905      	ldr	r1, [pc, #20]	; (80a21b4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a21a0:	b002      	add	sp, #8
 80a21a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a21a6:	f000 b827 	b.w	80a21f8 <__aeabi_atexit>
 80a21aa:	bf00      	nop
 80a21ac:	20000878 	.word	0x20000878
 80a21b0:	2000032c 	.word	0x2000032c
 80a21b4:	080a1c79 	.word	0x080a1c79

080a21b8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a21b8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a21ba:	4d0b      	ldr	r5, [pc, #44]	; (80a21e8 <_Z19__fetch_global_Wirev+0x30>)
 80a21bc:	6829      	ldr	r1, [r5, #0]
 80a21be:	f011 0401 	ands.w	r4, r1, #1
 80a21c2:	d10f      	bne.n	80a21e4 <_Z19__fetch_global_Wirev+0x2c>
 80a21c4:	4628      	mov	r0, r5
 80a21c6:	f7fd ff6a 	bl	80a009e <__cxa_guard_acquire>
 80a21ca:	b158      	cbz	r0, 80a21e4 <_Z19__fetch_global_Wirev+0x2c>
 80a21cc:	4621      	mov	r1, r4
 80a21ce:	4807      	ldr	r0, [pc, #28]	; (80a21ec <_Z19__fetch_global_Wirev+0x34>)
 80a21d0:	f7ff ff04 	bl	80a1fdc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a21d4:	4628      	mov	r0, r5
 80a21d6:	f7fd ff67 	bl	80a00a8 <__cxa_guard_release>
 80a21da:	4a05      	ldr	r2, [pc, #20]	; (80a21f0 <_Z19__fetch_global_Wirev+0x38>)
 80a21dc:	4905      	ldr	r1, [pc, #20]	; (80a21f4 <_Z19__fetch_global_Wirev+0x3c>)
 80a21de:	4803      	ldr	r0, [pc, #12]	; (80a21ec <_Z19__fetch_global_Wirev+0x34>)
 80a21e0:	f000 f80a 	bl	80a21f8 <__aeabi_atexit>
	return wire;
}
 80a21e4:	4801      	ldr	r0, [pc, #4]	; (80a21ec <_Z19__fetch_global_Wirev+0x34>)
 80a21e6:	bd38      	pop	{r3, r4, r5, pc}
 80a21e8:	20000890 	.word	0x20000890
 80a21ec:	20000894 	.word	0x20000894
 80a21f0:	2000032c 	.word	0x2000032c
 80a21f4:	080a1f85 	.word	0x080a1f85

080a21f8 <__aeabi_atexit>:
 80a21f8:	460b      	mov	r3, r1
 80a21fa:	4601      	mov	r1, r0
 80a21fc:	4618      	mov	r0, r3
 80a21fe:	f000 bd6f 	b.w	80a2ce0 <__cxa_atexit>
	...

080a2204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2204:	4b18      	ldr	r3, [pc, #96]	; (80a2268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2206:	681a      	ldr	r2, [r3, #0]
 80a2208:	07d1      	lsls	r1, r2, #31
 80a220a:	bf5c      	itt	pl
 80a220c:	2201      	movpl	r2, #1
 80a220e:	601a      	strpl	r2, [r3, #0]
 80a2210:	4b16      	ldr	r3, [pc, #88]	; (80a226c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2212:	681a      	ldr	r2, [r3, #0]
 80a2214:	07d2      	lsls	r2, r2, #31
 80a2216:	bf5c      	itt	pl
 80a2218:	2201      	movpl	r2, #1
 80a221a:	601a      	strpl	r2, [r3, #0]
 80a221c:	4b14      	ldr	r3, [pc, #80]	; (80a2270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a221e:	681a      	ldr	r2, [r3, #0]
 80a2220:	07d0      	lsls	r0, r2, #31
 80a2222:	bf5c      	itt	pl
 80a2224:	2201      	movpl	r2, #1
 80a2226:	601a      	strpl	r2, [r3, #0]
 80a2228:	4b12      	ldr	r3, [pc, #72]	; (80a2274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a222a:	681a      	ldr	r2, [r3, #0]
 80a222c:	07d1      	lsls	r1, r2, #31
 80a222e:	bf5c      	itt	pl
 80a2230:	2201      	movpl	r2, #1
 80a2232:	601a      	strpl	r2, [r3, #0]
 80a2234:	4b10      	ldr	r3, [pc, #64]	; (80a2278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2236:	681a      	ldr	r2, [r3, #0]
 80a2238:	07d2      	lsls	r2, r2, #31
 80a223a:	bf5c      	itt	pl
 80a223c:	2201      	movpl	r2, #1
 80a223e:	601a      	strpl	r2, [r3, #0]
 80a2240:	4b0e      	ldr	r3, [pc, #56]	; (80a227c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2242:	681a      	ldr	r2, [r3, #0]
 80a2244:	07d0      	lsls	r0, r2, #31
 80a2246:	bf5c      	itt	pl
 80a2248:	2201      	movpl	r2, #1
 80a224a:	601a      	strpl	r2, [r3, #0]
 80a224c:	4b0c      	ldr	r3, [pc, #48]	; (80a2280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a224e:	681a      	ldr	r2, [r3, #0]
 80a2250:	07d1      	lsls	r1, r2, #31
 80a2252:	bf5c      	itt	pl
 80a2254:	2201      	movpl	r2, #1
 80a2256:	601a      	strpl	r2, [r3, #0]
 80a2258:	4b0a      	ldr	r3, [pc, #40]	; (80a2284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a225a:	681a      	ldr	r2, [r3, #0]
 80a225c:	07d2      	lsls	r2, r2, #31
 80a225e:	bf5c      	itt	pl
 80a2260:	2201      	movpl	r2, #1
 80a2262:	601a      	strpl	r2, [r3, #0]
 80a2264:	4770      	bx	lr
 80a2266:	bf00      	nop
 80a2268:	200008c4 	.word	0x200008c4
 80a226c:	200008c0 	.word	0x200008c0
 80a2270:	200008bc 	.word	0x200008bc
 80a2274:	200008b8 	.word	0x200008b8
 80a2278:	200008b4 	.word	0x200008b4
 80a227c:	200008b0 	.word	0x200008b0
 80a2280:	200008ac 	.word	0x200008ac
 80a2284:	200008a8 	.word	0x200008a8

080a2288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2288:	4b24      	ldr	r3, [pc, #144]	; (80a231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a228a:	681a      	ldr	r2, [r3, #0]
 80a228c:	07d0      	lsls	r0, r2, #31
 80a228e:	bf5c      	itt	pl
 80a2290:	2201      	movpl	r2, #1
 80a2292:	601a      	strpl	r2, [r3, #0]
 80a2294:	4b22      	ldr	r3, [pc, #136]	; (80a2320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2296:	681a      	ldr	r2, [r3, #0]
 80a2298:	07d1      	lsls	r1, r2, #31
 80a229a:	bf5c      	itt	pl
 80a229c:	2201      	movpl	r2, #1
 80a229e:	601a      	strpl	r2, [r3, #0]
 80a22a0:	4b20      	ldr	r3, [pc, #128]	; (80a2324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a22a2:	681a      	ldr	r2, [r3, #0]
 80a22a4:	07d2      	lsls	r2, r2, #31
 80a22a6:	bf5c      	itt	pl
 80a22a8:	2201      	movpl	r2, #1
 80a22aa:	601a      	strpl	r2, [r3, #0]
 80a22ac:	4b1e      	ldr	r3, [pc, #120]	; (80a2328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a22ae:	681a      	ldr	r2, [r3, #0]
 80a22b0:	07d0      	lsls	r0, r2, #31
 80a22b2:	bf5c      	itt	pl
 80a22b4:	2201      	movpl	r2, #1
 80a22b6:	601a      	strpl	r2, [r3, #0]
 80a22b8:	4b1c      	ldr	r3, [pc, #112]	; (80a232c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a22ba:	681a      	ldr	r2, [r3, #0]
 80a22bc:	07d1      	lsls	r1, r2, #31
 80a22be:	bf5c      	itt	pl
 80a22c0:	2201      	movpl	r2, #1
 80a22c2:	601a      	strpl	r2, [r3, #0]
 80a22c4:	4b1a      	ldr	r3, [pc, #104]	; (80a2330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a22c6:	681a      	ldr	r2, [r3, #0]
 80a22c8:	07d2      	lsls	r2, r2, #31
 80a22ca:	bf5c      	itt	pl
 80a22cc:	2201      	movpl	r2, #1
 80a22ce:	601a      	strpl	r2, [r3, #0]
 80a22d0:	4b18      	ldr	r3, [pc, #96]	; (80a2334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a22d2:	681a      	ldr	r2, [r3, #0]
 80a22d4:	07d0      	lsls	r0, r2, #31
 80a22d6:	bf5c      	itt	pl
 80a22d8:	2201      	movpl	r2, #1
 80a22da:	601a      	strpl	r2, [r3, #0]
 80a22dc:	4b16      	ldr	r3, [pc, #88]	; (80a2338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a22de:	681a      	ldr	r2, [r3, #0]
 80a22e0:	07d1      	lsls	r1, r2, #31
 80a22e2:	bf5c      	itt	pl
 80a22e4:	2201      	movpl	r2, #1
 80a22e6:	601a      	strpl	r2, [r3, #0]
 80a22e8:	4b14      	ldr	r3, [pc, #80]	; (80a233c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a22ea:	681a      	ldr	r2, [r3, #0]
 80a22ec:	07d2      	lsls	r2, r2, #31
 80a22ee:	bf5c      	itt	pl
 80a22f0:	2201      	movpl	r2, #1
 80a22f2:	601a      	strpl	r2, [r3, #0]
 80a22f4:	4b12      	ldr	r3, [pc, #72]	; (80a2340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a22f6:	681a      	ldr	r2, [r3, #0]
 80a22f8:	07d0      	lsls	r0, r2, #31
 80a22fa:	bf5c      	itt	pl
 80a22fc:	2201      	movpl	r2, #1
 80a22fe:	601a      	strpl	r2, [r3, #0]
 80a2300:	4b10      	ldr	r3, [pc, #64]	; (80a2344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2302:	681a      	ldr	r2, [r3, #0]
 80a2304:	07d1      	lsls	r1, r2, #31
 80a2306:	bf5c      	itt	pl
 80a2308:	2201      	movpl	r2, #1
 80a230a:	601a      	strpl	r2, [r3, #0]
 80a230c:	4b0e      	ldr	r3, [pc, #56]	; (80a2348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a230e:	681a      	ldr	r2, [r3, #0]
 80a2310:	07d2      	lsls	r2, r2, #31
 80a2312:	bf5c      	itt	pl
 80a2314:	2201      	movpl	r2, #1
 80a2316:	601a      	strpl	r2, [r3, #0]
 80a2318:	4770      	bx	lr
 80a231a:	bf00      	nop
 80a231c:	200008f4 	.word	0x200008f4
 80a2320:	200008f0 	.word	0x200008f0
 80a2324:	200008ec 	.word	0x200008ec
 80a2328:	200008e8 	.word	0x200008e8
 80a232c:	200008e4 	.word	0x200008e4
 80a2330:	200008e0 	.word	0x200008e0
 80a2334:	200008dc 	.word	0x200008dc
 80a2338:	200008d8 	.word	0x200008d8
 80a233c:	200008d4 	.word	0x200008d4
 80a2340:	200008d0 	.word	0x200008d0
 80a2344:	200008cc 	.word	0x200008cc
 80a2348:	200008c8 	.word	0x200008c8

080a234c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a234c:	4b24      	ldr	r3, [pc, #144]	; (80a23e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a234e:	681a      	ldr	r2, [r3, #0]
 80a2350:	07d0      	lsls	r0, r2, #31
 80a2352:	bf5c      	itt	pl
 80a2354:	2201      	movpl	r2, #1
 80a2356:	601a      	strpl	r2, [r3, #0]
 80a2358:	4b22      	ldr	r3, [pc, #136]	; (80a23e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a235a:	681a      	ldr	r2, [r3, #0]
 80a235c:	07d1      	lsls	r1, r2, #31
 80a235e:	bf5c      	itt	pl
 80a2360:	2201      	movpl	r2, #1
 80a2362:	601a      	strpl	r2, [r3, #0]
 80a2364:	4b20      	ldr	r3, [pc, #128]	; (80a23e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2366:	681a      	ldr	r2, [r3, #0]
 80a2368:	07d2      	lsls	r2, r2, #31
 80a236a:	bf5c      	itt	pl
 80a236c:	2201      	movpl	r2, #1
 80a236e:	601a      	strpl	r2, [r3, #0]
 80a2370:	4b1e      	ldr	r3, [pc, #120]	; (80a23ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2372:	681a      	ldr	r2, [r3, #0]
 80a2374:	07d0      	lsls	r0, r2, #31
 80a2376:	bf5c      	itt	pl
 80a2378:	2201      	movpl	r2, #1
 80a237a:	601a      	strpl	r2, [r3, #0]
 80a237c:	4b1c      	ldr	r3, [pc, #112]	; (80a23f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a237e:	681a      	ldr	r2, [r3, #0]
 80a2380:	07d1      	lsls	r1, r2, #31
 80a2382:	bf5c      	itt	pl
 80a2384:	2201      	movpl	r2, #1
 80a2386:	601a      	strpl	r2, [r3, #0]
 80a2388:	4b1a      	ldr	r3, [pc, #104]	; (80a23f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a238a:	681a      	ldr	r2, [r3, #0]
 80a238c:	07d2      	lsls	r2, r2, #31
 80a238e:	bf5c      	itt	pl
 80a2390:	2201      	movpl	r2, #1
 80a2392:	601a      	strpl	r2, [r3, #0]
 80a2394:	4b18      	ldr	r3, [pc, #96]	; (80a23f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2396:	681a      	ldr	r2, [r3, #0]
 80a2398:	07d0      	lsls	r0, r2, #31
 80a239a:	bf5c      	itt	pl
 80a239c:	2201      	movpl	r2, #1
 80a239e:	601a      	strpl	r2, [r3, #0]
 80a23a0:	4b16      	ldr	r3, [pc, #88]	; (80a23fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a23a2:	681a      	ldr	r2, [r3, #0]
 80a23a4:	07d1      	lsls	r1, r2, #31
 80a23a6:	bf5c      	itt	pl
 80a23a8:	2201      	movpl	r2, #1
 80a23aa:	601a      	strpl	r2, [r3, #0]
 80a23ac:	4b14      	ldr	r3, [pc, #80]	; (80a2400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a23ae:	681a      	ldr	r2, [r3, #0]
 80a23b0:	07d2      	lsls	r2, r2, #31
 80a23b2:	bf5c      	itt	pl
 80a23b4:	2201      	movpl	r2, #1
 80a23b6:	601a      	strpl	r2, [r3, #0]
 80a23b8:	4b12      	ldr	r3, [pc, #72]	; (80a2404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a23ba:	681a      	ldr	r2, [r3, #0]
 80a23bc:	07d0      	lsls	r0, r2, #31
 80a23be:	bf5c      	itt	pl
 80a23c0:	2201      	movpl	r2, #1
 80a23c2:	601a      	strpl	r2, [r3, #0]
 80a23c4:	4b10      	ldr	r3, [pc, #64]	; (80a2408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a23c6:	681a      	ldr	r2, [r3, #0]
 80a23c8:	07d1      	lsls	r1, r2, #31
 80a23ca:	bf5c      	itt	pl
 80a23cc:	2201      	movpl	r2, #1
 80a23ce:	601a      	strpl	r2, [r3, #0]
 80a23d0:	4b0e      	ldr	r3, [pc, #56]	; (80a240c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a23d2:	681a      	ldr	r2, [r3, #0]
 80a23d4:	07d2      	lsls	r2, r2, #31
 80a23d6:	bf5c      	itt	pl
 80a23d8:	2201      	movpl	r2, #1
 80a23da:	601a      	strpl	r2, [r3, #0]
 80a23dc:	4770      	bx	lr
 80a23de:	bf00      	nop
 80a23e0:	20000924 	.word	0x20000924
 80a23e4:	20000920 	.word	0x20000920
 80a23e8:	2000091c 	.word	0x2000091c
 80a23ec:	20000918 	.word	0x20000918
 80a23f0:	20000914 	.word	0x20000914
 80a23f4:	20000910 	.word	0x20000910
 80a23f8:	2000090c 	.word	0x2000090c
 80a23fc:	20000908 	.word	0x20000908
 80a2400:	20000904 	.word	0x20000904
 80a2404:	20000900 	.word	0x20000900
 80a2408:	200008fc 	.word	0x200008fc
 80a240c:	200008f8 	.word	0x200008f8

080a2410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2410:	4b18      	ldr	r3, [pc, #96]	; (80a2474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2412:	681a      	ldr	r2, [r3, #0]
 80a2414:	07d1      	lsls	r1, r2, #31
 80a2416:	bf5c      	itt	pl
 80a2418:	2201      	movpl	r2, #1
 80a241a:	601a      	strpl	r2, [r3, #0]
 80a241c:	4b16      	ldr	r3, [pc, #88]	; (80a2478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a241e:	681a      	ldr	r2, [r3, #0]
 80a2420:	07d2      	lsls	r2, r2, #31
 80a2422:	bf5c      	itt	pl
 80a2424:	2201      	movpl	r2, #1
 80a2426:	601a      	strpl	r2, [r3, #0]
 80a2428:	4b14      	ldr	r3, [pc, #80]	; (80a247c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a242a:	681a      	ldr	r2, [r3, #0]
 80a242c:	07d0      	lsls	r0, r2, #31
 80a242e:	bf5c      	itt	pl
 80a2430:	2201      	movpl	r2, #1
 80a2432:	601a      	strpl	r2, [r3, #0]
 80a2434:	4b12      	ldr	r3, [pc, #72]	; (80a2480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2436:	681a      	ldr	r2, [r3, #0]
 80a2438:	07d1      	lsls	r1, r2, #31
 80a243a:	bf5c      	itt	pl
 80a243c:	2201      	movpl	r2, #1
 80a243e:	601a      	strpl	r2, [r3, #0]
 80a2440:	4b10      	ldr	r3, [pc, #64]	; (80a2484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2442:	681a      	ldr	r2, [r3, #0]
 80a2444:	07d2      	lsls	r2, r2, #31
 80a2446:	bf5c      	itt	pl
 80a2448:	2201      	movpl	r2, #1
 80a244a:	601a      	strpl	r2, [r3, #0]
 80a244c:	4b0e      	ldr	r3, [pc, #56]	; (80a2488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a244e:	681a      	ldr	r2, [r3, #0]
 80a2450:	07d0      	lsls	r0, r2, #31
 80a2452:	bf5c      	itt	pl
 80a2454:	2201      	movpl	r2, #1
 80a2456:	601a      	strpl	r2, [r3, #0]
 80a2458:	4b0c      	ldr	r3, [pc, #48]	; (80a248c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a245a:	681a      	ldr	r2, [r3, #0]
 80a245c:	07d1      	lsls	r1, r2, #31
 80a245e:	bf5c      	itt	pl
 80a2460:	2201      	movpl	r2, #1
 80a2462:	601a      	strpl	r2, [r3, #0]
 80a2464:	4b0a      	ldr	r3, [pc, #40]	; (80a2490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2466:	681a      	ldr	r2, [r3, #0]
 80a2468:	07d2      	lsls	r2, r2, #31
 80a246a:	bf5c      	itt	pl
 80a246c:	2201      	movpl	r2, #1
 80a246e:	601a      	strpl	r2, [r3, #0]
 80a2470:	4770      	bx	lr
 80a2472:	bf00      	nop
 80a2474:	20000944 	.word	0x20000944
 80a2478:	20000940 	.word	0x20000940
 80a247c:	2000093c 	.word	0x2000093c
 80a2480:	20000938 	.word	0x20000938
 80a2484:	20000934 	.word	0x20000934
 80a2488:	20000930 	.word	0x20000930
 80a248c:	2000092c 	.word	0x2000092c
 80a2490:	20000928 	.word	0x20000928

080a2494 <__aeabi_drsub>:
 80a2494:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2498:	e002      	b.n	80a24a0 <__adddf3>
 80a249a:	bf00      	nop

080a249c <__aeabi_dsub>:
 80a249c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a24a0 <__adddf3>:
 80a24a0:	b530      	push	{r4, r5, lr}
 80a24a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a24a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a24aa:	ea94 0f05 	teq	r4, r5
 80a24ae:	bf08      	it	eq
 80a24b0:	ea90 0f02 	teqeq	r0, r2
 80a24b4:	bf1f      	itttt	ne
 80a24b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a24ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a24be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a24c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a24c6:	f000 80e2 	beq.w	80a268e <__adddf3+0x1ee>
 80a24ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a24ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a24d2:	bfb8      	it	lt
 80a24d4:	426d      	neglt	r5, r5
 80a24d6:	dd0c      	ble.n	80a24f2 <__adddf3+0x52>
 80a24d8:	442c      	add	r4, r5
 80a24da:	ea80 0202 	eor.w	r2, r0, r2
 80a24de:	ea81 0303 	eor.w	r3, r1, r3
 80a24e2:	ea82 0000 	eor.w	r0, r2, r0
 80a24e6:	ea83 0101 	eor.w	r1, r3, r1
 80a24ea:	ea80 0202 	eor.w	r2, r0, r2
 80a24ee:	ea81 0303 	eor.w	r3, r1, r3
 80a24f2:	2d36      	cmp	r5, #54	; 0x36
 80a24f4:	bf88      	it	hi
 80a24f6:	bd30      	pophi	{r4, r5, pc}
 80a24f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a24fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2500:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2504:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2508:	d002      	beq.n	80a2510 <__adddf3+0x70>
 80a250a:	4240      	negs	r0, r0
 80a250c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2510:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2514:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2518:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a251c:	d002      	beq.n	80a2524 <__adddf3+0x84>
 80a251e:	4252      	negs	r2, r2
 80a2520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2524:	ea94 0f05 	teq	r4, r5
 80a2528:	f000 80a7 	beq.w	80a267a <__adddf3+0x1da>
 80a252c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2530:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2534:	db0d      	blt.n	80a2552 <__adddf3+0xb2>
 80a2536:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a253a:	fa22 f205 	lsr.w	r2, r2, r5
 80a253e:	1880      	adds	r0, r0, r2
 80a2540:	f141 0100 	adc.w	r1, r1, #0
 80a2544:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2548:	1880      	adds	r0, r0, r2
 80a254a:	fa43 f305 	asr.w	r3, r3, r5
 80a254e:	4159      	adcs	r1, r3
 80a2550:	e00e      	b.n	80a2570 <__adddf3+0xd0>
 80a2552:	f1a5 0520 	sub.w	r5, r5, #32
 80a2556:	f10e 0e20 	add.w	lr, lr, #32
 80a255a:	2a01      	cmp	r2, #1
 80a255c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2560:	bf28      	it	cs
 80a2562:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2566:	fa43 f305 	asr.w	r3, r3, r5
 80a256a:	18c0      	adds	r0, r0, r3
 80a256c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2574:	d507      	bpl.n	80a2586 <__adddf3+0xe6>
 80a2576:	f04f 0e00 	mov.w	lr, #0
 80a257a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a257e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2582:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2586:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a258a:	d31b      	bcc.n	80a25c4 <__adddf3+0x124>
 80a258c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2590:	d30c      	bcc.n	80a25ac <__adddf3+0x10c>
 80a2592:	0849      	lsrs	r1, r1, #1
 80a2594:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2598:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a259c:	f104 0401 	add.w	r4, r4, #1
 80a25a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a25a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a25a8:	f080 809a 	bcs.w	80a26e0 <__adddf3+0x240>
 80a25ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a25b0:	bf08      	it	eq
 80a25b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a25b6:	f150 0000 	adcs.w	r0, r0, #0
 80a25ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a25be:	ea41 0105 	orr.w	r1, r1, r5
 80a25c2:	bd30      	pop	{r4, r5, pc}
 80a25c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a25c8:	4140      	adcs	r0, r0
 80a25ca:	eb41 0101 	adc.w	r1, r1, r1
 80a25ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a25d2:	f1a4 0401 	sub.w	r4, r4, #1
 80a25d6:	d1e9      	bne.n	80a25ac <__adddf3+0x10c>
 80a25d8:	f091 0f00 	teq	r1, #0
 80a25dc:	bf04      	itt	eq
 80a25de:	4601      	moveq	r1, r0
 80a25e0:	2000      	moveq	r0, #0
 80a25e2:	fab1 f381 	clz	r3, r1
 80a25e6:	bf08      	it	eq
 80a25e8:	3320      	addeq	r3, #32
 80a25ea:	f1a3 030b 	sub.w	r3, r3, #11
 80a25ee:	f1b3 0220 	subs.w	r2, r3, #32
 80a25f2:	da0c      	bge.n	80a260e <__adddf3+0x16e>
 80a25f4:	320c      	adds	r2, #12
 80a25f6:	dd08      	ble.n	80a260a <__adddf3+0x16a>
 80a25f8:	f102 0c14 	add.w	ip, r2, #20
 80a25fc:	f1c2 020c 	rsb	r2, r2, #12
 80a2600:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2604:	fa21 f102 	lsr.w	r1, r1, r2
 80a2608:	e00c      	b.n	80a2624 <__adddf3+0x184>
 80a260a:	f102 0214 	add.w	r2, r2, #20
 80a260e:	bfd8      	it	le
 80a2610:	f1c2 0c20 	rsble	ip, r2, #32
 80a2614:	fa01 f102 	lsl.w	r1, r1, r2
 80a2618:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a261c:	bfdc      	itt	le
 80a261e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2622:	4090      	lslle	r0, r2
 80a2624:	1ae4      	subs	r4, r4, r3
 80a2626:	bfa2      	ittt	ge
 80a2628:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a262c:	4329      	orrge	r1, r5
 80a262e:	bd30      	popge	{r4, r5, pc}
 80a2630:	ea6f 0404 	mvn.w	r4, r4
 80a2634:	3c1f      	subs	r4, #31
 80a2636:	da1c      	bge.n	80a2672 <__adddf3+0x1d2>
 80a2638:	340c      	adds	r4, #12
 80a263a:	dc0e      	bgt.n	80a265a <__adddf3+0x1ba>
 80a263c:	f104 0414 	add.w	r4, r4, #20
 80a2640:	f1c4 0220 	rsb	r2, r4, #32
 80a2644:	fa20 f004 	lsr.w	r0, r0, r4
 80a2648:	fa01 f302 	lsl.w	r3, r1, r2
 80a264c:	ea40 0003 	orr.w	r0, r0, r3
 80a2650:	fa21 f304 	lsr.w	r3, r1, r4
 80a2654:	ea45 0103 	orr.w	r1, r5, r3
 80a2658:	bd30      	pop	{r4, r5, pc}
 80a265a:	f1c4 040c 	rsb	r4, r4, #12
 80a265e:	f1c4 0220 	rsb	r2, r4, #32
 80a2662:	fa20 f002 	lsr.w	r0, r0, r2
 80a2666:	fa01 f304 	lsl.w	r3, r1, r4
 80a266a:	ea40 0003 	orr.w	r0, r0, r3
 80a266e:	4629      	mov	r1, r5
 80a2670:	bd30      	pop	{r4, r5, pc}
 80a2672:	fa21 f004 	lsr.w	r0, r1, r4
 80a2676:	4629      	mov	r1, r5
 80a2678:	bd30      	pop	{r4, r5, pc}
 80a267a:	f094 0f00 	teq	r4, #0
 80a267e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2682:	bf06      	itte	eq
 80a2684:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2688:	3401      	addeq	r4, #1
 80a268a:	3d01      	subne	r5, #1
 80a268c:	e74e      	b.n	80a252c <__adddf3+0x8c>
 80a268e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2692:	bf18      	it	ne
 80a2694:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2698:	d029      	beq.n	80a26ee <__adddf3+0x24e>
 80a269a:	ea94 0f05 	teq	r4, r5
 80a269e:	bf08      	it	eq
 80a26a0:	ea90 0f02 	teqeq	r0, r2
 80a26a4:	d005      	beq.n	80a26b2 <__adddf3+0x212>
 80a26a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a26aa:	bf04      	itt	eq
 80a26ac:	4619      	moveq	r1, r3
 80a26ae:	4610      	moveq	r0, r2
 80a26b0:	bd30      	pop	{r4, r5, pc}
 80a26b2:	ea91 0f03 	teq	r1, r3
 80a26b6:	bf1e      	ittt	ne
 80a26b8:	2100      	movne	r1, #0
 80a26ba:	2000      	movne	r0, #0
 80a26bc:	bd30      	popne	{r4, r5, pc}
 80a26be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a26c2:	d105      	bne.n	80a26d0 <__adddf3+0x230>
 80a26c4:	0040      	lsls	r0, r0, #1
 80a26c6:	4149      	adcs	r1, r1
 80a26c8:	bf28      	it	cs
 80a26ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a26ce:	bd30      	pop	{r4, r5, pc}
 80a26d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a26d4:	bf3c      	itt	cc
 80a26d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a26da:	bd30      	popcc	{r4, r5, pc}
 80a26dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a26e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a26e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a26e8:	f04f 0000 	mov.w	r0, #0
 80a26ec:	bd30      	pop	{r4, r5, pc}
 80a26ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26f2:	bf1a      	itte	ne
 80a26f4:	4619      	movne	r1, r3
 80a26f6:	4610      	movne	r0, r2
 80a26f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a26fc:	bf1c      	itt	ne
 80a26fe:	460b      	movne	r3, r1
 80a2700:	4602      	movne	r2, r0
 80a2702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2706:	bf06      	itte	eq
 80a2708:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a270c:	ea91 0f03 	teqeq	r1, r3
 80a2710:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2714:	bd30      	pop	{r4, r5, pc}
 80a2716:	bf00      	nop

080a2718 <__aeabi_ui2d>:
 80a2718:	f090 0f00 	teq	r0, #0
 80a271c:	bf04      	itt	eq
 80a271e:	2100      	moveq	r1, #0
 80a2720:	4770      	bxeq	lr
 80a2722:	b530      	push	{r4, r5, lr}
 80a2724:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2728:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a272c:	f04f 0500 	mov.w	r5, #0
 80a2730:	f04f 0100 	mov.w	r1, #0
 80a2734:	e750      	b.n	80a25d8 <__adddf3+0x138>
 80a2736:	bf00      	nop

080a2738 <__aeabi_i2d>:
 80a2738:	f090 0f00 	teq	r0, #0
 80a273c:	bf04      	itt	eq
 80a273e:	2100      	moveq	r1, #0
 80a2740:	4770      	bxeq	lr
 80a2742:	b530      	push	{r4, r5, lr}
 80a2744:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2748:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a274c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2750:	bf48      	it	mi
 80a2752:	4240      	negmi	r0, r0
 80a2754:	f04f 0100 	mov.w	r1, #0
 80a2758:	e73e      	b.n	80a25d8 <__adddf3+0x138>
 80a275a:	bf00      	nop

080a275c <__aeabi_f2d>:
 80a275c:	0042      	lsls	r2, r0, #1
 80a275e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2762:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2766:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a276a:	bf1f      	itttt	ne
 80a276c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2774:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2778:	4770      	bxne	lr
 80a277a:	f092 0f00 	teq	r2, #0
 80a277e:	bf14      	ite	ne
 80a2780:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2784:	4770      	bxeq	lr
 80a2786:	b530      	push	{r4, r5, lr}
 80a2788:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a278c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2794:	e720      	b.n	80a25d8 <__adddf3+0x138>
 80a2796:	bf00      	nop

080a2798 <__aeabi_ul2d>:
 80a2798:	ea50 0201 	orrs.w	r2, r0, r1
 80a279c:	bf08      	it	eq
 80a279e:	4770      	bxeq	lr
 80a27a0:	b530      	push	{r4, r5, lr}
 80a27a2:	f04f 0500 	mov.w	r5, #0
 80a27a6:	e00a      	b.n	80a27be <__aeabi_l2d+0x16>

080a27a8 <__aeabi_l2d>:
 80a27a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a27ac:	bf08      	it	eq
 80a27ae:	4770      	bxeq	lr
 80a27b0:	b530      	push	{r4, r5, lr}
 80a27b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a27b6:	d502      	bpl.n	80a27be <__aeabi_l2d+0x16>
 80a27b8:	4240      	negs	r0, r0
 80a27ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a27be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a27c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a27c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a27ca:	f43f aedc 	beq.w	80a2586 <__adddf3+0xe6>
 80a27ce:	f04f 0203 	mov.w	r2, #3
 80a27d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a27d6:	bf18      	it	ne
 80a27d8:	3203      	addne	r2, #3
 80a27da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a27de:	bf18      	it	ne
 80a27e0:	3203      	addne	r2, #3
 80a27e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a27e6:	f1c2 0320 	rsb	r3, r2, #32
 80a27ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80a27ee:	fa20 f002 	lsr.w	r0, r0, r2
 80a27f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a27f6:	ea40 000e 	orr.w	r0, r0, lr
 80a27fa:	fa21 f102 	lsr.w	r1, r1, r2
 80a27fe:	4414      	add	r4, r2
 80a2800:	e6c1      	b.n	80a2586 <__adddf3+0xe6>
 80a2802:	bf00      	nop

080a2804 <__gedf2>:
 80a2804:	f04f 3cff 	mov.w	ip, #4294967295
 80a2808:	e006      	b.n	80a2818 <__cmpdf2+0x4>
 80a280a:	bf00      	nop

080a280c <__ledf2>:
 80a280c:	f04f 0c01 	mov.w	ip, #1
 80a2810:	e002      	b.n	80a2818 <__cmpdf2+0x4>
 80a2812:	bf00      	nop

080a2814 <__cmpdf2>:
 80a2814:	f04f 0c01 	mov.w	ip, #1
 80a2818:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a281c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2824:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2828:	bf18      	it	ne
 80a282a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a282e:	d01b      	beq.n	80a2868 <__cmpdf2+0x54>
 80a2830:	b001      	add	sp, #4
 80a2832:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2836:	bf0c      	ite	eq
 80a2838:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a283c:	ea91 0f03 	teqne	r1, r3
 80a2840:	bf02      	ittt	eq
 80a2842:	ea90 0f02 	teqeq	r0, r2
 80a2846:	2000      	moveq	r0, #0
 80a2848:	4770      	bxeq	lr
 80a284a:	f110 0f00 	cmn.w	r0, #0
 80a284e:	ea91 0f03 	teq	r1, r3
 80a2852:	bf58      	it	pl
 80a2854:	4299      	cmppl	r1, r3
 80a2856:	bf08      	it	eq
 80a2858:	4290      	cmpeq	r0, r2
 80a285a:	bf2c      	ite	cs
 80a285c:	17d8      	asrcs	r0, r3, #31
 80a285e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2862:	f040 0001 	orr.w	r0, r0, #1
 80a2866:	4770      	bx	lr
 80a2868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a286c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2870:	d102      	bne.n	80a2878 <__cmpdf2+0x64>
 80a2872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2876:	d107      	bne.n	80a2888 <__cmpdf2+0x74>
 80a2878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a287c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2880:	d1d6      	bne.n	80a2830 <__cmpdf2+0x1c>
 80a2882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2886:	d0d3      	beq.n	80a2830 <__cmpdf2+0x1c>
 80a2888:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a288c:	4770      	bx	lr
 80a288e:	bf00      	nop

080a2890 <__aeabi_cdrcmple>:
 80a2890:	4684      	mov	ip, r0
 80a2892:	4610      	mov	r0, r2
 80a2894:	4662      	mov	r2, ip
 80a2896:	468c      	mov	ip, r1
 80a2898:	4619      	mov	r1, r3
 80a289a:	4663      	mov	r3, ip
 80a289c:	e000      	b.n	80a28a0 <__aeabi_cdcmpeq>
 80a289e:	bf00      	nop

080a28a0 <__aeabi_cdcmpeq>:
 80a28a0:	b501      	push	{r0, lr}
 80a28a2:	f7ff ffb7 	bl	80a2814 <__cmpdf2>
 80a28a6:	2800      	cmp	r0, #0
 80a28a8:	bf48      	it	mi
 80a28aa:	f110 0f00 	cmnmi.w	r0, #0
 80a28ae:	bd01      	pop	{r0, pc}

080a28b0 <__aeabi_dcmpeq>:
 80a28b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28b4:	f7ff fff4 	bl	80a28a0 <__aeabi_cdcmpeq>
 80a28b8:	bf0c      	ite	eq
 80a28ba:	2001      	moveq	r0, #1
 80a28bc:	2000      	movne	r0, #0
 80a28be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28c2:	bf00      	nop

080a28c4 <__aeabi_dcmplt>:
 80a28c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28c8:	f7ff ffea 	bl	80a28a0 <__aeabi_cdcmpeq>
 80a28cc:	bf34      	ite	cc
 80a28ce:	2001      	movcc	r0, #1
 80a28d0:	2000      	movcs	r0, #0
 80a28d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28d6:	bf00      	nop

080a28d8 <__aeabi_dcmple>:
 80a28d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28dc:	f7ff ffe0 	bl	80a28a0 <__aeabi_cdcmpeq>
 80a28e0:	bf94      	ite	ls
 80a28e2:	2001      	movls	r0, #1
 80a28e4:	2000      	movhi	r0, #0
 80a28e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28ea:	bf00      	nop

080a28ec <__aeabi_dcmpge>:
 80a28ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28f0:	f7ff ffce 	bl	80a2890 <__aeabi_cdrcmple>
 80a28f4:	bf94      	ite	ls
 80a28f6:	2001      	movls	r0, #1
 80a28f8:	2000      	movhi	r0, #0
 80a28fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28fe:	bf00      	nop

080a2900 <__aeabi_dcmpgt>:
 80a2900:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2904:	f7ff ffc4 	bl	80a2890 <__aeabi_cdrcmple>
 80a2908:	bf34      	ite	cc
 80a290a:	2001      	movcc	r0, #1
 80a290c:	2000      	movcs	r0, #0
 80a290e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2912:	bf00      	nop

080a2914 <__aeabi_fmul>:
 80a2914:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2918:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a291c:	bf1e      	ittt	ne
 80a291e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2922:	ea92 0f0c 	teqne	r2, ip
 80a2926:	ea93 0f0c 	teqne	r3, ip
 80a292a:	d06f      	beq.n	80a2a0c <__aeabi_fmul+0xf8>
 80a292c:	441a      	add	r2, r3
 80a292e:	ea80 0c01 	eor.w	ip, r0, r1
 80a2932:	0240      	lsls	r0, r0, #9
 80a2934:	bf18      	it	ne
 80a2936:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a293a:	d01e      	beq.n	80a297a <__aeabi_fmul+0x66>
 80a293c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2940:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2944:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2948:	fba0 3101 	umull	r3, r1, r0, r1
 80a294c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2950:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2954:	bf3e      	ittt	cc
 80a2956:	0049      	lslcc	r1, r1, #1
 80a2958:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a295c:	005b      	lslcc	r3, r3, #1
 80a295e:	ea40 0001 	orr.w	r0, r0, r1
 80a2962:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2966:	2afd      	cmp	r2, #253	; 0xfd
 80a2968:	d81d      	bhi.n	80a29a6 <__aeabi_fmul+0x92>
 80a296a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a296e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2972:	bf08      	it	eq
 80a2974:	f020 0001 	biceq.w	r0, r0, #1
 80a2978:	4770      	bx	lr
 80a297a:	f090 0f00 	teq	r0, #0
 80a297e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2982:	bf08      	it	eq
 80a2984:	0249      	lsleq	r1, r1, #9
 80a2986:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a298a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a298e:	3a7f      	subs	r2, #127	; 0x7f
 80a2990:	bfc2      	ittt	gt
 80a2992:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2996:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a299a:	4770      	bxgt	lr
 80a299c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29a0:	f04f 0300 	mov.w	r3, #0
 80a29a4:	3a01      	subs	r2, #1
 80a29a6:	dc5d      	bgt.n	80a2a64 <__aeabi_fmul+0x150>
 80a29a8:	f112 0f19 	cmn.w	r2, #25
 80a29ac:	bfdc      	itt	le
 80a29ae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a29b2:	4770      	bxle	lr
 80a29b4:	f1c2 0200 	rsb	r2, r2, #0
 80a29b8:	0041      	lsls	r1, r0, #1
 80a29ba:	fa21 f102 	lsr.w	r1, r1, r2
 80a29be:	f1c2 0220 	rsb	r2, r2, #32
 80a29c2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a29c6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a29ca:	f140 0000 	adc.w	r0, r0, #0
 80a29ce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a29d2:	bf08      	it	eq
 80a29d4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a29d8:	4770      	bx	lr
 80a29da:	f092 0f00 	teq	r2, #0
 80a29de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a29e2:	bf02      	ittt	eq
 80a29e4:	0040      	lsleq	r0, r0, #1
 80a29e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a29ea:	3a01      	subeq	r2, #1
 80a29ec:	d0f9      	beq.n	80a29e2 <__aeabi_fmul+0xce>
 80a29ee:	ea40 000c 	orr.w	r0, r0, ip
 80a29f2:	f093 0f00 	teq	r3, #0
 80a29f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a29fa:	bf02      	ittt	eq
 80a29fc:	0049      	lsleq	r1, r1, #1
 80a29fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2a02:	3b01      	subeq	r3, #1
 80a2a04:	d0f9      	beq.n	80a29fa <__aeabi_fmul+0xe6>
 80a2a06:	ea41 010c 	orr.w	r1, r1, ip
 80a2a0a:	e78f      	b.n	80a292c <__aeabi_fmul+0x18>
 80a2a0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2a10:	ea92 0f0c 	teq	r2, ip
 80a2a14:	bf18      	it	ne
 80a2a16:	ea93 0f0c 	teqne	r3, ip
 80a2a1a:	d00a      	beq.n	80a2a32 <__aeabi_fmul+0x11e>
 80a2a1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2a20:	bf18      	it	ne
 80a2a22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2a26:	d1d8      	bne.n	80a29da <__aeabi_fmul+0xc6>
 80a2a28:	ea80 0001 	eor.w	r0, r0, r1
 80a2a2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a30:	4770      	bx	lr
 80a2a32:	f090 0f00 	teq	r0, #0
 80a2a36:	bf17      	itett	ne
 80a2a38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2a3c:	4608      	moveq	r0, r1
 80a2a3e:	f091 0f00 	teqne	r1, #0
 80a2a42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2a46:	d014      	beq.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2a48:	ea92 0f0c 	teq	r2, ip
 80a2a4c:	d101      	bne.n	80a2a52 <__aeabi_fmul+0x13e>
 80a2a4e:	0242      	lsls	r2, r0, #9
 80a2a50:	d10f      	bne.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2a52:	ea93 0f0c 	teq	r3, ip
 80a2a56:	d103      	bne.n	80a2a60 <__aeabi_fmul+0x14c>
 80a2a58:	024b      	lsls	r3, r1, #9
 80a2a5a:	bf18      	it	ne
 80a2a5c:	4608      	movne	r0, r1
 80a2a5e:	d108      	bne.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2a60:	ea80 0001 	eor.w	r0, r0, r1
 80a2a64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a70:	4770      	bx	lr
 80a2a72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2a7a:	4770      	bx	lr

080a2a7c <__aeabi_fdiv>:
 80a2a7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2a84:	bf1e      	ittt	ne
 80a2a86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2a8a:	ea92 0f0c 	teqne	r2, ip
 80a2a8e:	ea93 0f0c 	teqne	r3, ip
 80a2a92:	d069      	beq.n	80a2b68 <__aeabi_fdiv+0xec>
 80a2a94:	eba2 0203 	sub.w	r2, r2, r3
 80a2a98:	ea80 0c01 	eor.w	ip, r0, r1
 80a2a9c:	0249      	lsls	r1, r1, #9
 80a2a9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2aa2:	d037      	beq.n	80a2b14 <__aeabi_fdiv+0x98>
 80a2aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2aa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2aac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2ab0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2ab4:	428b      	cmp	r3, r1
 80a2ab6:	bf38      	it	cc
 80a2ab8:	005b      	lslcc	r3, r3, #1
 80a2aba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2abe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2ac2:	428b      	cmp	r3, r1
 80a2ac4:	bf24      	itt	cs
 80a2ac6:	1a5b      	subcs	r3, r3, r1
 80a2ac8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2acc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2ad0:	bf24      	itt	cs
 80a2ad2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2ad6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2ada:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2ade:	bf24      	itt	cs
 80a2ae0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2ae4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2ae8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2aec:	bf24      	itt	cs
 80a2aee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2af2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2af6:	011b      	lsls	r3, r3, #4
 80a2af8:	bf18      	it	ne
 80a2afa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2afe:	d1e0      	bne.n	80a2ac2 <__aeabi_fdiv+0x46>
 80a2b00:	2afd      	cmp	r2, #253	; 0xfd
 80a2b02:	f63f af50 	bhi.w	80a29a6 <__aeabi_fmul+0x92>
 80a2b06:	428b      	cmp	r3, r1
 80a2b08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2b0c:	bf08      	it	eq
 80a2b0e:	f020 0001 	biceq.w	r0, r0, #1
 80a2b12:	4770      	bx	lr
 80a2b14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2b18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2b1c:	327f      	adds	r2, #127	; 0x7f
 80a2b1e:	bfc2      	ittt	gt
 80a2b20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2b24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2b28:	4770      	bxgt	lr
 80a2b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b2e:	f04f 0300 	mov.w	r3, #0
 80a2b32:	3a01      	subs	r2, #1
 80a2b34:	e737      	b.n	80a29a6 <__aeabi_fmul+0x92>
 80a2b36:	f092 0f00 	teq	r2, #0
 80a2b3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b3e:	bf02      	ittt	eq
 80a2b40:	0040      	lsleq	r0, r0, #1
 80a2b42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b46:	3a01      	subeq	r2, #1
 80a2b48:	d0f9      	beq.n	80a2b3e <__aeabi_fdiv+0xc2>
 80a2b4a:	ea40 000c 	orr.w	r0, r0, ip
 80a2b4e:	f093 0f00 	teq	r3, #0
 80a2b52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b56:	bf02      	ittt	eq
 80a2b58:	0049      	lsleq	r1, r1, #1
 80a2b5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2b5e:	3b01      	subeq	r3, #1
 80a2b60:	d0f9      	beq.n	80a2b56 <__aeabi_fdiv+0xda>
 80a2b62:	ea41 010c 	orr.w	r1, r1, ip
 80a2b66:	e795      	b.n	80a2a94 <__aeabi_fdiv+0x18>
 80a2b68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2b6c:	ea92 0f0c 	teq	r2, ip
 80a2b70:	d108      	bne.n	80a2b84 <__aeabi_fdiv+0x108>
 80a2b72:	0242      	lsls	r2, r0, #9
 80a2b74:	f47f af7d 	bne.w	80a2a72 <__aeabi_fmul+0x15e>
 80a2b78:	ea93 0f0c 	teq	r3, ip
 80a2b7c:	f47f af70 	bne.w	80a2a60 <__aeabi_fmul+0x14c>
 80a2b80:	4608      	mov	r0, r1
 80a2b82:	e776      	b.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2b84:	ea93 0f0c 	teq	r3, ip
 80a2b88:	d104      	bne.n	80a2b94 <__aeabi_fdiv+0x118>
 80a2b8a:	024b      	lsls	r3, r1, #9
 80a2b8c:	f43f af4c 	beq.w	80a2a28 <__aeabi_fmul+0x114>
 80a2b90:	4608      	mov	r0, r1
 80a2b92:	e76e      	b.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2b94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2b98:	bf18      	it	ne
 80a2b9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2b9e:	d1ca      	bne.n	80a2b36 <__aeabi_fdiv+0xba>
 80a2ba0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2ba4:	f47f af5c 	bne.w	80a2a60 <__aeabi_fmul+0x14c>
 80a2ba8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2bac:	f47f af3c 	bne.w	80a2a28 <__aeabi_fmul+0x114>
 80a2bb0:	e75f      	b.n	80a2a72 <__aeabi_fmul+0x15e>
 80a2bb2:	bf00      	nop

080a2bb4 <__gesf2>:
 80a2bb4:	f04f 3cff 	mov.w	ip, #4294967295
 80a2bb8:	e006      	b.n	80a2bc8 <__cmpsf2+0x4>
 80a2bba:	bf00      	nop

080a2bbc <__lesf2>:
 80a2bbc:	f04f 0c01 	mov.w	ip, #1
 80a2bc0:	e002      	b.n	80a2bc8 <__cmpsf2+0x4>
 80a2bc2:	bf00      	nop

080a2bc4 <__cmpsf2>:
 80a2bc4:	f04f 0c01 	mov.w	ip, #1
 80a2bc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2bd8:	bf18      	it	ne
 80a2bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2bde:	d011      	beq.n	80a2c04 <__cmpsf2+0x40>
 80a2be0:	b001      	add	sp, #4
 80a2be2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2be6:	bf18      	it	ne
 80a2be8:	ea90 0f01 	teqne	r0, r1
 80a2bec:	bf58      	it	pl
 80a2bee:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2bf2:	bf88      	it	hi
 80a2bf4:	17c8      	asrhi	r0, r1, #31
 80a2bf6:	bf38      	it	cc
 80a2bf8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2bfc:	bf18      	it	ne
 80a2bfe:	f040 0001 	orrne.w	r0, r0, #1
 80a2c02:	4770      	bx	lr
 80a2c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2c08:	d102      	bne.n	80a2c10 <__cmpsf2+0x4c>
 80a2c0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2c0e:	d105      	bne.n	80a2c1c <__cmpsf2+0x58>
 80a2c10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2c14:	d1e4      	bne.n	80a2be0 <__cmpsf2+0x1c>
 80a2c16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2c1a:	d0e1      	beq.n	80a2be0 <__cmpsf2+0x1c>
 80a2c1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2c20:	4770      	bx	lr
 80a2c22:	bf00      	nop

080a2c24 <__aeabi_cfrcmple>:
 80a2c24:	4684      	mov	ip, r0
 80a2c26:	4608      	mov	r0, r1
 80a2c28:	4661      	mov	r1, ip
 80a2c2a:	e7ff      	b.n	80a2c2c <__aeabi_cfcmpeq>

080a2c2c <__aeabi_cfcmpeq>:
 80a2c2c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2c2e:	f7ff ffc9 	bl	80a2bc4 <__cmpsf2>
 80a2c32:	2800      	cmp	r0, #0
 80a2c34:	bf48      	it	mi
 80a2c36:	f110 0f00 	cmnmi.w	r0, #0
 80a2c3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2c3c <__aeabi_fcmpeq>:
 80a2c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c40:	f7ff fff4 	bl	80a2c2c <__aeabi_cfcmpeq>
 80a2c44:	bf0c      	ite	eq
 80a2c46:	2001      	moveq	r0, #1
 80a2c48:	2000      	movne	r0, #0
 80a2c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c4e:	bf00      	nop

080a2c50 <__aeabi_fcmplt>:
 80a2c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c54:	f7ff ffea 	bl	80a2c2c <__aeabi_cfcmpeq>
 80a2c58:	bf34      	ite	cc
 80a2c5a:	2001      	movcc	r0, #1
 80a2c5c:	2000      	movcs	r0, #0
 80a2c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c62:	bf00      	nop

080a2c64 <__aeabi_fcmple>:
 80a2c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c68:	f7ff ffe0 	bl	80a2c2c <__aeabi_cfcmpeq>
 80a2c6c:	bf94      	ite	ls
 80a2c6e:	2001      	movls	r0, #1
 80a2c70:	2000      	movhi	r0, #0
 80a2c72:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c76:	bf00      	nop

080a2c78 <__aeabi_fcmpge>:
 80a2c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c7c:	f7ff ffd2 	bl	80a2c24 <__aeabi_cfrcmple>
 80a2c80:	bf94      	ite	ls
 80a2c82:	2001      	movls	r0, #1
 80a2c84:	2000      	movhi	r0, #0
 80a2c86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c8a:	bf00      	nop

080a2c8c <__aeabi_fcmpgt>:
 80a2c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c90:	f7ff ffc8 	bl	80a2c24 <__aeabi_cfrcmple>
 80a2c94:	bf34      	ite	cc
 80a2c96:	2001      	movcc	r0, #1
 80a2c98:	2000      	movcs	r0, #0
 80a2c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c9e:	bf00      	nop

080a2ca0 <__aeabi_f2uiz>:
 80a2ca0:	0042      	lsls	r2, r0, #1
 80a2ca2:	d20e      	bcs.n	80a2cc2 <__aeabi_f2uiz+0x22>
 80a2ca4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2ca8:	d30b      	bcc.n	80a2cc2 <__aeabi_f2uiz+0x22>
 80a2caa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2cae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2cb2:	d409      	bmi.n	80a2cc8 <__aeabi_f2uiz+0x28>
 80a2cb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2cbc:	fa23 f002 	lsr.w	r0, r3, r2
 80a2cc0:	4770      	bx	lr
 80a2cc2:	f04f 0000 	mov.w	r0, #0
 80a2cc6:	4770      	bx	lr
 80a2cc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2ccc:	d101      	bne.n	80a2cd2 <__aeabi_f2uiz+0x32>
 80a2cce:	0242      	lsls	r2, r0, #9
 80a2cd0:	d102      	bne.n	80a2cd8 <__aeabi_f2uiz+0x38>
 80a2cd2:	f04f 30ff 	mov.w	r0, #4294967295
 80a2cd6:	4770      	bx	lr
 80a2cd8:	f04f 0000 	mov.w	r0, #0
 80a2cdc:	4770      	bx	lr
 80a2cde:	bf00      	nop

080a2ce0 <__cxa_atexit>:
 80a2ce0:	b510      	push	{r4, lr}
 80a2ce2:	4c05      	ldr	r4, [pc, #20]	; (80a2cf8 <__cxa_atexit+0x18>)
 80a2ce4:	4613      	mov	r3, r2
 80a2ce6:	b12c      	cbz	r4, 80a2cf4 <__cxa_atexit+0x14>
 80a2ce8:	460a      	mov	r2, r1
 80a2cea:	4601      	mov	r1, r0
 80a2cec:	2002      	movs	r0, #2
 80a2cee:	f3af 8000 	nop.w
 80a2cf2:	bd10      	pop	{r4, pc}
 80a2cf4:	4620      	mov	r0, r4
 80a2cf6:	bd10      	pop	{r4, pc}
 80a2cf8:	00000000 	.word	0x00000000

080a2cfc <memcpy>:
 80a2cfc:	b510      	push	{r4, lr}
 80a2cfe:	1e43      	subs	r3, r0, #1
 80a2d00:	440a      	add	r2, r1
 80a2d02:	4291      	cmp	r1, r2
 80a2d04:	d004      	beq.n	80a2d10 <memcpy+0x14>
 80a2d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2d0e:	e7f8      	b.n	80a2d02 <memcpy+0x6>
 80a2d10:	bd10      	pop	{r4, pc}

080a2d12 <memset>:
 80a2d12:	4603      	mov	r3, r0
 80a2d14:	4402      	add	r2, r0
 80a2d16:	4293      	cmp	r3, r2
 80a2d18:	d002      	beq.n	80a2d20 <memset+0xe>
 80a2d1a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2d1e:	e7fa      	b.n	80a2d16 <memset+0x4>
 80a2d20:	4770      	bx	lr

080a2d22 <strlen>:
 80a2d22:	4603      	mov	r3, r0
 80a2d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d28:	2a00      	cmp	r2, #0
 80a2d2a:	d1fb      	bne.n	80a2d24 <strlen+0x2>
 80a2d2c:	1a18      	subs	r0, r3, r0
 80a2d2e:	3801      	subs	r0, #1
 80a2d30:	4770      	bx	lr

080a2d32 <link_code_end>:
	...

080a2d34 <dynalib_user>:
 80a2d34:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2d44:	0000 0000                                   ....

080a2d48 <_ZTV5Timer>:
	...
 80a2d50:	01f9 080a 0239 080a 018d 080a 6573 7574     ....9.......setu
 80a2d60:	5370 6375 6563 7373 253d 0064 6157 7469     pSuccess=%d.Wait
 80a2d70:	6e69 2067 6f66 2072 7453 7261 0074 7453     ing for Start.St
 80a2d80:	7261 6974 676e 6920 206e 2035 6573 6f63     arting in 5 seco
 80a2d90:	646e 2e73 2e2e 4700 214f 0000               nds....GO!..

080a2d9c <_ZTV9LIS3DHI2C>:
	...
 80a2da4:	1309 080a 130b 080a 135f 080a 1317 080a     ........_.......
 80a2db4:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a2dc4:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a2dd4:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a2de4:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a2df4:	6e69 0067                                   ing.

080a2df8 <_ZTV8SPIClass>:
	...
 80a2e00:	18d1 080a 18d3 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a2e10:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a2e20:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a2e30:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a2e40:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a2e50:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a2e60:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a2e70:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a2e80:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a2e90:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a2ea0:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a2eb0:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a2ec0:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a2ed0:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a2ee0:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a2ef0:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a2f00:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a2f10:	0065 0000                                   e...

080a2f14 <_ZTV9IPAddress>:
	...
 80a2f1c:	1c87 080a 1c79 080a 1c7b 080a               ....y...{...

080a2f28 <_ZTV9USBSerial>:
	...
 80a2f30:	1cf1 080a 1d35 080a 1d0f 080a 19d3 080a     ....5...........
 80a2f40:	1d09 080a 1cf3 080a 1cfb 080a 1d2f 080a     ............/...
 80a2f50:	1d03 080a 1ced 080a                         ........

080a2f58 <_ZTV11USARTSerial>:
	...
 80a2f60:	1eb1 080a 1ed5 080a 1ee1 080a 19d3 080a     ................
 80a2f70:	1ebd 080a 1ec9 080a 1ec3 080a 1ecf 080a     ................
 80a2f80:	1eb3 080a 1eb7 080a                         ........

080a2f88 <_ZTV7TwoWire>:
	...
 80a2f90:	1f85 080a 1fcf 080a 1fa7 080a 1f87 080a     ................
 80a2fa0:	1faf 080a 1fb7 080a 1fbf 080a 1fc7 080a     ................

080a2fb0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fb8:	2057 080a                                   W ..

080a2fbc <link_const_variable_data_end>:
 80a2fbc:	080a06b9 	.word	0x080a06b9
 80a2fc0:	080a1305 	.word	0x080a1305
 80a2fc4:	080a1559 	.word	0x080a1559
 80a2fc8:	080a19cd 	.word	0x080a19cd
 80a2fcc:	080a1b1d 	.word	0x080a1b1d
 80a2fd0:	080a1b2d 	.word	0x080a1b2d
 80a2fd4:	080a2061 	.word	0x080a2061
 80a2fd8:	080a2145 	.word	0x080a2145
 80a2fdc:	080a2189 	.word	0x080a2189
 80a2fe0:	080a2205 	.word	0x080a2205
 80a2fe4:	080a2289 	.word	0x080a2289
 80a2fe8:	080a234d 	.word	0x080a234d
 80a2fec:	080a2411 	.word	0x080a2411
