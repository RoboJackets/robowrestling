
c:/src/battlebots-sumo/v3/diagnostic/target/diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003028  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3040  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000028  20000300  080a3044  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000628  20000328  20000328  00030328  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a306c  080a306c  0002306c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3094  080a3094  00023094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008a5e4  00000000  00000000  00023098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e9ff  00000000  00000000  000ad67c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f8c6  00000000  00000000  000bc07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b18  00000000  00000000  000cb941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000028b8  00000000  00000000  000cd459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023d85  00000000  00000000  000cfd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020bdb  00000000  00000000  000f3a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000857f9  00000000  00000000  00114671  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a9a4  00000000  00000000  00199e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	7c 2d 0a 08                                         |-..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe89 	bl	80a2d44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe8e 	bl	80a2d5a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3044 	.word	0x080a3044
 80a004c:	20000328 	.word	0x20000328
 80a0050:	20000328 	.word	0x20000328
 80a0054:	20000950 	.word	0x20000950
 80a0058:	20000950 	.word	0x20000950

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fe0b 	bl	80a1c78 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3004 	.word	0x080a3004
 80a0084:	080a3038 	.word	0x080a3038

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 ba72 	b.w	80a0570 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa9f 	bl	80a05d0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bdad 	b.w	80a1bf4 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bc0b 	b.w	80a18b4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00ae:	6803      	ldr	r3, [r0, #0]
 80a00b0:	4718      	bx	r3

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z5FLISRv>:
LIS3DHSample sample;
Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel);
LIS3DHI2C accel(Wire, 0, WKP);
int lastPrintSample = 0; // remove for main code**********

void FLISR() {
 80a00cc:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00ce:	4b05      	ldr	r3, [pc, #20]	; (80a00e4 <_Z5FLISRv+0x18>)
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f002 f847 	bl	80a2164 <digitalRead>
 80a00d6:	4b04      	ldr	r3, [pc, #16]	; (80a00e8 <_Z5FLISRv+0x1c>)
 80a00d8:	3000      	adds	r0, #0
 80a00da:	bf18      	it	ne
 80a00dc:	2001      	movne	r0, #1
 80a00de:	7018      	strb	r0, [r3, #0]
 80a00e0:	bd08      	pop	{r3, pc}
 80a00e2:	bf00      	nop
 80a00e4:	2000030c 	.word	0x2000030c
 80a00e8:	20000321 	.word	0x20000321

080a00ec <_Z5FRISRv>:
}

void FRISR() {
 80a00ec:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00ee:	4b05      	ldr	r3, [pc, #20]	; (80a0104 <_Z5FRISRv+0x18>)
 80a00f0:	8818      	ldrh	r0, [r3, #0]
 80a00f2:	f002 f837 	bl	80a2164 <digitalRead>
 80a00f6:	4b04      	ldr	r3, [pc, #16]	; (80a0108 <_Z5FRISRv+0x1c>)
 80a00f8:	3000      	adds	r0, #0
 80a00fa:	bf18      	it	ne
 80a00fc:	2001      	movne	r0, #1
 80a00fe:	7018      	strb	r0, [r3, #0]
 80a0100:	bd08      	pop	{r3, pc}
 80a0102:	bf00      	nop
 80a0104:	20000314 	.word	0x20000314
 80a0108:	20000310 	.word	0x20000310

080a010c <_Z5BLISRv>:
}

void BLISR() {
 80a010c:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a010e:	4b05      	ldr	r3, [pc, #20]	; (80a0124 <_Z5BLISRv+0x18>)
 80a0110:	8818      	ldrh	r0, [r3, #0]
 80a0112:	f002 f827 	bl	80a2164 <digitalRead>
 80a0116:	4b04      	ldr	r3, [pc, #16]	; (80a0128 <_Z5BLISRv+0x1c>)
 80a0118:	3000      	adds	r0, #0
 80a011a:	bf18      	it	ne
 80a011c:	2001      	movne	r0, #1
 80a011e:	7018      	strb	r0, [r3, #0]
 80a0120:	bd08      	pop	{r3, pc}
 80a0122:	bf00      	nop
 80a0124:	20000318 	.word	0x20000318
 80a0128:	20000320 	.word	0x20000320

080a012c <_Z5BRISRv>:
}

void BRISR() {
 80a012c:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a012e:	4b05      	ldr	r3, [pc, #20]	; (80a0144 <_Z5BRISRv+0x18>)
 80a0130:	8818      	ldrh	r0, [r3, #0]
 80a0132:	f002 f817 	bl	80a2164 <digitalRead>
 80a0136:	4b04      	ldr	r3, [pc, #16]	; (80a0148 <_Z5BRISRv+0x1c>)
 80a0138:	3000      	adds	r0, #0
 80a013a:	bf18      	it	ne
 80a013c:	2001      	movne	r0, #1
 80a013e:	7018      	strb	r0, [r3, #0]
 80a0140:	bd08      	pop	{r3, pc}
 80a0142:	bf00      	nop
 80a0144:	20000300 	.word	0x20000300
 80a0148:	20000311 	.word	0x20000311

080a014c <_Z5RSISRv>:
}

void RSISR() {
 80a014c:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a014e:	4b05      	ldr	r3, [pc, #20]	; (80a0164 <_Z5RSISRv+0x18>)
 80a0150:	8818      	ldrh	r0, [r3, #0]
 80a0152:	f002 f807 	bl	80a2164 <digitalRead>
 80a0156:	4b04      	ldr	r3, [pc, #16]	; (80a0168 <_Z5RSISRv+0x1c>)
 80a0158:	3000      	adds	r0, #0
 80a015a:	bf18      	it	ne
 80a015c:	2001      	movne	r0, #1
 80a015e:	7018      	strb	r0, [r3, #0]
 80a0160:	bd08      	pop	{r3, pc}
 80a0162:	bf00      	nop
 80a0164:	2000031c 	.word	0x2000031c
 80a0168:	2000032c 	.word	0x2000032c

080a016c <_Z8getAccelv>:
    // Write stop command
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
}

void getAccel() {
 80a016c:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a016e:	4c05      	ldr	r4, [pc, #20]	; (80a0184 <_Z8getAccelv+0x18>)
 80a0170:	4805      	ldr	r0, [pc, #20]	; (80a0188 <_Z8getAccelv+0x1c>)
 80a0172:	4621      	mov	r1, r4
 80a0174:	f001 f92c 	bl	80a13d0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a0178:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a017c:	4b03      	ldr	r3, [pc, #12]	; (80a018c <_Z8getAccelv+0x20>)
 80a017e:	601a      	str	r2, [r3, #0]
 80a0180:	bd10      	pop	{r4, pc}
 80a0182:	bf00      	nop
 80a0184:	200003c4 	.word	0x200003c4
 80a0188:	2000034c 	.word	0x2000034c
 80a018c:	20000360 	.word	0x20000360

080a0190 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0190:	b510      	push	{r4, lr}
    {
		running = true;
 80a0192:	2301      	movs	r3, #1
 80a0194:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0196:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0198:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a019c:	6983      	ldr	r3, [r0, #24]
 80a019e:	300c      	adds	r0, #12
 80a01a0:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	7123      	strb	r3, [r4, #4]
 80a01a6:	bd10      	pop	{r4, pc}

080a01a8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a01a8:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a01aa:	2300      	movs	r3, #0
 80a01ac:	a902      	add	r1, sp, #8
 80a01ae:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a01b2:	f001 fa1d 	bl	80a15f0 <os_timer_get_id>
 80a01b6:	b920      	cbnz	r0, 80a01c2 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a01b8:	9801      	ldr	r0, [sp, #4]
 80a01ba:	b110      	cbz	r0, 80a01c2 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a01bc:	6803      	ldr	r3, [r0, #0]
 80a01be:	689b      	ldr	r3, [r3, #8]
 80a01c0:	4798      	blx	r3
        }
    }
 80a01c2:	b003      	add	sp, #12
 80a01c4:	f85d fb04 	ldr.w	pc, [sp], #4

080a01c8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01c8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01ca:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01cc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01ce:	b113      	cbz	r3, 80a01d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01d0:	2203      	movs	r2, #3
 80a01d2:	4601      	mov	r1, r0
 80a01d4:	4798      	blx	r3
    }
 80a01d6:	4620      	mov	r0, r4
 80a01d8:	bd10      	pop	{r4, pc}

080a01da <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a01da:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a01dc:	6880      	ldr	r0, [r0, #8]
 80a01de:	2300      	movs	r3, #0
 80a01e0:	b138      	cbz	r0, 80a01f2 <_ZN5Timer5_stopEjb+0x18>
 80a01e2:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a01e6:	2102      	movs	r1, #2
 80a01e8:	f001 fa0a 	bl	80a1600 <os_timer_change>
 80a01ec:	fab0 f080 	clz	r0, r0
 80a01f0:	0940      	lsrs	r0, r0, #5
    }
 80a01f2:	b003      	add	sp, #12
 80a01f4:	f85d fb04 	ldr.w	pc, [sp], #4

080a01f8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a01f8:	b538      	push	{r3, r4, r5, lr}
 80a01fa:	4b0e      	ldr	r3, [pc, #56]	; (80a0234 <_ZN5TimerD1Ev+0x3c>)
 80a01fc:	4604      	mov	r4, r0
 80a01fe:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0200:	6883      	ldr	r3, [r0, #8]
 80a0202:	b18b      	cbz	r3, 80a0228 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0204:	2200      	movs	r2, #0
 80a0206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a020a:	f7ff ffe6 	bl	80a01da <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a020e:	7923      	ldrb	r3, [r4, #4]
 80a0210:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0214:	b11b      	cbz	r3, 80a021e <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a0216:	2001      	movs	r0, #1
 80a0218:	f001 fc94 	bl	80a1b44 <delay>
 80a021c:	e7f7      	b.n	80a020e <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a021e:	4629      	mov	r1, r5
 80a0220:	68a0      	ldr	r0, [r4, #8]
 80a0222:	f001 f9dd 	bl	80a15e0 <os_timer_destroy>
            handle = nullptr;
 80a0226:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0228:	f104 000c 	add.w	r0, r4, #12
 80a022c:	f7ff ffcc 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0230:	4620      	mov	r0, r4
 80a0232:	bd38      	pop	{r3, r4, r5, pc}
 80a0234:	080a2d98 	.word	0x080a2d98

080a0238 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0238:	b510      	push	{r4, lr}
 80a023a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a023c:	f7ff ffdc 	bl	80a01f8 <_ZN5TimerD1Ev>
 80a0240:	4620      	mov	r0, r4
 80a0242:	f7ff ff2a 	bl	80a009a <_ZdlPv>
 80a0246:	4620      	mov	r0, r4
 80a0248:	bd10      	pop	{r4, pc}
	...

080a024c <_Z8tof_initv>:

void RSISR() {
    RSflag = digitalRead(RS);
}

void tof_init() {
 80a024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0250:	2101      	movs	r1, #1
 80a0252:	200a      	movs	r0, #10
 80a0254:	f001 ff5c 	bl	80a2110 <pinMode>
    pinMode(A1, OUTPUT);
 80a0258:	2101      	movs	r1, #1
 80a025a:	200b      	movs	r0, #11
 80a025c:	f001 ff58 	bl	80a2110 <pinMode>
    pinMode(A2, OUTPUT);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200c      	movs	r0, #12
 80a0264:	f001 ff54 	bl	80a2110 <pinMode>
    pinMode(A3, OUTPUT);
 80a0268:	2101      	movs	r1, #1
 80a026a:	200d      	movs	r0, #13
 80a026c:	f001 ff50 	bl	80a2110 <pinMode>
    digitalWrite(A0, LOW);
 80a0270:	2100      	movs	r1, #0
 80a0272:	200a      	movs	r0, #10
 80a0274:	f001 ff5d 	bl	80a2132 <digitalWrite>
    digitalWrite(A1, LOW);
 80a0278:	2100      	movs	r1, #0
 80a027a:	200b      	movs	r0, #11
 80a027c:	f001 ff59 	bl	80a2132 <digitalWrite>
    digitalWrite(A2, LOW);
 80a0280:	2100      	movs	r1, #0
 80a0282:	200c      	movs	r0, #12
 80a0284:	f001 ff55 	bl	80a2132 <digitalWrite>
    digitalWrite(A3, LOW);
 80a0288:	2100      	movs	r1, #0
 80a028a:	200d      	movs	r0, #13
 80a028c:	f001 ff51 	bl	80a2132 <digitalWrite>
    delay(500);
 80a0290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0294:	f001 fc56 	bl	80a1b44 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a0298:	f001 ffb2 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a029c:	4940      	ldr	r1, [pc, #256]	; (80a03a0 <_Z8tof_initv+0x154>)
 80a029e:	f001 fed3 	bl	80a2048 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a02a2:	f001 ffad 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a02a6:	f001 fed3 	bl	80a2050 <_ZN7TwoWire5beginEv>

    delay(10);
 80a02aa:	200a      	movs	r0, #10
 80a02ac:	f001 fc4a 	bl	80a1b44 <delay>
    digitalWrite(A0, HIGH);
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	200a      	movs	r0, #10
 80a02b4:	f001 ff3d 	bl	80a2132 <digitalWrite>
    digitalWrite(A1, HIGH);
 80a02b8:	2101      	movs	r1, #1
 80a02ba:	200b      	movs	r0, #11
 80a02bc:	f001 ff39 	bl	80a2132 <digitalWrite>
    digitalWrite(A2, HIGH);
 80a02c0:	2101      	movs	r1, #1
 80a02c2:	200c      	movs	r0, #12
 80a02c4:	f001 ff35 	bl	80a2132 <digitalWrite>
    digitalWrite(A3, HIGH);
 80a02c8:	2101      	movs	r1, #1
 80a02ca:	200d      	movs	r0, #13
 80a02cc:	f001 ff31 	bl	80a2132 <digitalWrite>
    delay(10);
 80a02d0:	200a      	movs	r0, #10
 80a02d2:	f001 fc37 	bl	80a1b44 <delay>
    digitalWrite(A1, LOW);
 80a02d6:	2100      	movs	r1, #0
 80a02d8:	200b      	movs	r0, #11
 80a02da:	f001 ff2a 	bl	80a2132 <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a02de:	4f31      	ldr	r7, [pc, #196]	; (80a03a4 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a02e0:	2100      	movs	r1, #0
 80a02e2:	200c      	movs	r0, #12
 80a02e4:	f001 ff25 	bl	80a2132 <digitalWrite>
    digitalWrite(A3, LOW);
 80a02e8:	2100      	movs	r1, #0
 80a02ea:	200d      	movs	r0, #13
 80a02ec:	f001 ff21 	bl	80a2132 <digitalWrite>
    sensor0.init();
 80a02f0:	2101      	movs	r1, #1
 80a02f2:	4638      	mov	r0, r7
 80a02f4:	f000 fd6a 	bl	80a0dcc <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a02f8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a02fc:	2130      	movs	r1, #48	; 0x30
 80a02fe:	4638      	mov	r0, r7
 80a0300:	f000 fa41 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0304:	4e28      	ldr	r6, [pc, #160]	; (80a03a8 <_Z8tof_initv+0x15c>)
 80a0306:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a030a:	200a      	movs	r0, #10
 80a030c:	f001 fc1a 	bl	80a1b44 <delay>
    digitalWrite(A1, HIGH);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200b      	movs	r0, #11
 80a0314:	f001 ff0d 	bl	80a2132 <digitalWrite>
    sensor1.init();
 80a0318:	2101      	movs	r1, #1
 80a031a:	4630      	mov	r0, r6
 80a031c:	f000 fd56 	bl	80a0dcc <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0320:	2131      	movs	r1, #49	; 0x31
 80a0322:	4630      	mov	r0, r6
 80a0324:	f000 fa2f 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0328:	4d20      	ldr	r5, [pc, #128]	; (80a03ac <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a032a:	200a      	movs	r0, #10
 80a032c:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0330:	f001 fc08 	bl	80a1b44 <delay>
    digitalWrite(A2, HIGH);
 80a0334:	2101      	movs	r1, #1
 80a0336:	200c      	movs	r0, #12
 80a0338:	f001 fefb 	bl	80a2132 <digitalWrite>
    sensor2.init();
 80a033c:	2101      	movs	r1, #1
 80a033e:	4628      	mov	r0, r5
 80a0340:	f000 fd44 	bl	80a0dcc <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0344:	2132      	movs	r1, #50	; 0x32
 80a0346:	4628      	mov	r0, r5
 80a0348:	f000 fa1d 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a034c:	4c18      	ldr	r4, [pc, #96]	; (80a03b0 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a034e:	200a      	movs	r0, #10
 80a0350:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0354:	f001 fbf6 	bl	80a1b44 <delay>
    digitalWrite(A3, HIGH);
 80a0358:	2101      	movs	r1, #1
 80a035a:	200d      	movs	r0, #13
 80a035c:	f001 fee9 	bl	80a2132 <digitalWrite>
    sensor3.init();
 80a0360:	2101      	movs	r1, #1
 80a0362:	4620      	mov	r0, r4
 80a0364:	f000 fd32 	bl	80a0dcc <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0368:	2133      	movs	r1, #51	; 0x33
 80a036a:	4620      	mov	r0, r4
 80a036c:	f000 fa0b 	bl	80a0786 <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0370:	200a      	movs	r0, #10
 80a0372:	f8c4 8004 	str.w	r8, [r4, #4]
 80a0376:	f001 fbe5 	bl	80a1b44 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a037a:	4638      	mov	r0, r7
 80a037c:	210a      	movs	r1, #10
 80a037e:	f000 fb1e 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0382:	4630      	mov	r0, r6
 80a0384:	210a      	movs	r1, #10
 80a0386:	f000 fb1a 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a038a:	4628      	mov	r0, r5
 80a038c:	210a      	movs	r1, #10
 80a038e:	f000 fb16 	bl	80a09be <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a0392:	4620      	mov	r0, r4
}
 80a0394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a0398:	210a      	movs	r1, #10
 80a039a:	f000 bb10 	b.w	80a09be <_ZN7VL53L0X15startContinuousEm>
 80a039e:	bf00      	nop
 80a03a0:	000186a0 	.word	0x000186a0
 80a03a4:	20000364 	.word	0x20000364
 80a03a8:	2000037c 	.word	0x2000037c
 80a03ac:	20000394 	.word	0x20000394
 80a03b0:	200003ac 	.word	0x200003ac

080a03b4 <_Z10accel_initv>:
}

void accel_init() {
 80a03b4:	b510      	push	{r4, lr}
 80a03b6:	b086      	sub	sp, #24
  LIS3DHConfig config;
 80a03b8:	a803      	add	r0, sp, #12
 80a03ba:	f000 ffdc 	bl	80a1376 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a03be:	2150      	movs	r1, #80	; 0x50
 80a03c0:	a803      	add	r0, sp, #12
 80a03c2:	f000 ffe5 	bl	80a1390 <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a03c6:	a903      	add	r1, sp, #12
 80a03c8:	480e      	ldr	r0, [pc, #56]	; (80a0404 <_Z10accel_initv+0x50>)
 80a03ca:	f001 f839 	bl	80a1440 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a03ce:	4604      	mov	r4, r0
  Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a03d0:	f001 fd08 	bl	80a1de4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a03d4:	4623      	mov	r3, r4
 80a03d6:	4a0c      	ldr	r2, [pc, #48]	; (80a0408 <_Z10accel_initv+0x54>)
 80a03d8:	2101      	movs	r1, #1
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a03da:	4c0c      	ldr	r4, [pc, #48]	; (80a040c <_Z10accel_initv+0x58>)
 80a03dc:	f001 fb66 	bl	80a1aac <_ZN5Print11printf_implEbPKcz>
 80a03e0:	2200      	movs	r2, #0
 80a03e2:	4611      	mov	r1, r2
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	f7ff fef8 	bl	80a01da <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a03ea:	68a0      	ldr	r0, [r4, #8]
 80a03ec:	b140      	cbz	r0, 80a0400 <_Z10accel_initv+0x4c>
 80a03ee:	2300      	movs	r3, #0
 80a03f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a03f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a03f8:	4619      	mov	r1, r3
 80a03fa:	461a      	mov	r2, r3
 80a03fc:	f001 f900 	bl	80a1600 <os_timer_change>

  accelTimer.start();
}
 80a0400:	b006      	add	sp, #24
 80a0402:	bd10      	pop	{r4, pc}
 80a0404:	2000034c 	.word	0x2000034c
 80a0408:	080a2da4 	.word	0x080a2da4
 80a040c:	20000330 	.word	0x20000330

080a0410 <_Z11others_initv>:

void others_init() {
 80a0410:	b508      	push	{r3, lr}
  // Line sensors
  pinMode(FL, INPUT);
 80a0412:	4b15      	ldr	r3, [pc, #84]	; (80a0468 <_Z11others_initv+0x58>)
 80a0414:	2100      	movs	r1, #0
 80a0416:	8818      	ldrh	r0, [r3, #0]
 80a0418:	f001 fe7a 	bl	80a2110 <pinMode>
  pinMode(FR, INPUT);
 80a041c:	4b13      	ldr	r3, [pc, #76]	; (80a046c <_Z11others_initv+0x5c>)
 80a041e:	2100      	movs	r1, #0
 80a0420:	8818      	ldrh	r0, [r3, #0]
 80a0422:	f001 fe75 	bl	80a2110 <pinMode>
  pinMode(BL, INPUT);
 80a0426:	4b12      	ldr	r3, [pc, #72]	; (80a0470 <_Z11others_initv+0x60>)
 80a0428:	2100      	movs	r1, #0
 80a042a:	8818      	ldrh	r0, [r3, #0]
 80a042c:	f001 fe70 	bl	80a2110 <pinMode>
  pinMode(BR, INPUT);
 80a0430:	4b10      	ldr	r3, [pc, #64]	; (80a0474 <_Z11others_initv+0x64>)
 80a0432:	2100      	movs	r1, #0
 80a0434:	8818      	ldrh	r0, [r3, #0]
 80a0436:	f001 fe6b 	bl	80a2110 <pinMode>
  // Remote switch
  pinMode(RS, INPUT);
 80a043a:	4b0f      	ldr	r3, [pc, #60]	; (80a0478 <_Z11others_initv+0x68>)
 80a043c:	2100      	movs	r1, #0
 80a043e:	8818      	ldrh	r0, [r3, #0]
 80a0440:	f001 fe66 	bl	80a2110 <pinMode>
  // Car ESCs
  pinMode(Lmotor, OUTPUT);
 80a0444:	4b0d      	ldr	r3, [pc, #52]	; (80a047c <_Z11others_initv+0x6c>)
 80a0446:	2101      	movs	r1, #1
 80a0448:	8818      	ldrh	r0, [r3, #0]
 80a044a:	f001 fe61 	bl	80a2110 <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a044e:	4b0c      	ldr	r3, [pc, #48]	; (80a0480 <_Z11others_initv+0x70>)
 80a0450:	2101      	movs	r1, #1
 80a0452:	8818      	ldrh	r0, [r3, #0]
 80a0454:	f001 fe5c 	bl	80a2110 <pinMode>
  // Serial monitor
  Serial.begin(9600);
 80a0458:	f001 fcc4 	bl	80a1de4 <_Z16_fetch_usbserialv>
} 
 80a045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(RS, INPUT);
  // Car ESCs
  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);
  // Serial monitor
  Serial.begin(9600);
 80a0460:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0464:	f001 bca4 	b.w	80a1db0 <_ZN9USBSerial5beginEl>
 80a0468:	2000030c 	.word	0x2000030c
 80a046c:	20000314 	.word	0x20000314
 80a0470:	20000318 	.word	0x20000318
 80a0474:	20000300 	.word	0x20000300
 80a0478:	2000031c 	.word	0x2000031c
 80a047c:	20000308 	.word	0x20000308
 80a0480:	20000304 	.word	0x20000304

080a0484 <_Z14interrupt_initv>:
} 

void interrupt_init() {
 80a0484:	b513      	push	{r0, r1, r4, lr}
  // Line sensors
  attachInterrupt(FL, FLISR, CHANGE);
 80a0486:	4b18      	ldr	r3, [pc, #96]	; (80a04e8 <_Z14interrupt_initv+0x64>)
 80a0488:	2400      	movs	r4, #0
 80a048a:	8818      	ldrh	r0, [r3, #0]
 80a048c:	4622      	mov	r2, r4
 80a048e:	9400      	str	r4, [sp, #0]
 80a0490:	f04f 33ff 	mov.w	r3, #4294967295
 80a0494:	4915      	ldr	r1, [pc, #84]	; (80a04ec <_Z14interrupt_initv+0x68>)
 80a0496:	f001 fd09 	bl	80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR, FRISR, CHANGE);
 80a049a:	4b15      	ldr	r3, [pc, #84]	; (80a04f0 <_Z14interrupt_initv+0x6c>)
 80a049c:	4622      	mov	r2, r4
 80a049e:	8818      	ldrh	r0, [r3, #0]
 80a04a0:	4914      	ldr	r1, [pc, #80]	; (80a04f4 <_Z14interrupt_initv+0x70>)
 80a04a2:	9400      	str	r4, [sp, #0]
 80a04a4:	f04f 33ff 	mov.w	r3, #4294967295
 80a04a8:	f001 fd00 	bl	80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL, BLISR, CHANGE);
 80a04ac:	4b12      	ldr	r3, [pc, #72]	; (80a04f8 <_Z14interrupt_initv+0x74>)
 80a04ae:	4622      	mov	r2, r4
 80a04b0:	8818      	ldrh	r0, [r3, #0]
 80a04b2:	4912      	ldr	r1, [pc, #72]	; (80a04fc <_Z14interrupt_initv+0x78>)
 80a04b4:	9400      	str	r4, [sp, #0]
 80a04b6:	f04f 33ff 	mov.w	r3, #4294967295
 80a04ba:	f001 fcf7 	bl	80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR, BRISR, CHANGE);
 80a04be:	4b10      	ldr	r3, [pc, #64]	; (80a0500 <_Z14interrupt_initv+0x7c>)
 80a04c0:	4622      	mov	r2, r4
 80a04c2:	8818      	ldrh	r0, [r3, #0]
 80a04c4:	490f      	ldr	r1, [pc, #60]	; (80a0504 <_Z14interrupt_initv+0x80>)
 80a04c6:	9400      	str	r4, [sp, #0]
 80a04c8:	f04f 33ff 	mov.w	r3, #4294967295
 80a04cc:	f001 fcee 	bl	80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>
  // Remote switch
  attachInterrupt(RS, RSISR, CHANGE);
 80a04d0:	4b0d      	ldr	r3, [pc, #52]	; (80a0508 <_Z14interrupt_initv+0x84>)
 80a04d2:	4622      	mov	r2, r4
 80a04d4:	8818      	ldrh	r0, [r3, #0]
 80a04d6:	490d      	ldr	r1, [pc, #52]	; (80a050c <_Z14interrupt_initv+0x88>)
 80a04d8:	9400      	str	r4, [sp, #0]
 80a04da:	f04f 33ff 	mov.w	r3, #4294967295
 80a04de:	f001 fce5 	bl	80a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a04e2:	b002      	add	sp, #8
 80a04e4:	bd10      	pop	{r4, pc}
 80a04e6:	bf00      	nop
 80a04e8:	2000030c 	.word	0x2000030c
 80a04ec:	080a00cd 	.word	0x080a00cd
 80a04f0:	20000314 	.word	0x20000314
 80a04f4:	080a00ed 	.word	0x080a00ed
 80a04f8:	20000318 	.word	0x20000318
 80a04fc:	080a010d 	.word	0x080a010d
 80a0500:	20000300 	.word	0x20000300
 80a0504:	080a012d 	.word	0x080a012d
 80a0508:	2000031c 	.word	0x2000031c
 80a050c:	080a014d 	.word	0x080a014d

080a0510 <_Z8ESC_initv>:

void ESC_init() {
 80a0510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
 80a0512:	4b13      	ldr	r3, [pc, #76]	; (80a0560 <_Z8ESC_initv+0x50>)
 80a0514:	4d13      	ldr	r5, [pc, #76]	; (80a0564 <_Z8ESC_initv+0x54>)
 80a0516:	2600      	movs	r6, #0
 80a0518:	27b4      	movs	r7, #180	; 0xb4
 80a051a:	8819      	ldrh	r1, [r3, #0]
 80a051c:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0520:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0524:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0528:	4628      	mov	r0, r5
 80a052a:	f001 fa26 	bl	80a197a <_ZN5Servo6attachEtttss>
    RESC.attach(Rmotor);
 80a052e:	4c0e      	ldr	r4, [pc, #56]	; (80a0568 <_Z8ESC_initv+0x58>)
 80a0530:	4b0e      	ldr	r3, [pc, #56]	; (80a056c <_Z8ESC_initv+0x5c>)
 80a0532:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0536:	8819      	ldrh	r1, [r3, #0]
 80a0538:	4620      	mov	r0, r4
 80a053a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a053e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0542:	f001 fa1a 	bl	80a197a <_ZN5Servo6attachEtttss>
    // Write stop command
    LESC.writeMicroseconds(1500);
 80a0546:	4628      	mov	r0, r5
 80a0548:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a054c:	f001 f9e1 	bl	80a1912 <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);
 80a0550:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0554:	4620      	mov	r0, r4
}
 80a0556:	b003      	add	sp, #12
 80a0558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
    RESC.attach(Rmotor);
    // Write stop command
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
 80a055c:	f001 b9d9 	b.w	80a1912 <_ZN5Servo17writeMicrosecondsEt>
 80a0560:	20000308 	.word	0x20000308
 80a0564:	200003cc 	.word	0x200003cc
 80a0568:	200003dc 	.word	0x200003dc
 80a056c:	20000304 	.word	0x20000304

080a0570 <setup>:
  accel.getSample(sample);
  curAccel = sample.x;
}

void setup()
{
 80a0570:	b510      	push	{r4, lr}
  others_init();
 80a0572:	f7ff ff4d 	bl	80a0410 <_Z11others_initv>
  tof_init();
 80a0576:	f7ff fe69 	bl	80a024c <_Z8tof_initv>
  accel_init();
 80a057a:	f7ff ff1b 	bl	80a03b4 <_Z10accel_initv>
  interrupt_init();
 80a057e:	f7ff ff81 	bl	80a0484 <_Z14interrupt_initv>
  ESC_init();
 80a0582:	f7ff ffc5 	bl	80a0510 <_Z8ESC_initv>
  RGB.control(true);  // take control of the on-board LED for debugging
 80a0586:	2001      	movs	r0, #1
 80a0588:	f001 fadf 	bl	80a1b4a <_ZN8RGBClass7controlEb>

  while(!RSflag) {  // initial LOW
 80a058c:	4c0c      	ldr	r4, [pc, #48]	; (80a05c0 <setup+0x50>)
 80a058e:	7823      	ldrb	r3, [r4, #0]
 80a0590:	b92b      	cbnz	r3, 80a059e <setup+0x2e>
    Serial.println("Waiting for Start");
 80a0592:	f001 fc27 	bl	80a1de4 <_Z16_fetch_usbserialv>
 80a0596:	490b      	ldr	r1, [pc, #44]	; (80a05c4 <setup+0x54>)
 80a0598:	f001 fa52 	bl	80a1a40 <_ZN5Print7printlnEPKc>
  accel_init();
  interrupt_init();
  ESC_init();
  RGB.control(true);  // take control of the on-board LED for debugging

  while(!RSflag) {  // initial LOW
 80a059c:	e7f7      	b.n	80a058e <setup+0x1e>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a059e:	f001 fc21 	bl	80a1de4 <_Z16_fetch_usbserialv>
 80a05a2:	4909      	ldr	r1, [pc, #36]	; (80a05c8 <setup+0x58>)
 80a05a4:	f001 fa4c 	bl	80a1a40 <_ZN5Print7printlnEPKc>
  delay(5000);
 80a05a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80a05ac:	f001 faca 	bl	80a1b44 <delay>
  Serial.println("GO!");
 80a05b0:	f001 fc18 	bl	80a1de4 <_Z16_fetch_usbserialv>
}
 80a05b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(!RSflag) {  // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");
 80a05b8:	4904      	ldr	r1, [pc, #16]	; (80a05cc <setup+0x5c>)
 80a05ba:	f001 ba41 	b.w	80a1a40 <_ZN5Print7printlnEPKc>
 80a05be:	bf00      	nop
 80a05c0:	2000032c 	.word	0x2000032c
 80a05c4:	080a2db4 	.word	0x080a2db4
 80a05c8:	080a2dc6 	.word	0x080a2dc6
 80a05cc:	080a2ddf 	.word	0x080a2ddf

080a05d0 <loop>:
}

void loop()
{
 80a05d0:	b508      	push	{r3, lr}

  // Serial.print(" | ");
  // Serial.print("back right:");
  // Serial.print(BRflag);

  if(!FLflag || !FRflag || !BLflag || !BRflag) {
 80a05d2:	4b12      	ldr	r3, [pc, #72]	; (80a061c <loop+0x4c>)
 80a05d4:	781b      	ldrb	r3, [r3, #0]
 80a05d6:	b143      	cbz	r3, 80a05ea <loop+0x1a>
 80a05d8:	4b11      	ldr	r3, [pc, #68]	; (80a0620 <loop+0x50>)
 80a05da:	781b      	ldrb	r3, [r3, #0]
 80a05dc:	b12b      	cbz	r3, 80a05ea <loop+0x1a>
 80a05de:	4b11      	ldr	r3, [pc, #68]	; (80a0624 <loop+0x54>)
 80a05e0:	781b      	ldrb	r3, [r3, #0]
 80a05e2:	b113      	cbz	r3, 80a05ea <loop+0x1a>
 80a05e4:	4b10      	ldr	r3, [pc, #64]	; (80a0628 <loop+0x58>)
 80a05e6:	781b      	ldrb	r3, [r3, #0]
 80a05e8:	b91b      	cbnz	r3, 80a05f2 <loop+0x22>
    RGB.color(255, 255, 255);
 80a05ea:	22ff      	movs	r2, #255	; 0xff
 80a05ec:	4611      	mov	r1, r2
 80a05ee:	4610      	mov	r0, r2
 80a05f0:	e002      	b.n	80a05f8 <loop+0x28>
  } else {
    RGB.color(255, 0, 0);
 80a05f2:	2200      	movs	r2, #0
 80a05f4:	4611      	mov	r1, r2
 80a05f6:	20ff      	movs	r0, #255	; 0xff
 80a05f8:	f001 fab7 	bl	80a1b6a <_ZN8RGBClass5colorEiii>
  // Serial.print(" | ");
  // Serial.print(curAccel);

  // Serial.println();

  if(RSflag == LOW) {
 80a05fc:	4b0b      	ldr	r3, [pc, #44]	; (80a062c <loop+0x5c>)
 80a05fe:	781b      	ldrb	r3, [r3, #0]
 80a0600:	b15b      	cbz	r3, 80a061a <loop+0x4a>
    // LESC.writeMicroseconds(1700);
    // RESC.writeMicroseconds(1700);
  } else {
    LESC.writeMicroseconds(1500);
 80a0602:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0606:	480a      	ldr	r0, [pc, #40]	; (80a0630 <loop+0x60>)
 80a0608:	f001 f983 	bl	80a1912 <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);
  }
  
 80a060c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(RSflag == LOW) {
    // LESC.writeMicroseconds(1700);
    // RESC.writeMicroseconds(1700);
  } else {
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
 80a0610:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0614:	4807      	ldr	r0, [pc, #28]	; (80a0634 <loop+0x64>)
 80a0616:	f001 b97c 	b.w	80a1912 <_ZN5Servo17writeMicrosecondsEt>
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	20000321 	.word	0x20000321
 80a0620:	20000310 	.word	0x20000310
 80a0624:	20000320 	.word	0x20000320
 80a0628:	20000311 	.word	0x20000311
 80a062c:	2000032c 	.word	0x2000032c
 80a0630:	200003cc 	.word	0x200003cc
 80a0634:	200003dc 	.word	0x200003dc

080a0638 <_GLOBAL__sub_I_sensor0>:
  }
  
 80a0638:	b570      	push	{r4, r5, r6, lr}
 80a063a:	b088      	sub	sp, #32
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a063c:	f000 ff68 	bl	80a1510 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a0640:	482c      	ldr	r0, [pc, #176]	; (80a06f4 <_GLOBAL__sub_I_sensor0+0xbc>)
 80a0642:	f000 f87f 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a0646:	482c      	ldr	r0, [pc, #176]	; (80a06f8 <_GLOBAL__sub_I_sensor0+0xc0>)
 80a0648:	f000 f87c 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a064c:	482b      	ldr	r0, [pc, #172]	; (80a06fc <_GLOBAL__sub_I_sensor0+0xc4>)
 80a064e:	f000 f879 	bl	80a0744 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a0652:	482b      	ldr	r0, [pc, #172]	; (80a0700 <_GLOBAL__sub_I_sensor0+0xc8>)
 80a0654:	f000 f876 	bl	80a0744 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a0658:	482a      	ldr	r0, [pc, #168]	; (80a0704 <_GLOBAL__sub_I_sensor0+0xcc>)
 80a065a:	f001 f97a 	bl	80a1952 <_ZN5ServoC1Ev>
Servo RESC;
 80a065e:	482a      	ldr	r0, [pc, #168]	; (80a0708 <_GLOBAL__sub_I_sensor0+0xd0>)
 80a0660:	f001 f977 	bl	80a1952 <_ZN5ServoC1Ev>
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a0664:	2100      	movs	r1, #0
 80a0666:	2001      	movs	r0, #1
 80a0668:	f001 f904 	bl	80a1874 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a066c:	2003      	movs	r0, #3
 80a066e:	f001 f8f1 	bl	80a1854 <set_system_mode>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0672:	4b26      	ldr	r3, [pc, #152]	; (80a070c <_GLOBAL__sub_I_sensor0+0xd4>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0674:	ae04      	add	r6, sp, #16
 80a0676:	9304      	str	r3, [sp, #16]
 80a0678:	aa02      	add	r2, sp, #8
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a067a:	4c25      	ldr	r4, [pc, #148]	; (80a0710 <_GLOBAL__sub_I_sensor0+0xd8>)
 80a067c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0680:	4b24      	ldr	r3, [pc, #144]	; (80a0714 <_GLOBAL__sub_I_sensor0+0xdc>)
 80a0682:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0686:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0688:	f104 030c 	add.w	r3, r4, #12
 80a068c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0690:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0694:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0698:	e883 0003 	stmia.w	r3, {r0, r1}
 80a069c:	4b1e      	ldr	r3, [pc, #120]	; (80a0718 <_GLOBAL__sub_I_sensor0+0xe0>)
 80a069e:	2500      	movs	r5, #0
 80a06a0:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a06a2:	69a3      	ldr	r3, [r4, #24]
 80a06a4:	7125      	strb	r5, [r4, #4]
 80a06a6:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a06a8:	4b1c      	ldr	r3, [pc, #112]	; (80a071c <_GLOBAL__sub_I_sensor0+0xe4>)
 80a06aa:	60a5      	str	r5, [r4, #8]
 80a06ac:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a06ae:	4a1c      	ldr	r2, [pc, #112]	; (80a0720 <_GLOBAL__sub_I_sensor0+0xe8>)
 80a06b0:	4623      	mov	r3, r4
 80a06b2:	2164      	movs	r1, #100	; 0x64
 80a06b4:	9501      	str	r5, [sp, #4]
 80a06b6:	9500      	str	r5, [sp, #0]
 80a06b8:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a06bc:	9506      	str	r5, [sp, #24]
 80a06be:	f000 ff87 	bl	80a15d0 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06c2:	4630      	mov	r0, r6
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
void getAccel();
int curAccel = 0;
LIS3DHSample sample;
Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel);
 80a06c4:	4e17      	ldr	r6, [pc, #92]	; (80a0724 <_GLOBAL__sub_I_sensor0+0xec>)
 80a06c6:	f7ff fd7f 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>
 80a06ca:	4632      	mov	r2, r6
 80a06cc:	4916      	ldr	r1, [pc, #88]	; (80a0728 <_GLOBAL__sub_I_sensor0+0xf0>)
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	f001 fdb6 	bl	80a2240 <__aeabi_atexit>
LIS3DHI2C accel(Wire, 0, WKP);
 80a06d4:	f001 fd94 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a06d8:	4c14      	ldr	r4, [pc, #80]	; (80a072c <_GLOBAL__sub_I_sensor0+0xf4>)
 80a06da:	2311      	movs	r3, #17
 80a06dc:	462a      	mov	r2, r5
 80a06de:	4601      	mov	r1, r0
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	f000 ff09 	bl	80a14f8 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a06e6:	4632      	mov	r2, r6
 80a06e8:	4911      	ldr	r1, [pc, #68]	; (80a0730 <_GLOBAL__sub_I_sensor0+0xf8>)
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	f001 fda8 	bl	80a2240 <__aeabi_atexit>
  } else {
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
  }
  
 80a06f0:	b008      	add	sp, #32
 80a06f2:	bd70      	pop	{r4, r5, r6, pc}
 80a06f4:	20000364 	.word	0x20000364
 80a06f8:	2000037c 	.word	0x2000037c
 80a06fc:	20000394 	.word	0x20000394
 80a0700:	200003ac 	.word	0x200003ac
 80a0704:	200003cc 	.word	0x200003cc
 80a0708:	200003dc 	.word	0x200003dc
 80a070c:	080a016d 	.word	0x080a016d
 80a0710:	20000330 	.word	0x20000330
 80a0714:	080a2d98 	.word	0x080a2d98
 80a0718:	080a00b3 	.word	0x080a00b3
 80a071c:	080a00af 	.word	0x080a00af
 80a0720:	080a01a9 	.word	0x080a01a9
 80a0724:	20000328 	.word	0x20000328
 80a0728:	080a01f9 	.word	0x080a01f9
 80a072c:	2000034c 	.word	0x2000034c
 80a0730:	080a12bd 	.word	0x080a12bd

080a0734 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a0734:	6803      	ldr	r3, [r0, #0]
 80a0736:	b2c9      	uxtb	r1, r1
 80a0738:	689b      	ldr	r3, [r3, #8]
 80a073a:	4718      	bx	r3

080a073c <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a073c:	6803      	ldr	r3, [r0, #0]
 80a073e:	b2c9      	uxtb	r1, r1
 80a0740:	689b      	ldr	r3, [r3, #8]
 80a0742:	4718      	bx	r3

080a0744 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a0744:	2229      	movs	r2, #41	; 0x29
 80a0746:	7042      	strb	r2, [r0, #1]
 80a0748:	2200      	movs	r2, #0
 80a074a:	6042      	str	r2, [r0, #4]
 80a074c:	7202      	strb	r2, [r0, #8]
{
}
 80a074e:	4770      	bx	lr

080a0750 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0750:	b570      	push	{r4, r5, r6, lr}
 80a0752:	4604      	mov	r4, r0
 80a0754:	4615      	mov	r5, r2
 80a0756:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0758:	f001 fd52 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a075c:	7861      	ldrb	r1, [r4, #1]
 80a075e:	f001 fc8e 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0762:	f001 fd4d 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0766:	6803      	ldr	r3, [r0, #0]
 80a0768:	4631      	mov	r1, r6
 80a076a:	689b      	ldr	r3, [r3, #8]
 80a076c:	4798      	blx	r3
  Wire.write(value);
 80a076e:	f001 fd47 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0772:	6803      	ldr	r3, [r0, #0]
 80a0774:	4629      	mov	r1, r5
 80a0776:	689b      	ldr	r3, [r3, #8]
 80a0778:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a077a:	f001 fd41 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a077e:	f001 fc86 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a0782:	7020      	strb	r0, [r4, #0]
 80a0784:	bd70      	pop	{r4, r5, r6, pc}

080a0786 <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a0786:	b538      	push	{r3, r4, r5, lr}
 80a0788:	4605      	mov	r5, r0
 80a078a:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a078c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0790:	218a      	movs	r1, #138	; 0x8a
 80a0792:	f7ff ffdd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a0796:	706c      	strb	r4, [r5, #1]
 80a0798:	bd38      	pop	{r3, r4, r5, pc}

080a079a <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a079a:	b570      	push	{r4, r5, r6, lr}
 80a079c:	4604      	mov	r4, r0
 80a079e:	4615      	mov	r5, r2
 80a07a0:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a07a2:	f001 fd2d 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07a6:	7861      	ldrb	r1, [r4, #1]
 80a07a8:	f001 fc69 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a07ac:	f001 fd28 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07b0:	6803      	ldr	r3, [r0, #0]
 80a07b2:	4631      	mov	r1, r6
 80a07b4:	689b      	ldr	r3, [r3, #8]
 80a07b6:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a07b8:	f001 fd22 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07bc:	0a29      	lsrs	r1, r5, #8
 80a07be:	f7ff ffbd 	bl	80a073c <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a07c2:	f001 fd1d 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07c6:	b2e9      	uxtb	r1, r5
 80a07c8:	f7ff ffb8 	bl	80a073c <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a07cc:	f001 fd18 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07d0:	f001 fc5d 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a07d4:	7020      	strb	r0, [r4, #0]
 80a07d6:	bd70      	pop	{r4, r5, r6, pc}

080a07d8 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a07d8:	b570      	push	{r4, r5, r6, lr}
 80a07da:	4605      	mov	r5, r0
 80a07dc:	4614      	mov	r4, r2
 80a07de:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a07e0:	f001 fd0e 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07e4:	7869      	ldrb	r1, [r5, #1]
 80a07e6:	f001 fc4a 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a07ea:	f001 fd09 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07ee:	6803      	ldr	r3, [r0, #0]
 80a07f0:	4631      	mov	r1, r6
 80a07f2:	689b      	ldr	r3, [r3, #8]
 80a07f4:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a07f6:	f001 fd03 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a07fa:	0e21      	lsrs	r1, r4, #24
 80a07fc:	f7ff ff9a 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a0800:	f001 fcfe 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0804:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a0808:	f7ff ff94 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a080c:	f001 fcf8 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0810:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0814:	f7ff ff8e 	bl	80a0734 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a0818:	f001 fcf2 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a081c:	b2e1      	uxtb	r1, r4
 80a081e:	f7ff ff89 	bl	80a0734 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a0822:	f001 fced 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0826:	f001 fc32 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a082a:	7028      	strb	r0, [r5, #0]
 80a082c:	bd70      	pop	{r4, r5, r6, pc}

080a082e <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a082e:	b538      	push	{r3, r4, r5, lr}
 80a0830:	4604      	mov	r4, r0
 80a0832:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a0834:	f001 fce4 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0838:	7861      	ldrb	r1, [r4, #1]
 80a083a:	f001 fc20 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a083e:	f001 fcdf 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0842:	6803      	ldr	r3, [r0, #0]
 80a0844:	4629      	mov	r1, r5
 80a0846:	689b      	ldr	r3, [r3, #8]
 80a0848:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a084a:	f001 fcd9 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a084e:	f001 fc1e 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a0852:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0854:	f001 fcd4 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0858:	2201      	movs	r2, #1
 80a085a:	7861      	ldrb	r1, [r4, #1]
 80a085c:	f001 fc07 	bl	80a206e <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0860:	f001 fcce 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0864:	6803      	ldr	r3, [r0, #0]
 80a0866:	695b      	ldr	r3, [r3, #20]
 80a0868:	4798      	blx	r3

  return value;
}
 80a086a:	b2c0      	uxtb	r0, r0
 80a086c:	bd38      	pop	{r3, r4, r5, pc}

080a086e <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a086e:	b538      	push	{r3, r4, r5, lr}
 80a0870:	4604      	mov	r4, r0
 80a0872:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0874:	f001 fcc4 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0878:	7861      	ldrb	r1, [r4, #1]
 80a087a:	f001 fc00 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a087e:	f001 fcbf 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0882:	6803      	ldr	r3, [r0, #0]
 80a0884:	4629      	mov	r1, r5
 80a0886:	689b      	ldr	r3, [r3, #8]
 80a0888:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a088a:	f001 fcb9 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a088e:	f001 fbfe 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a0892:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0894:	f001 fcb4 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0898:	7861      	ldrb	r1, [r4, #1]
 80a089a:	2202      	movs	r2, #2
 80a089c:	f001 fbe7 	bl	80a206e <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a08a0:	f001 fcae 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08a4:	6803      	ldr	r3, [r0, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	4798      	blx	r3
 80a08aa:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a08ac:	f001 fca8 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08b0:	6803      	ldr	r3, [r0, #0]
 80a08b2:	695b      	ldr	r3, [r3, #20]
 80a08b4:	4798      	blx	r3
 80a08b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a08ba:	b280      	uxth	r0, r0
 80a08bc:	bd38      	pop	{r3, r4, r5, pc}

080a08be <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a08be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08c0:	4606      	mov	r6, r0
 80a08c2:	4614      	mov	r4, r2
 80a08c4:	461d      	mov	r5, r3
 80a08c6:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a08c8:	f001 fc9a 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08cc:	7871      	ldrb	r1, [r6, #1]
 80a08ce:	f001 fbd6 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a08d2:	f001 fc95 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08d6:	6803      	ldr	r3, [r0, #0]
 80a08d8:	4639      	mov	r1, r7
 80a08da:	689b      	ldr	r3, [r3, #8]
 80a08dc:	4798      	blx	r3
 80a08de:	4425      	add	r5, r4

  while (count-- > 0)
 80a08e0:	42ac      	cmp	r4, r5
 80a08e2:	d007      	beq.n	80a08f4 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a08e4:	f001 fc8c 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08e8:	6803      	ldr	r3, [r0, #0]
 80a08ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a08ee:	689b      	ldr	r3, [r3, #8]
 80a08f0:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a08f2:	e7f5      	b.n	80a08e0 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a08f4:	f001 fc84 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a08f8:	f001 fbc9 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a08fc:	7030      	strb	r0, [r6, #0]
 80a08fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0900 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a0900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0902:	4606      	mov	r6, r0
 80a0904:	4614      	mov	r4, r2
 80a0906:	461d      	mov	r5, r3
 80a0908:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a090a:	f001 fc79 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a090e:	7871      	ldrb	r1, [r6, #1]
 80a0910:	f001 fbb5 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0914:	f001 fc74 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0918:	6803      	ldr	r3, [r0, #0]
 80a091a:	4639      	mov	r1, r7
 80a091c:	689b      	ldr	r3, [r3, #8]
 80a091e:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0920:	f001 fc6e 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0924:	f001 fbb3 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
 80a0928:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a092a:	f001 fc69 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a092e:	462a      	mov	r2, r5
 80a0930:	7871      	ldrb	r1, [r6, #1]
 80a0932:	f001 fb9c 	bl	80a206e <_ZN7TwoWire11requestFromEhh>
 80a0936:	4425      	add	r5, r4

  while (count-- > 0)
 80a0938:	42ac      	cmp	r4, r5
 80a093a:	d007      	beq.n	80a094c <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a093c:	f001 fc60 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a0940:	6803      	ldr	r3, [r0, #0]
 80a0942:	695b      	ldr	r3, [r3, #20]
 80a0944:	4798      	blx	r3
 80a0946:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a094a:	e7f5      	b.n	80a0938 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0950 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0950:	b570      	push	{r4, r5, r6, lr}
 80a0952:	460d      	mov	r5, r1
 80a0954:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0956:	2100      	movs	r1, #0
 80a0958:	4628      	mov	r0, r5
 80a095a:	f002 f99d 	bl	80a2c98 <__aeabi_fcmplt>
 80a095e:	b9b0      	cbnz	r0, 80a098e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0960:	4628      	mov	r0, r5
 80a0962:	f001 ff1f 	bl	80a27a4 <__aeabi_f2d>
 80a0966:	a30c      	add	r3, pc, #48	; (adr r3, 80a0998 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0968:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a096c:	f001 ffec 	bl	80a2948 <__aeabi_dcmpgt>
 80a0970:	b968      	cbnz	r0, 80a098e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a0972:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a0976:	4628      	mov	r0, r5
 80a0978:	f001 fff0 	bl	80a295c <__aeabi_fmul>
 80a097c:	f002 f9b4 	bl	80a2ce8 <__aeabi_f2uiz>
 80a0980:	2144      	movs	r1, #68	; 0x44
 80a0982:	b282      	uxth	r2, r0
 80a0984:	4630      	mov	r0, r6
 80a0986:	f7ff ff08 	bl	80a079a <_ZN7VL53L0X13writeReg16BitEht>
 80a098a:	2001      	movs	r0, #1
 80a098c:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a098e:	2000      	movs	r0, #0
 80a0990:	bd70      	pop	{r4, r5, r6, pc}
 80a0992:	bf00      	nop
 80a0994:	f3af 8000 	nop.w
 80a0998:	0a3d70a4 	.word	0x0a3d70a4
 80a099c:	407fffd7 	.word	0x407fffd7

080a09a0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a09a0:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a09a2:	b909      	cbnz	r1, 80a09a8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a09a4:	2150      	movs	r1, #80	; 0x50
 80a09a6:	e002      	b.n	80a09ae <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a09a8:	2901      	cmp	r1, #1
 80a09aa:	d106      	bne.n	80a09ba <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a09ac:	2170      	movs	r1, #112	; 0x70
 80a09ae:	f7ff ff3e 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a09b2:	3001      	adds	r0, #1
 80a09b4:	0040      	lsls	r0, r0, #1
 80a09b6:	b2c0      	uxtb	r0, r0
 80a09b8:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a09ba:	20ff      	movs	r0, #255	; 0xff
}
 80a09bc:	bd08      	pop	{r3, pc}

080a09be <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a09be:	b538      	push	{r3, r4, r5, lr}
 80a09c0:	4604      	mov	r4, r0
 80a09c2:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a09c4:	2201      	movs	r2, #1
 80a09c6:	2180      	movs	r1, #128	; 0x80
 80a09c8:	f7ff fec2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a09cc:	2201      	movs	r2, #1
 80a09ce:	21ff      	movs	r1, #255	; 0xff
 80a09d0:	4620      	mov	r0, r4
 80a09d2:	f7ff febd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a09d6:	2200      	movs	r2, #0
 80a09d8:	4611      	mov	r1, r2
 80a09da:	4620      	mov	r0, r4
 80a09dc:	f7ff feb8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a09e0:	7c22      	ldrb	r2, [r4, #16]
 80a09e2:	2191      	movs	r1, #145	; 0x91
 80a09e4:	4620      	mov	r0, r4
 80a09e6:	f7ff feb3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a09ea:	2201      	movs	r2, #1
 80a09ec:	2100      	movs	r1, #0
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f7ff feae 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a09f4:	2200      	movs	r2, #0
 80a09f6:	21ff      	movs	r1, #255	; 0xff
 80a09f8:	4620      	mov	r0, r4
 80a09fa:	f7ff fea9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a09fe:	2200      	movs	r2, #0
 80a0a00:	2180      	movs	r1, #128	; 0x80
 80a0a02:	4620      	mov	r0, r4
 80a0a04:	f7ff fea4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a0a08:	b16d      	cbz	r5, 80a0a26 <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0a0a:	21f8      	movs	r1, #248	; 0xf8
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	f7ff ff2e 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a0a12:	b100      	cbz	r0, 80a0a16 <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a0a14:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a0a16:	462a      	mov	r2, r5
 80a0a18:	2104      	movs	r1, #4
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	f7ff fedc 	bl	80a07d8 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0a20:	2204      	movs	r2, #4
 80a0a22:	2100      	movs	r1, #0
 80a0a24:	e001      	b.n	80a0a2a <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0a26:	4629      	mov	r1, r5
 80a0a28:	2202      	movs	r2, #2
 80a0a2a:	4620      	mov	r0, r4
  }
}
 80a0a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0a30:	f7ff be8e 	b.w	80a0750 <_ZN7VL53L0X8writeRegEhh>

080a0a34 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a36:	4604      	mov	r4, r0
 80a0a38:	460f      	mov	r7, r1
 80a0a3a:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0a3c:	2180      	movs	r1, #128	; 0x80
 80a0a3e:	2201      	movs	r2, #1
 80a0a40:	f7ff fe86 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0a44:	2201      	movs	r2, #1
 80a0a46:	21ff      	movs	r1, #255	; 0xff
 80a0a48:	4620      	mov	r0, r4
 80a0a4a:	f7ff fe81 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0a4e:	2200      	movs	r2, #0
 80a0a50:	4611      	mov	r1, r2
 80a0a52:	4620      	mov	r0, r4
 80a0a54:	f7ff fe7c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0a58:	2206      	movs	r2, #6
 80a0a5a:	21ff      	movs	r1, #255	; 0xff
 80a0a5c:	4620      	mov	r0, r4
 80a0a5e:	f7ff fe77 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0a62:	2183      	movs	r1, #131	; 0x83
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	f7ff fee2 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0a6a:	f040 0204 	orr.w	r2, r0, #4
 80a0a6e:	b2d2      	uxtb	r2, r2
 80a0a70:	2183      	movs	r1, #131	; 0x83
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	f7ff fe6c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0a78:	2207      	movs	r2, #7
 80a0a7a:	21ff      	movs	r1, #255	; 0xff
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	f7ff fe67 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0a82:	2201      	movs	r2, #1
 80a0a84:	2181      	movs	r1, #129	; 0x81
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	f7ff fe62 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0a8c:	2201      	movs	r2, #1
 80a0a8e:	2180      	movs	r1, #128	; 0x80
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f7ff fe5d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0a96:	226b      	movs	r2, #107	; 0x6b
 80a0a98:	2194      	movs	r1, #148	; 0x94
 80a0a9a:	4620      	mov	r0, r4
 80a0a9c:	f7ff fe58 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0aa0:	2200      	movs	r2, #0
 80a0aa2:	2183      	movs	r1, #131	; 0x83
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f7ff fe53 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0aaa:	f000 fd89 	bl	80a15c0 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0aae:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0ab0:	2183      	movs	r1, #131	; 0x83
 80a0ab2:	4620      	mov	r0, r4
 80a0ab4:	f7ff febb 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0ab8:	4605      	mov	r5, r0
 80a0aba:	b958      	cbnz	r0, 80a0ad4 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0abc:	6863      	ldr	r3, [r4, #4]
 80a0abe:	2b00      	cmp	r3, #0
 80a0ac0:	d0f6      	beq.n	80a0ab0 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0ac2:	f000 fd7d 	bl	80a15c0 <HAL_Timer_Get_Milli_Seconds>
 80a0ac6:	68e3      	ldr	r3, [r4, #12]
 80a0ac8:	1ac0      	subs	r0, r0, r3
 80a0aca:	6863      	ldr	r3, [r4, #4]
 80a0acc:	4298      	cmp	r0, r3
 80a0ace:	d9ef      	bls.n	80a0ab0 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0ad0:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0ad4:	2201      	movs	r2, #1
 80a0ad6:	4620      	mov	r0, r4
 80a0ad8:	2183      	movs	r1, #131	; 0x83
 80a0ada:	f7ff fe39 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0ade:	2192      	movs	r1, #146	; 0x92
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	f7ff fea4 	bl	80a082e <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0ae6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0aea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0aee:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0af0:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0af2:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0af4:	2181      	movs	r1, #129	; 0x81
 80a0af6:	4620      	mov	r0, r4
 80a0af8:	f7ff fe2a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0afc:	2206      	movs	r2, #6
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	21ff      	movs	r1, #255	; 0xff
 80a0b02:	f7ff fe25 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0b06:	2183      	movs	r1, #131	; 0x83
 80a0b08:	4620      	mov	r0, r4
 80a0b0a:	f7ff fe90 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0b0e:	2183      	movs	r1, #131	; 0x83
 80a0b10:	4602      	mov	r2, r0
 80a0b12:	4620      	mov	r0, r4
 80a0b14:	f7ff fe1c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	2201      	movs	r2, #1
 80a0b1c:	21ff      	movs	r1, #255	; 0xff
 80a0b1e:	f7ff fe17 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0b22:	4620      	mov	r0, r4
 80a0b24:	2201      	movs	r2, #1
 80a0b26:	2100      	movs	r1, #0
 80a0b28:	f7ff fe12 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0b2c:	4620      	mov	r0, r4
 80a0b2e:	2200      	movs	r2, #0
 80a0b30:	21ff      	movs	r1, #255	; 0xff
 80a0b32:	f7ff fe0d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0b36:	4620      	mov	r0, r4
 80a0b38:	2200      	movs	r2, #0
 80a0b3a:	2180      	movs	r1, #128	; 0x80
 80a0b3c:	f7ff fe08 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0b40:	2001      	movs	r0, #1
 80a0b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b44 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0b44:	b510      	push	{r4, lr}
 80a0b46:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0b48:	2101      	movs	r1, #1
 80a0b4a:	f7ff fe70 	bl	80a082e <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0b4e:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0b52:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0b54:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0b58:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0b5a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0b5e:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0b60:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0b64:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0b68:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0b6a:	7120      	strb	r0, [r4, #4]
 80a0b6c:	bd10      	pop	{r4, pc}

080a0b6e <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0b72:	4298      	cmp	r0, r3
 80a0b74:	bf28      	it	cs
 80a0b76:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0b78:	b2c3      	uxtb	r3, r0
 80a0b7a:	0a00      	lsrs	r0, r0, #8
 80a0b7c:	fa03 f000 	lsl.w	r0, r3, r0
 80a0b80:	3001      	adds	r0, #1
}
 80a0b82:	b280      	uxth	r0, r0
 80a0b84:	4770      	bx	lr

080a0b86 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0b86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0b8a:	d201      	bcs.n	80a0b90 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0b8c:	b178      	cbz	r0, 80a0bae <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0b8e:	e001      	b.n	80a0b94 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0b90:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0b94:	3801      	subs	r0, #1
 80a0b96:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0b98:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0b9c:	b29a      	uxth	r2, r3
 80a0b9e:	f103 0301 	add.w	r3, r3, #1
 80a0ba2:	d001      	beq.n	80a0ba8 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0ba4:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0ba6:	e7f7      	b.n	80a0b98 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0ba8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0bac:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0bae:	4770      	bx	lr

080a0bb0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bb0:	4b08      	ldr	r3, [pc, #32]	; (80a0bd4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bb6:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0bb8:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bba:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0bbe:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0bc2:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0bc6:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0bca:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0bce:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0bd2:	bd10      	pop	{r4, pc}
 80a0bd4:	003a2f00 	.word	0x003a2f00

080a0bd8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0bd8:	b570      	push	{r4, r5, r6, lr}
 80a0bda:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0bdc:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0bde:	4614      	mov	r4, r2
 80a0be0:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0be2:	f7ff fedd 	bl	80a09a0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0be6:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0be8:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0bea:	4628      	mov	r0, r5
 80a0bec:	f7ff fe1f 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0bf0:	3001      	adds	r0, #1
 80a0bf2:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0bf4:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0bf6:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0bf8:	f7ff ffda 	bl	80a0bb0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0bfc:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0bfe:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c00:	4628      	mov	r0, r5
 80a0c02:	f7ff fe34 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>
 80a0c06:	f7ff ffb2 	bl	80a0b6e <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c0a:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c0c:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c0e:	f7ff ffcf 	bl	80a0bb0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c12:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0c14:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c16:	4628      	mov	r0, r5
 80a0c18:	f7ff fe09 	bl	80a082e <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0c1c:	3001      	adds	r0, #1
 80a0c1e:	0040      	lsls	r0, r0, #1
 80a0c20:	b2c0      	uxtb	r0, r0
 80a0c22:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c24:	2171      	movs	r1, #113	; 0x71
 80a0c26:	4628      	mov	r0, r5
 80a0c28:	f7ff fe21 	bl	80a086e <_ZN7VL53L0X12readReg16BitEh>
 80a0c2c:	f7ff ff9f 	bl	80a0b6e <_ZN7VL53L0X13decodeTimeoutEm>
 80a0c30:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0c32:	78f3      	ldrb	r3, [r6, #3]
 80a0c34:	b113      	cbz	r3, 80a0c3c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0c36:	88e3      	ldrh	r3, [r4, #6]
 80a0c38:	1ac0      	subs	r0, r0, r3
 80a0c3a:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0c3c:	78a1      	ldrb	r1, [r4, #2]
 80a0c3e:	8920      	ldrh	r0, [r4, #8]
 80a0c40:	f7ff ffb6 	bl	80a0bb0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0c44:	6160      	str	r0, [r4, #20]
 80a0c46:	bd70      	pop	{r4, r5, r6, pc}

080a0c48 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0c48:	b510      	push	{r4, lr}
 80a0c4a:	4604      	mov	r4, r0
 80a0c4c:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0c4e:	4669      	mov	r1, sp
 80a0c50:	f7ff ff78 	bl	80a0b44 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0c54:	aa02      	add	r2, sp, #8
 80a0c56:	4669      	mov	r1, sp
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	f7ff ffbd 	bl	80a0bd8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0c5e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0c62:	b11b      	cbz	r3, 80a0c6c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0c64:	9805      	ldr	r0, [sp, #20]
 80a0c66:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0c6a:	e001      	b.n	80a0c70 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0c6c:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0c70:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0c74:	b12b      	cbz	r3, 80a0c82 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0c76:	9b05      	ldr	r3, [sp, #20]
 80a0c78:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0c7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0c80:	e006      	b.n	80a0c90 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0c82:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0c86:	b11b      	cbz	r3, 80a0c90 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0c88:	9b05      	ldr	r3, [sp, #20]
 80a0c8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0c8e:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0c90:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0c94:	b11b      	cbz	r3, 80a0c9e <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0c96:	9b06      	ldr	r3, [sp, #24]
 80a0c98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0c9c:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0c9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0ca2:	b11b      	cbz	r3, 80a0cac <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0ca4:	9b07      	ldr	r3, [sp, #28]
 80a0ca6:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0caa:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0cac:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0cae:	b008      	add	sp, #32
 80a0cb0:	bd10      	pop	{r4, pc}
	...

080a0cb4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cb4:	4b08      	ldr	r3, [pc, #32]	; (80a0cd8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cba:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0cbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cc0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0cc8:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0ccc:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0cd0:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0cd4:	4770      	bx	lr
 80a0cd6:	bf00      	nop
 80a0cd8:	003a2f00 	.word	0x003a2f00

080a0cdc <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0cdc:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0ce2:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0ce4:	b089      	sub	sp, #36	; 0x24
 80a0ce6:	4606      	mov	r6, r0
 80a0ce8:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0cea:	d942      	bls.n	80a0d72 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0cec:	4669      	mov	r1, sp
 80a0cee:	f7ff ff29 	bl	80a0b44 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0cf2:	aa02      	add	r2, sp, #8
 80a0cf4:	4669      	mov	r1, sp
 80a0cf6:	4630      	mov	r0, r6
 80a0cf8:	f7ff ff6e 	bl	80a0bd8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0cfc:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d00:	b11b      	cbz	r3, 80a0d0a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0d02:	9805      	ldr	r0, [sp, #20]
 80a0d04:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0d08:	e001      	b.n	80a0d0e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0d0a:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0d0e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0d12:	b12b      	cbz	r3, 80a0d20 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0d14:	9b05      	ldr	r3, [sp, #20]
 80a0d16:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0d1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0d1e:	e006      	b.n	80a0d2e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0d20:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0d24:	b11b      	cbz	r3, 80a0d2e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0d26:	9b05      	ldr	r3, [sp, #20]
 80a0d28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d2c:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0d2e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0d32:	b11f      	cbz	r7, 80a0d3c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0d34:	9b06      	ldr	r3, [sp, #24]
 80a0d36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d3a:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0d3c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0d40:	b1ac      	cbz	r4, 80a0d6e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0d42:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0d46:	4285      	cmp	r5, r0
 80a0d48:	d313      	bcc.n	80a0d72 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0d4a:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0d4e:	1a28      	subs	r0, r5, r0
 80a0d50:	f7ff ffb0 	bl	80a0cb4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0d54:	b117      	cbz	r7, 80a0d5c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0d56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0d5a:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0d5c:	f7ff ff13 	bl	80a0b86 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0d60:	2171      	movs	r1, #113	; 0x71
 80a0d62:	4602      	mov	r2, r0
 80a0d64:	4630      	mov	r0, r6
 80a0d66:	f7ff fd18 	bl	80a079a <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0d6a:	6175      	str	r5, [r6, #20]
 80a0d6c:	e002      	b.n	80a0d74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0d6e:	2401      	movs	r4, #1
 80a0d70:	e000      	b.n	80a0d74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0d72:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0d74:	4620      	mov	r0, r4
 80a0d76:	b009      	add	sp, #36	; 0x24
 80a0d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d7a <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0d7a:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0d7c:	f041 0201 	orr.w	r2, r1, #1
 80a0d80:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0d82:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0d84:	f7ff fce4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0d88:	f000 fc1a 	bl	80a15c0 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0d8c:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0d8e:	2113      	movs	r1, #19
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	f7ff fd4c 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0d96:	f010 0507 	ands.w	r5, r0, #7
 80a0d9a:	d10b      	bne.n	80a0db4 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0d9c:	6863      	ldr	r3, [r4, #4]
 80a0d9e:	2b00      	cmp	r3, #0
 80a0da0:	d0f5      	beq.n	80a0d8e <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0da2:	f000 fc0d 	bl	80a15c0 <HAL_Timer_Get_Milli_Seconds>
 80a0da6:	68e3      	ldr	r3, [r4, #12]
 80a0da8:	1ac0      	subs	r0, r0, r3
 80a0daa:	6863      	ldr	r3, [r4, #4]
 80a0dac:	4298      	cmp	r0, r3
 80a0dae:	d9ee      	bls.n	80a0d8e <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0db0:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0db2:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0db4:	4620      	mov	r0, r4
 80a0db6:	2201      	movs	r2, #1
 80a0db8:	210b      	movs	r1, #11
 80a0dba:	f7ff fcc9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0dbe:	2200      	movs	r2, #0
 80a0dc0:	4620      	mov	r0, r4
 80a0dc2:	4611      	mov	r1, r2
 80a0dc4:	f7ff fcc4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
 80a0dc8:	2001      	movs	r0, #1
 80a0dca:	bd38      	pop	{r3, r4, r5, pc}

080a0dcc <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0dce:	4604      	mov	r4, r0
 80a0dd0:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0dd2:	b149      	cbz	r1, 80a0de8 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0dd4:	2189      	movs	r1, #137	; 0x89
 80a0dd6:	f7ff fd2a 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0dda:	f040 0201 	orr.w	r2, r0, #1
 80a0dde:	b2d2      	uxtb	r2, r2
 80a0de0:	2189      	movs	r1, #137	; 0x89
 80a0de2:	4620      	mov	r0, r4
 80a0de4:	f7ff fcb4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0de8:	2200      	movs	r2, #0
 80a0dea:	2188      	movs	r1, #136	; 0x88
 80a0dec:	4620      	mov	r0, r4
 80a0dee:	f7ff fcaf 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0df2:	2201      	movs	r2, #1
 80a0df4:	2180      	movs	r1, #128	; 0x80
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f7ff fcaa 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0dfc:	2201      	movs	r2, #1
 80a0dfe:	21ff      	movs	r1, #255	; 0xff
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	f7ff fca5 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0e06:	2200      	movs	r2, #0
 80a0e08:	4611      	mov	r1, r2
 80a0e0a:	4620      	mov	r0, r4
 80a0e0c:	f7ff fca0 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0e10:	2191      	movs	r1, #145	; 0x91
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	f7ff fd0b 	bl	80a082e <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0e18:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0e1a:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0e1c:	2100      	movs	r1, #0
 80a0e1e:	4620      	mov	r0, r4
 80a0e20:	f7ff fc96 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0e24:	2200      	movs	r2, #0
 80a0e26:	21ff      	movs	r1, #255	; 0xff
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f7ff fc91 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0e2e:	2200      	movs	r2, #0
 80a0e30:	2180      	movs	r1, #128	; 0x80
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	f7ff fc8c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0e38:	2160      	movs	r1, #96	; 0x60
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	f7ff fcf7 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a0e40:	f040 0212 	orr.w	r2, r0, #18
 80a0e44:	b2d2      	uxtb	r2, r2
 80a0e46:	2160      	movs	r1, #96	; 0x60
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	f7ff fc81 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0e4e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0e52:	4620      	mov	r0, r4
 80a0e54:	f7ff fd7c 	bl	80a0950 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0e58:	22ff      	movs	r2, #255	; 0xff
 80a0e5a:	2101      	movs	r1, #1
 80a0e5c:	4620      	mov	r0, r4
 80a0e5e:	f7ff fc77 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0e62:	f10d 0207 	add.w	r2, sp, #7
 80a0e66:	f10d 0106 	add.w	r1, sp, #6
 80a0e6a:	4620      	mov	r0, r4
 80a0e6c:	f7ff fde2 	bl	80a0a34 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0e70:	b908      	cbnz	r0, 80a0e76 <_ZN7VL53L0X4initEb+0xaa>
 80a0e72:	2500      	movs	r5, #0
 80a0e74:	e21d      	b.n	80a12b2 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0e76:	2306      	movs	r3, #6
 80a0e78:	aa02      	add	r2, sp, #8
 80a0e7a:	21b0      	movs	r1, #176	; 0xb0
 80a0e7c:	4620      	mov	r0, r4
 80a0e7e:	f7ff fd3f 	bl	80a0900 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0e82:	2201      	movs	r2, #1
 80a0e84:	21ff      	movs	r1, #255	; 0xff
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	f7ff fc62 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0e8c:	2200      	movs	r2, #0
 80a0e8e:	214f      	movs	r1, #79	; 0x4f
 80a0e90:	4620      	mov	r0, r4
 80a0e92:	f7ff fc5d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0e96:	222c      	movs	r2, #44	; 0x2c
 80a0e98:	214e      	movs	r1, #78	; 0x4e
 80a0e9a:	4620      	mov	r0, r4
 80a0e9c:	f7ff fc58 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0ea0:	2200      	movs	r2, #0
 80a0ea2:	21ff      	movs	r1, #255	; 0xff
 80a0ea4:	4620      	mov	r0, r4
 80a0ea6:	f7ff fc53 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0eaa:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	21b6      	movs	r1, #182	; 0xb6
 80a0eb0:	22b4      	movs	r2, #180	; 0xb4
 80a0eb2:	f7ff fc4d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0eb6:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0ebc:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0ec0:	2b00      	cmp	r3, #0
 80a0ec2:	bf14      	ite	ne
 80a0ec4:	200c      	movne	r0, #12
 80a0ec6:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ec8:	2701      	movs	r7, #1
 80a0eca:	b2eb      	uxtb	r3, r5
 80a0ecc:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0ece:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ed0:	f10d 0e10 	add.w	lr, sp, #16
 80a0ed4:	f003 0307 	and.w	r3, r3, #7
 80a0ed8:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0eda:	d801      	bhi.n	80a0ee0 <_ZN7VL53L0X4initEb+0x114>
 80a0edc:	428e      	cmp	r6, r1
 80a0ede:	d108      	bne.n	80a0ef2 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ee0:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a0ee4:	fa07 f303 	lsl.w	r3, r7, r3
 80a0ee8:	ea2e 0303 	bic.w	r3, lr, r3
 80a0eec:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a0ef0:	e007      	b.n	80a0f02 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0ef2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0ef6:	fa42 f303 	asr.w	r3, r2, r3
 80a0efa:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a0efc:	bf44      	itt	mi
 80a0efe:	3101      	addmi	r1, #1
 80a0f00:	b2c9      	uxtbmi	r1, r1
 80a0f02:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a0f04:	2d30      	cmp	r5, #48	; 0x30
 80a0f06:	d1e0      	bne.n	80a0eca <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0f08:	2306      	movs	r3, #6
 80a0f0a:	aa02      	add	r2, sp, #8
 80a0f0c:	21b0      	movs	r1, #176	; 0xb0
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	f7ff fcd5 	bl	80a08be <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a0f14:	2201      	movs	r2, #1
 80a0f16:	21ff      	movs	r1, #255	; 0xff
 80a0f18:	4620      	mov	r0, r4
 80a0f1a:	f7ff fc19 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0f1e:	2200      	movs	r2, #0
 80a0f20:	4611      	mov	r1, r2
 80a0f22:	4620      	mov	r0, r4
 80a0f24:	f7ff fc14 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0f28:	2200      	movs	r2, #0
 80a0f2a:	21ff      	movs	r1, #255	; 0xff
 80a0f2c:	4620      	mov	r0, r4
 80a0f2e:	f7ff fc0f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a0f32:	2200      	movs	r2, #0
 80a0f34:	2109      	movs	r1, #9
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	f7ff fc0a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a0f3c:	2200      	movs	r2, #0
 80a0f3e:	2110      	movs	r1, #16
 80a0f40:	4620      	mov	r0, r4
 80a0f42:	f7ff fc05 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a0f46:	2200      	movs	r2, #0
 80a0f48:	2111      	movs	r1, #17
 80a0f4a:	4620      	mov	r0, r4
 80a0f4c:	f7ff fc00 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a0f50:	2201      	movs	r2, #1
 80a0f52:	2124      	movs	r1, #36	; 0x24
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	f7ff fbfb 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a0f5a:	22ff      	movs	r2, #255	; 0xff
 80a0f5c:	2125      	movs	r1, #37	; 0x25
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	f7ff fbf6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a0f64:	2200      	movs	r2, #0
 80a0f66:	2175      	movs	r1, #117	; 0x75
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	f7ff fbf1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0f6e:	2201      	movs	r2, #1
 80a0f70:	21ff      	movs	r1, #255	; 0xff
 80a0f72:	4620      	mov	r0, r4
 80a0f74:	f7ff fbec 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a0f78:	222c      	movs	r2, #44	; 0x2c
 80a0f7a:	214e      	movs	r1, #78	; 0x4e
 80a0f7c:	4620      	mov	r0, r4
 80a0f7e:	f7ff fbe7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a0f82:	2200      	movs	r2, #0
 80a0f84:	2148      	movs	r1, #72	; 0x48
 80a0f86:	4620      	mov	r0, r4
 80a0f88:	f7ff fbe2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a0f8c:	2220      	movs	r2, #32
 80a0f8e:	4629      	mov	r1, r5
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff fbdd 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0f96:	2200      	movs	r2, #0
 80a0f98:	21ff      	movs	r1, #255	; 0xff
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	f7ff fbd8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a0fa0:	2209      	movs	r2, #9
 80a0fa2:	4629      	mov	r1, r5
 80a0fa4:	4620      	mov	r0, r4
 80a0fa6:	f7ff fbd3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a0faa:	2200      	movs	r2, #0
 80a0fac:	2154      	movs	r1, #84	; 0x54
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	f7ff fbce 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0fb4:	2204      	movs	r2, #4
 80a0fb6:	2131      	movs	r1, #49	; 0x31
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	f7ff fbc9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a0fbe:	2203      	movs	r2, #3
 80a0fc0:	2132      	movs	r1, #50	; 0x32
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	f7ff fbc4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a0fc8:	2283      	movs	r2, #131	; 0x83
 80a0fca:	2140      	movs	r1, #64	; 0x40
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff fbbf 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a0fd2:	2225      	movs	r2, #37	; 0x25
 80a0fd4:	2146      	movs	r1, #70	; 0x46
 80a0fd6:	4620      	mov	r0, r4
 80a0fd8:	f7ff fbba 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a0fdc:	2200      	movs	r2, #0
 80a0fde:	2160      	movs	r1, #96	; 0x60
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	f7ff fbb5 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a0fe6:	2200      	movs	r2, #0
 80a0fe8:	2127      	movs	r1, #39	; 0x27
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	f7ff fbb0 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a0ff0:	2206      	movs	r2, #6
 80a0ff2:	2150      	movs	r1, #80	; 0x50
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	f7ff fbab 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a0ffa:	2200      	movs	r2, #0
 80a0ffc:	2151      	movs	r1, #81	; 0x51
 80a0ffe:	4620      	mov	r0, r4
 80a1000:	f7ff fba6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1004:	2296      	movs	r2, #150	; 0x96
 80a1006:	2152      	movs	r1, #82	; 0x52
 80a1008:	4620      	mov	r0, r4
 80a100a:	f7ff fba1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a100e:	2208      	movs	r2, #8
 80a1010:	2156      	movs	r1, #86	; 0x56
 80a1012:	4620      	mov	r0, r4
 80a1014:	f7ff fb9c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1018:	462a      	mov	r2, r5
 80a101a:	2157      	movs	r1, #87	; 0x57
 80a101c:	4620      	mov	r0, r4
 80a101e:	f7ff fb97 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1022:	2200      	movs	r2, #0
 80a1024:	2161      	movs	r1, #97	; 0x61
 80a1026:	4620      	mov	r0, r4
 80a1028:	f7ff fb92 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a102c:	2200      	movs	r2, #0
 80a102e:	2162      	movs	r1, #98	; 0x62
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff fb8d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1036:	2200      	movs	r2, #0
 80a1038:	2164      	movs	r1, #100	; 0x64
 80a103a:	4620      	mov	r0, r4
 80a103c:	f7ff fb88 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1040:	2200      	movs	r2, #0
 80a1042:	2165      	movs	r1, #101	; 0x65
 80a1044:	4620      	mov	r0, r4
 80a1046:	f7ff fb83 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a104a:	22a0      	movs	r2, #160	; 0xa0
 80a104c:	2166      	movs	r1, #102	; 0x66
 80a104e:	4620      	mov	r0, r4
 80a1050:	f7ff fb7e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1054:	2201      	movs	r2, #1
 80a1056:	21ff      	movs	r1, #255	; 0xff
 80a1058:	4620      	mov	r0, r4
 80a105a:	f7ff fb79 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a105e:	2232      	movs	r2, #50	; 0x32
 80a1060:	2122      	movs	r1, #34	; 0x22
 80a1062:	4620      	mov	r0, r4
 80a1064:	f7ff fb74 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1068:	2214      	movs	r2, #20
 80a106a:	2147      	movs	r1, #71	; 0x47
 80a106c:	4620      	mov	r0, r4
 80a106e:	f7ff fb6f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1072:	22ff      	movs	r2, #255	; 0xff
 80a1074:	2149      	movs	r1, #73	; 0x49
 80a1076:	4620      	mov	r0, r4
 80a1078:	f7ff fb6a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a107c:	2200      	movs	r2, #0
 80a107e:	214a      	movs	r1, #74	; 0x4a
 80a1080:	4620      	mov	r0, r4
 80a1082:	f7ff fb65 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1086:	2200      	movs	r2, #0
 80a1088:	21ff      	movs	r1, #255	; 0xff
 80a108a:	4620      	mov	r0, r4
 80a108c:	f7ff fb60 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1090:	220a      	movs	r2, #10
 80a1092:	217a      	movs	r1, #122	; 0x7a
 80a1094:	4620      	mov	r0, r4
 80a1096:	f7ff fb5b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a109a:	2200      	movs	r2, #0
 80a109c:	217b      	movs	r1, #123	; 0x7b
 80a109e:	4620      	mov	r0, r4
 80a10a0:	f7ff fb56 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a10a4:	2221      	movs	r2, #33	; 0x21
 80a10a6:	2178      	movs	r1, #120	; 0x78
 80a10a8:	4620      	mov	r0, r4
 80a10aa:	f7ff fb51 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a10ae:	2201      	movs	r2, #1
 80a10b0:	21ff      	movs	r1, #255	; 0xff
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	f7ff fb4c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a10b8:	2234      	movs	r2, #52	; 0x34
 80a10ba:	2123      	movs	r1, #35	; 0x23
 80a10bc:	4620      	mov	r0, r4
 80a10be:	f7ff fb47 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a10c2:	2200      	movs	r2, #0
 80a10c4:	2142      	movs	r1, #66	; 0x42
 80a10c6:	4620      	mov	r0, r4
 80a10c8:	f7ff fb42 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a10cc:	22ff      	movs	r2, #255	; 0xff
 80a10ce:	2144      	movs	r1, #68	; 0x44
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	f7ff fb3d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a10d6:	2226      	movs	r2, #38	; 0x26
 80a10d8:	2145      	movs	r1, #69	; 0x45
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff fb38 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a10e0:	2205      	movs	r2, #5
 80a10e2:	2146      	movs	r1, #70	; 0x46
 80a10e4:	4620      	mov	r0, r4
 80a10e6:	f7ff fb33 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a10ea:	2240      	movs	r2, #64	; 0x40
 80a10ec:	4611      	mov	r1, r2
 80a10ee:	4620      	mov	r0, r4
 80a10f0:	f7ff fb2e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a10f4:	2206      	movs	r2, #6
 80a10f6:	210e      	movs	r1, #14
 80a10f8:	4620      	mov	r0, r4
 80a10fa:	f7ff fb29 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a10fe:	221a      	movs	r2, #26
 80a1100:	2120      	movs	r1, #32
 80a1102:	4620      	mov	r0, r4
 80a1104:	f7ff fb24 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1108:	2240      	movs	r2, #64	; 0x40
 80a110a:	2143      	movs	r1, #67	; 0x43
 80a110c:	4620      	mov	r0, r4
 80a110e:	f7ff fb1f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1112:	2200      	movs	r2, #0
 80a1114:	21ff      	movs	r1, #255	; 0xff
 80a1116:	4620      	mov	r0, r4
 80a1118:	f7ff fb1a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a111c:	2203      	movs	r2, #3
 80a111e:	2134      	movs	r1, #52	; 0x34
 80a1120:	4620      	mov	r0, r4
 80a1122:	f7ff fb15 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1126:	2244      	movs	r2, #68	; 0x44
 80a1128:	2135      	movs	r1, #53	; 0x35
 80a112a:	4620      	mov	r0, r4
 80a112c:	f7ff fb10 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1130:	2201      	movs	r2, #1
 80a1132:	21ff      	movs	r1, #255	; 0xff
 80a1134:	4620      	mov	r0, r4
 80a1136:	f7ff fb0b 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a113a:	2204      	movs	r2, #4
 80a113c:	2131      	movs	r1, #49	; 0x31
 80a113e:	4620      	mov	r0, r4
 80a1140:	f7ff fb06 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1144:	2209      	movs	r2, #9
 80a1146:	214b      	movs	r1, #75	; 0x4b
 80a1148:	4620      	mov	r0, r4
 80a114a:	f7ff fb01 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a114e:	2205      	movs	r2, #5
 80a1150:	214c      	movs	r1, #76	; 0x4c
 80a1152:	4620      	mov	r0, r4
 80a1154:	f7ff fafc 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a1158:	2204      	movs	r2, #4
 80a115a:	214d      	movs	r1, #77	; 0x4d
 80a115c:	4620      	mov	r0, r4
 80a115e:	f7ff faf7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1162:	2200      	movs	r2, #0
 80a1164:	21ff      	movs	r1, #255	; 0xff
 80a1166:	4620      	mov	r0, r4
 80a1168:	f7ff faf2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a116c:	2200      	movs	r2, #0
 80a116e:	2144      	movs	r1, #68	; 0x44
 80a1170:	4620      	mov	r0, r4
 80a1172:	f7ff faed 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a1176:	2220      	movs	r2, #32
 80a1178:	2145      	movs	r1, #69	; 0x45
 80a117a:	4620      	mov	r0, r4
 80a117c:	f7ff fae8 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a1180:	2208      	movs	r2, #8
 80a1182:	2147      	movs	r1, #71	; 0x47
 80a1184:	4620      	mov	r0, r4
 80a1186:	f7ff fae3 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a118a:	2228      	movs	r2, #40	; 0x28
 80a118c:	2148      	movs	r1, #72	; 0x48
 80a118e:	4620      	mov	r0, r4
 80a1190:	f7ff fade 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a1194:	2200      	movs	r2, #0
 80a1196:	2167      	movs	r1, #103	; 0x67
 80a1198:	4620      	mov	r0, r4
 80a119a:	f7ff fad9 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a119e:	2204      	movs	r2, #4
 80a11a0:	2170      	movs	r1, #112	; 0x70
 80a11a2:	4620      	mov	r0, r4
 80a11a4:	f7ff fad4 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a11a8:	2201      	movs	r2, #1
 80a11aa:	2171      	movs	r1, #113	; 0x71
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	f7ff facf 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a11b2:	22fe      	movs	r2, #254	; 0xfe
 80a11b4:	2172      	movs	r1, #114	; 0x72
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	f7ff faca 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a11bc:	2200      	movs	r2, #0
 80a11be:	2176      	movs	r1, #118	; 0x76
 80a11c0:	4620      	mov	r0, r4
 80a11c2:	f7ff fac5 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a11c6:	2200      	movs	r2, #0
 80a11c8:	2177      	movs	r1, #119	; 0x77
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	f7ff fac0 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a11d0:	2201      	movs	r2, #1
 80a11d2:	21ff      	movs	r1, #255	; 0xff
 80a11d4:	4620      	mov	r0, r4
 80a11d6:	f7ff fabb 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a11da:	2201      	movs	r2, #1
 80a11dc:	210d      	movs	r1, #13
 80a11de:	4620      	mov	r0, r4
 80a11e0:	f7ff fab6 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a11e4:	2200      	movs	r2, #0
 80a11e6:	21ff      	movs	r1, #255	; 0xff
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	f7ff fab1 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a11ee:	2201      	movs	r2, #1
 80a11f0:	2180      	movs	r1, #128	; 0x80
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	f7ff faac 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a11f8:	22f8      	movs	r2, #248	; 0xf8
 80a11fa:	2101      	movs	r1, #1
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	f7ff faa7 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1202:	2201      	movs	r2, #1
 80a1204:	21ff      	movs	r1, #255	; 0xff
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff faa2 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a120c:	2201      	movs	r2, #1
 80a120e:	218e      	movs	r1, #142	; 0x8e
 80a1210:	4620      	mov	r0, r4
 80a1212:	f7ff fa9d 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1216:	2201      	movs	r2, #1
 80a1218:	2100      	movs	r1, #0
 80a121a:	4620      	mov	r0, r4
 80a121c:	f7ff fa98 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1220:	2200      	movs	r2, #0
 80a1222:	21ff      	movs	r1, #255	; 0xff
 80a1224:	4620      	mov	r0, r4
 80a1226:	f7ff fa93 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a122a:	2200      	movs	r2, #0
 80a122c:	2180      	movs	r1, #128	; 0x80
 80a122e:	4620      	mov	r0, r4
 80a1230:	f7ff fa8e 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a1234:	2204      	movs	r2, #4
 80a1236:	210a      	movs	r1, #10
 80a1238:	4620      	mov	r0, r4
 80a123a:	f7ff fa89 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a123e:	2184      	movs	r1, #132	; 0x84
 80a1240:	4620      	mov	r0, r4
 80a1242:	f7ff faf4 	bl	80a082e <_ZN7VL53L0X7readRegEh>
 80a1246:	2184      	movs	r1, #132	; 0x84
 80a1248:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a124c:	4620      	mov	r0, r4
 80a124e:	f7ff fa7f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1252:	2201      	movs	r2, #1
 80a1254:	210b      	movs	r1, #11
 80a1256:	4620      	mov	r0, r4
 80a1258:	f7ff fa7a 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a125c:	4620      	mov	r0, r4
 80a125e:	f7ff fcf3 	bl	80a0c48 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1262:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a1264:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1266:	2101      	movs	r1, #1
 80a1268:	4620      	mov	r0, r4
 80a126a:	f7ff fa71 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a126e:	6961      	ldr	r1, [r4, #20]
 80a1270:	4620      	mov	r0, r4
 80a1272:	f7ff fd33 	bl	80a0cdc <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a1276:	2201      	movs	r2, #1
 80a1278:	4611      	mov	r1, r2
 80a127a:	4620      	mov	r0, r4
 80a127c:	f7ff fa68 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a1280:	2140      	movs	r1, #64	; 0x40
 80a1282:	4620      	mov	r0, r4
 80a1284:	f7ff fd79 	bl	80a0d7a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a1288:	2800      	cmp	r0, #0
 80a128a:	f43f adf2 	beq.w	80a0e72 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a128e:	2202      	movs	r2, #2
 80a1290:	2101      	movs	r1, #1
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7ff fa5c 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a1298:	2100      	movs	r1, #0
 80a129a:	4620      	mov	r0, r4
 80a129c:	f7ff fd6d 	bl	80a0d7a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a12a0:	4605      	mov	r5, r0
 80a12a2:	2800      	cmp	r0, #0
 80a12a4:	f43f ade5 	beq.w	80a0e72 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a12a8:	22e8      	movs	r2, #232	; 0xe8
 80a12aa:	2101      	movs	r1, #1
 80a12ac:	4620      	mov	r0, r4
 80a12ae:	f7ff fa4f 	bl	80a0750 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a12b2:	4628      	mov	r0, r5
 80a12b4:	b005      	add	sp, #20
 80a12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a12b8 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a12b8:	f000 b92a 	b.w	80a1510 <HAL_Pin_Map>

080a12bc <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a12bc:	4770      	bx	lr

080a12be <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a12be:	b510      	push	{r4, lr}
 80a12c0:	4604      	mov	r4, r0

}
 80a12c2:	f7fe feea 	bl	80a009a <_ZdlPv>
 80a12c6:	4620      	mov	r0, r4
 80a12c8:	bd10      	pop	{r4, pc}

080a12ca <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a12ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12cc:	4605      	mov	r5, r0
 80a12ce:	461e      	mov	r6, r3
 80a12d0:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a12d2:	7c01      	ldrb	r1, [r0, #16]
 80a12d4:	68c0      	ldr	r0, [r0, #12]
 80a12d6:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a12da:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a12dc:	f000 fecf 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a12e0:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a12e2:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a12e4:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a12e6:	bf88      	it	hi
 80a12e8:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a12ec:	689b      	ldr	r3, [r3, #8]
 80a12ee:	4639      	mov	r1, r7
 80a12f0:	4798      	blx	r3
 80a12f2:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a12f4:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a12f6:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a12f8:	d005      	beq.n	80a1306 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a12fa:	6803      	ldr	r3, [r0, #0]
 80a12fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1300:	689b      	ldr	r3, [r3, #8]
 80a1302:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1304:	e7f6      	b.n	80a12f4 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1306:	f000 fec2 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a130a:	fab0 f080 	clz	r0, r0
 80a130e:	0940      	lsrs	r0, r0, #5
 80a1310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1312 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1314:	4604      	mov	r4, r0
 80a1316:	461e      	mov	r6, r3
 80a1318:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a131a:	7c01      	ldrb	r1, [r0, #16]
 80a131c:	68c0      	ldr	r0, [r0, #12]
 80a131e:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1322:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1324:	f000 feab 	bl	80a207e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1328:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a132a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a132c:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a132e:	bf88      	it	hi
 80a1330:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1334:	689b      	ldr	r3, [r3, #8]
 80a1336:	4639      	mov	r1, r7
 80a1338:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a133a:	68e0      	ldr	r0, [r4, #12]
 80a133c:	f000 fea7 	bl	80a208e <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a1340:	b9a8      	cbnz	r0, 80a136e <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a1342:	7c21      	ldrb	r1, [r4, #16]
 80a1344:	4632      	mov	r2, r6
 80a1346:	f041 0118 	orr.w	r1, r1, #24
 80a134a:	68e0      	ldr	r0, [r4, #12]
 80a134c:	f000 fe92 	bl	80a2074 <_ZN7TwoWire11requestFromEii>
 80a1350:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a1352:	42ae      	cmp	r6, r5
 80a1354:	d00d      	beq.n	80a1372 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a1356:	68e0      	ldr	r0, [r4, #12]
 80a1358:	6803      	ldr	r3, [r0, #0]
 80a135a:	691b      	ldr	r3, [r3, #16]
 80a135c:	4798      	blx	r3
 80a135e:	b140      	cbz	r0, 80a1372 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a1360:	68e0      	ldr	r0, [r4, #12]
 80a1362:	6803      	ldr	r3, [r0, #0]
 80a1364:	695b      	ldr	r3, [r3, #20]
 80a1366:	4798      	blx	r3
 80a1368:	f805 0b01 	strb.w	r0, [r5], #1
 80a136c:	e7f1      	b.n	80a1352 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a136e:	2000      	movs	r0, #0
 80a1370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1372:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a1374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1376 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a1376:	2200      	movs	r2, #0
 80a1378:	7002      	strb	r2, [r0, #0]
 80a137a:	7042      	strb	r2, [r0, #1]
 80a137c:	7082      	strb	r2, [r0, #2]
 80a137e:	70c2      	strb	r2, [r0, #3]
 80a1380:	7102      	strb	r2, [r0, #4]
 80a1382:	7142      	strb	r2, [r0, #5]
 80a1384:	7182      	strb	r2, [r0, #6]
 80a1386:	71c2      	strb	r2, [r0, #7]
 80a1388:	7202      	strb	r2, [r0, #8]
 80a138a:	7242      	strb	r2, [r0, #9]
 80a138c:	7282      	strb	r2, [r0, #10]
}
 80a138e:	4770      	bx	lr

080a1390 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a1390:	f041 0107 	orr.w	r1, r1, #7
 80a1394:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a1396:	4770      	bx	lr

080a1398 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a1398:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a139a:	6803      	ldr	r3, [r0, #0]
 80a139c:	aa01      	add	r2, sp, #4
 80a139e:	689c      	ldr	r4, [r3, #8]
 80a13a0:	2301      	movs	r3, #1
 80a13a2:	47a0      	blx	r4

	return resp[0];
}
 80a13a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a13a8:	b002      	add	sp, #8
 80a13aa:	bd10      	pop	{r4, pc}

080a13ac <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a13ac:	b538      	push	{r3, r4, r5, lr}
 80a13ae:	4605      	mov	r5, r0
 80a13b0:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a13b2:	210f      	movs	r1, #15
 80a13b4:	4628      	mov	r0, r5
 80a13b6:	f7ff ffef 	bl	80a1398 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a13ba:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a13bc:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a13c0:	d005      	beq.n	80a13ce <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a13c2:	f000 fbbf 	bl	80a1b44 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a13c6:	3c01      	subs	r4, #1
 80a13c8:	d1f3      	bne.n	80a13b2 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a13ca:	4620      	mov	r0, r4
 80a13cc:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a13ce:	bd38      	pop	{r3, r4, r5, pc}

080a13d0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a13d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a13d2:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a13d4:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a13d6:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a13d8:	f7ff ffde 	bl	80a1398 <_ZN6LIS3DH13readRegister8Eh>
 80a13dc:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a13e0:	2800      	cmp	r0, #0
 80a13e2:	bf14      	ite	ne
 80a13e4:	2501      	movne	r5, #1
 80a13e6:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a13e8:	d01b      	beq.n	80a1422 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a13ea:	6833      	ldr	r3, [r6, #0]
 80a13ec:	466a      	mov	r2, sp
 80a13ee:	689f      	ldr	r7, [r3, #8]
 80a13f0:	2128      	movs	r1, #40	; 0x28
 80a13f2:	2306      	movs	r3, #6
 80a13f4:	4630      	mov	r0, r6
 80a13f6:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a13f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a13fc:	f89d 3000 	ldrb.w	r3, [sp]
 80a1400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1404:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a1406:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a140a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a140e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1412:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a1414:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a141c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1420:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a1422:	4628      	mov	r0, r5
 80a1424:	b003      	add	sp, #12
 80a1426:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1428 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a1428:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a142a:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a142c:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a142e:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a1432:	68dd      	ldr	r5, [r3, #12]
 80a1434:	4622      	mov	r2, r4
 80a1436:	2301      	movs	r3, #1
 80a1438:	47a8      	blx	r5
}
 80a143a:	b003      	add	sp, #12
 80a143c:	bd30      	pop	{r4, r5, pc}
	...

080a1440 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a1440:	b570      	push	{r4, r5, r6, lr}
 80a1442:	4604      	mov	r4, r0
 80a1444:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a1446:	f7ff ffb1 	bl	80a13ac <_ZN6LIS3DH9hasDeviceEv>
 80a144a:	4606      	mov	r6, r0
 80a144c:	b928      	cbnz	r0, 80a145a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a144e:	f000 fcc9 	bl	80a1de4 <_Z16_fetch_usbserialv>
 80a1452:	4928      	ldr	r1, [pc, #160]	; (80a14f4 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a1454:	f000 faf4 	bl	80a1a40 <_ZN5Print7printlnEPKc>
		return false;
 80a1458:	e049      	b.n	80a14ee <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a145a:	782a      	ldrb	r2, [r5, #0]
 80a145c:	2120      	movs	r1, #32
 80a145e:	4620      	mov	r0, r4
 80a1460:	f7ff ffe2 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a1464:	786a      	ldrb	r2, [r5, #1]
 80a1466:	2121      	movs	r1, #33	; 0x21
 80a1468:	4620      	mov	r0, r4
 80a146a:	f7ff ffdd 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a146e:	78aa      	ldrb	r2, [r5, #2]
 80a1470:	2122      	movs	r1, #34	; 0x22
 80a1472:	4620      	mov	r0, r4
 80a1474:	f7ff ffd8 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a1478:	78ea      	ldrb	r2, [r5, #3]
 80a147a:	2123      	movs	r1, #35	; 0x23
 80a147c:	4620      	mov	r0, r4
 80a147e:	f7ff ffd3 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a1482:	792a      	ldrb	r2, [r5, #4]
 80a1484:	2124      	movs	r1, #36	; 0x24
 80a1486:	4620      	mov	r0, r4
 80a1488:	f7ff ffce 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a148c:	796a      	ldrb	r2, [r5, #5]
 80a148e:	2125      	movs	r1, #37	; 0x25
 80a1490:	4620      	mov	r0, r4
 80a1492:	f7ff ffc9 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a1496:	79ab      	ldrb	r3, [r5, #6]
 80a1498:	b11b      	cbz	r3, 80a14a2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a149a:	2126      	movs	r1, #38	; 0x26
 80a149c:	4620      	mov	r0, r4
 80a149e:	f7ff ff7b 	bl	80a1398 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a14a2:	7aaa      	ldrb	r2, [r5, #10]
 80a14a4:	212e      	movs	r1, #46	; 0x2e
 80a14a6:	4620      	mov	r0, r4
 80a14a8:	f7ff ffbe 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a14ac:	78ab      	ldrb	r3, [r5, #2]
 80a14ae:	065b      	lsls	r3, r3, #25
 80a14b0:	d51d      	bpl.n	80a14ee <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a14b2:	79ea      	ldrb	r2, [r5, #7]
 80a14b4:	2132      	movs	r1, #50	; 0x32
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	f7ff ffb6 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a14bc:	7a2a      	ldrb	r2, [r5, #8]
 80a14be:	2133      	movs	r1, #51	; 0x33
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	f7ff ffb1 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a14c6:	6863      	ldr	r3, [r4, #4]
 80a14c8:	2b00      	cmp	r3, #0
 80a14ca:	db0a      	blt.n	80a14e2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a14cc:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a14ce:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a14d0:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a14d2:	2130      	movs	r1, #48	; 0x30
 80a14d4:	f7ff ffa8 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a14d8:	2131      	movs	r1, #49	; 0x31
 80a14da:	4620      	mov	r0, r4
 80a14dc:	f7ff ff5c 	bl	80a1398 <_ZN6LIS3DH13readRegister8Eh>
 80a14e0:	e005      	b.n	80a14ee <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a14e2:	2200      	movs	r2, #0
 80a14e4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a14e6:	2130      	movs	r1, #48	; 0x30
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7ff ff9d 	bl	80a1428 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a14ee:	4630      	mov	r0, r6
 80a14f0:	bd70      	pop	{r4, r5, r6, pc}
 80a14f2:	bf00      	nop
 80a14f4:	080a2dfc 	.word	0x080a2dfc

080a14f8 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a14f8:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a14fa:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a14fc:	4b02      	ldr	r3, [pc, #8]	; (80a1508 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a14fe:	60c1      	str	r1, [r0, #12]
 80a1500:	6003      	str	r3, [r0, #0]
 80a1502:	7402      	strb	r2, [r0, #16]

}
 80a1504:	bd10      	pop	{r4, pc}
 80a1506:	bf00      	nop
 80a1508:	080a2dec 	.word	0x080a2dec

080a150c <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a150c:	f000 b800 	b.w	80a1510 <HAL_Pin_Map>

080a1510 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <HAL_Pin_Map+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	681b      	ldr	r3, [r3, #0]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601b0 	.word	0x080601b0

080a1520 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <HAL_Validate_Pin_Function+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	685b      	ldr	r3, [r3, #4]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601b0 	.word	0x080601b0

080a1530 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <HAL_Pin_Mode+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	689b      	ldr	r3, [r3, #8]
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601b0 	.word	0x080601b0

080a1540 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <HAL_Get_Pin_Mode+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	68db      	ldr	r3, [r3, #12]
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601b0 	.word	0x080601b0

080a1550 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <HAL_GPIO_Write+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	691b      	ldr	r3, [r3, #16]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601b0 	.word	0x080601b0

080a1560 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <HAL_GPIO_Read+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	695b      	ldr	r3, [r3, #20]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601b0 	.word	0x080601b0

080a1570 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <HAL_Interrupts_Attach+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	699b      	ldr	r3, [r3, #24]
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601b0 	.word	0x080601b0

080a1580 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <HAL_Interrupts_Detach+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	69db      	ldr	r3, [r3, #28]
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080601b0 	.word	0x080601b0

080a1590 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <HAL_SPI_Init+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	69db      	ldr	r3, [r3, #28]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601b4 	.word	0x080601b4

080a15a0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <HAL_SPI_Is_Enabled+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	6a1b      	ldr	r3, [r3, #32]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601b4 	.word	0x080601b4

080a15b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <HAL_RNG_GetRandomNumber+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	685b      	ldr	r3, [r3, #4]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	0806019c 	.word	0x0806019c

080a15c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	695b      	ldr	r3, [r3, #20]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	0806019c 	.word	0x0806019c

080a15d0 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <os_timer_create+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6a1b      	ldr	r3, [r3, #32]
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601d0 	.word	0x080601d0

080a15e0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <os_timer_destroy+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601d0 	.word	0x080601d0

080a15f0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <os_timer_get_id+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601d0 	.word	0x080601d0

080a1600 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <os_timer_change+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601d0 	.word	0x080601d0

080a1610 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <os_mutex_create+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601d0 	.word	0x080601d0

080a1620 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <HAL_USART_Init+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	699b      	ldr	r3, [r3, #24]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601c4 	.word	0x080601c4

080a1630 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_USART_Write_Data+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601c4 	.word	0x080601c4

080a1640 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_USART_Available_Data+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601c4 	.word	0x080601c4

080a1650 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_USART_Read_Data+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601c4 	.word	0x080601c4

080a1660 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_USART_Peek_Data+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601c4 	.word	0x080601c4

080a1670 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_USART_Flush_Data+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601c4 	.word	0x080601c4

080a1680 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_USART_Is_Enabled+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601c4 	.word	0x080601c4

080a1690 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601c4 	.word	0x080601c4

080a16a0 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <HAL_I2C_Set_Speed+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601ac 	.word	0x080601ac

080a16b0 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <HAL_I2C_Begin+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601ac 	.word	0x080601ac

080a16c0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <HAL_I2C_Request_Data+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601ac 	.word	0x080601ac

080a16d0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <HAL_I2C_Begin_Transmission+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601ac 	.word	0x080601ac

080a16e0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <HAL_I2C_End_Transmission+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601ac 	.word	0x080601ac

080a16f0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <HAL_I2C_Write_Data+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601ac 	.word	0x080601ac

080a1700 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <HAL_I2C_Available_Data+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601ac 	.word	0x080601ac

080a1710 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <HAL_I2C_Read_Data+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601ac 	.word	0x080601ac

080a1720 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <HAL_I2C_Peek_Data+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601ac 	.word	0x080601ac

080a1730 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_I2C_Flush_Data+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601ac 	.word	0x080601ac

080a1740 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_I2C_Is_Enabled+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601ac 	.word	0x080601ac

080a1750 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b03      	ldr	r3, [pc, #12]	; (80a1760 <HAL_I2C_Init+0x10>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a175a:	9301      	str	r3, [sp, #4]
 80a175c:	bd08      	pop	{r3, pc}
 80a175e:	0000      	.short	0x0000
 80a1760:	080601ac 	.word	0x080601ac

080a1764 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_Servo_Attach+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	691b      	ldr	r3, [r3, #16]
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601a8 	.word	0x080601a8

080a1774 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_Servo_Detach+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	695b      	ldr	r3, [r3, #20]
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601a8 	.word	0x080601a8

080a1784 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	699b      	ldr	r3, [r3, #24]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601a8 	.word	0x080601a8

080a1794 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USB_USART_Init+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	681b      	ldr	r3, [r3, #0]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601d8 	.word	0x080601d8

080a17a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <HAL_USB_USART_Begin+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	685b      	ldr	r3, [r3, #4]
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601d8 	.word	0x080601d8

080a17b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <HAL_USB_USART_Available_Data+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	691b      	ldr	r3, [r3, #16]
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601d8 	.word	0x080601d8

080a17c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	695b      	ldr	r3, [r3, #20]
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601d8 	.word	0x080601d8

080a17d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <HAL_USB_USART_Receive_Data+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	699b      	ldr	r3, [r3, #24]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601d8 	.word	0x080601d8

080a17e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <HAL_USB_USART_Send_Data+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	69db      	ldr	r3, [r3, #28]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601d8 	.word	0x080601d8

080a17f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <HAL_USB_USART_Flush_Data+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	6a1b      	ldr	r3, [r3, #32]
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601d8 	.word	0x080601d8

080a1804 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <LED_SetSignalingColor+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	685b      	ldr	r3, [r3, #4]
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080201a8 	.word	0x080201a8

080a1814 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <LED_Signaling_Start+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	689b      	ldr	r3, [r3, #8]
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080201a8 	.word	0x080201a8

080a1824 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <LED_Signaling_Stop+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	68db      	ldr	r3, [r3, #12]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080201a8 	.word	0x080201a8

080a1834 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <LED_RGB_IsOverRidden+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	699b      	ldr	r3, [r3, #24]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080201a8 	.word	0x080201a8

080a1844 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <LED_On+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	69db      	ldr	r3, [r3, #28]
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080201a8 	.word	0x080201a8

080a1854 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <set_system_mode+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	685b      	ldr	r3, [r3, #4]
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601a4 	.word	0x080601a4

080a1864 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <system_delay_ms+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	695b      	ldr	r3, [r3, #20]
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601a4 	.word	0x080601a4

080a1874 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <system_thread_set_state+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080601a4 	.word	0x080601a4

080a1884 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <system_set_usb_request_app_handler+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601a4 	.word	0x080601a4

080a1894 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <system_set_usb_request_result+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	080601a4 	.word	0x080601a4

080a18a4 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <network_ready+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	691b      	ldr	r3, [r3, #16]
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	080601c8 	.word	0x080601c8

080a18b4 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <free+0xc>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	685b      	ldr	r3, [r3, #4]
 80a18bc:	9301      	str	r3, [sp, #4]
 80a18be:	bd08      	pop	{r3, pc}
 80a18c0:	080601a0 	.word	0x080601a0

080a18c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b02      	ldr	r3, [pc, #8]	; (80a18d0 <vsnprintf+0xc>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18cc:	9301      	str	r3, [sp, #4]
 80a18ce:	bd08      	pop	{r3, pc}
 80a18d0:	080601a0 	.word	0x080601a0

080a18d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a18d4:	4770      	bx	lr

080a18d6 <_ZN8SPIClassD0Ev>:
 80a18d6:	b510      	push	{r4, lr}
 80a18d8:	4604      	mov	r4, r0
 80a18da:	f7fe fbde 	bl	80a009a <_ZdlPv>
 80a18de:	4620      	mov	r0, r4
 80a18e0:	bd10      	pop	{r4, pc}
	...

080a18e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a18e4:	b570      	push	{r4, r5, r6, lr}
 80a18e6:	4604      	mov	r4, r0
 80a18e8:	460e      	mov	r6, r1
 80a18ea:	4b07      	ldr	r3, [pc, #28]	; (80a1908 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a18ec:	2500      	movs	r5, #0
 80a18ee:	6003      	str	r3, [r0, #0]
 80a18f0:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a18f4:	f7ff fe8c 	bl	80a1610 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a18f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a18fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a18fc:	f7ff fe48 	bl	80a1590 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1900:	60a5      	str	r5, [r4, #8]
}
 80a1902:	4620      	mov	r0, r4
 80a1904:	bd70      	pop	{r4, r5, r6, pc}
 80a1906:	bf00      	nop
 80a1908:	080a2e48 	.word	0x080a2e48

080a190c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a190c:	7900      	ldrb	r0, [r0, #4]
 80a190e:	f7ff be47 	b.w	80a15a0 <HAL_SPI_Is_Enabled>

080a1912 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1912:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1916:	1c53      	adds	r3, r2, #1
 80a1918:	d00b      	beq.n	80a1932 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a191a:	8843      	ldrh	r3, [r0, #2]
 80a191c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a191e:	428b      	cmp	r3, r1
 80a1920:	d803      	bhi.n	80a192a <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a1922:	4288      	cmp	r0, r1
 80a1924:	4603      	mov	r3, r0
 80a1926:	bf28      	it	cs
 80a1928:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a192a:	4619      	mov	r1, r3
 80a192c:	b290      	uxth	r0, r2
 80a192e:	f7ff bf29 	b.w	80a1784 <HAL_Servo_Write_Pulse_Width>
 80a1932:	4770      	bx	lr

080a1934 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1934:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a1938:	22b4      	movs	r2, #180	; 0xb4
 80a193a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a193c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1940:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1942:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1944:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1946:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a194a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a194c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a194e:	60c3      	str	r3, [r0, #12]
 80a1950:	4770      	bx	lr

080a1952 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a1952:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a1954:	f7ff ffee 	bl	80a1934 <_ZN5Servo11resetFieldsEv>
}
 80a1958:	bd08      	pop	{r3, pc}

080a195a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a195a:	b510      	push	{r4, lr}
 80a195c:	4604      	mov	r4, r0
 80a195e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a1962:	1c43      	adds	r3, r0, #1
 80a1964:	d007      	beq.n	80a1976 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a1966:	b280      	uxth	r0, r0
 80a1968:	f7ff ff04 	bl	80a1774 <HAL_Servo_Detach>

  this->resetFields();
 80a196c:	4620      	mov	r0, r4
 80a196e:	f7ff ffe1 	bl	80a1934 <_ZN5Servo11resetFieldsEv>

  return true;
 80a1972:	2001      	movs	r0, #1
 80a1974:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a1976:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a1978:	bd10      	pop	{r4, pc}

080a197a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a197e:	460d      	mov	r5, r1
 80a1980:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1982:	2102      	movs	r1, #2
 80a1984:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1986:	4690      	mov	r8, r2
 80a1988:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a198a:	f7ff fdc9 	bl	80a1520 <HAL_Validate_Pin_Function>
 80a198e:	2802      	cmp	r0, #2
 80a1990:	d001      	beq.n	80a1996 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a1992:	2600      	movs	r6, #0
 80a1994:	e019      	b.n	80a19ca <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1996:	4628      	mov	r0, r5
 80a1998:	f000 fb96 	bl	80a20c8 <pinAvailable>
 80a199c:	4606      	mov	r6, r0
 80a199e:	2800      	cmp	r0, #0
 80a19a0:	d0f7      	beq.n	80a1992 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a19a2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a19a6:	3301      	adds	r3, #1
 80a19a8:	d002      	beq.n	80a19b0 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a19aa:	4620      	mov	r0, r4
 80a19ac:	f7ff ffd5 	bl	80a195a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a19b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a19b4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a19b6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a19b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a19bc:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a19c0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a19c2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a19c4:	4628      	mov	r0, r5
 80a19c6:	f7ff fecd 	bl	80a1764 <HAL_Servo_Attach>

  return true;
}
 80a19ca:	4630      	mov	r0, r6
 80a19cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a19d0 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19d0:	2000      	movs	r0, #0
 80a19d2:	f7ff bf3f 	b.w	80a1854 <set_system_mode>

080a19d6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a19d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19d8:	4606      	mov	r6, r0
 80a19da:	460d      	mov	r5, r1
 80a19dc:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a19de:	2400      	movs	r4, #0
  while (size--) {
 80a19e0:	42bd      	cmp	r5, r7
 80a19e2:	d00c      	beq.n	80a19fe <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a19e4:	6833      	ldr	r3, [r6, #0]
 80a19e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a19ea:	689b      	ldr	r3, [r3, #8]
 80a19ec:	4630      	mov	r0, r6
 80a19ee:	4798      	blx	r3
     if (chunk>=0)
 80a19f0:	2800      	cmp	r0, #0
 80a19f2:	db01      	blt.n	80a19f8 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a19f4:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a19f6:	e7f3      	b.n	80a19e0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a19f8:	2c00      	cmp	r4, #0
 80a19fa:	bf08      	it	eq
 80a19fc:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a19fe:	4620      	mov	r0, r4
 80a1a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a02 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1a02:	b570      	push	{r4, r5, r6, lr}
 80a1a04:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a06:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1a08:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1a0a:	b149      	cbz	r1, 80a1a20 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a0c:	f001 f9ad 	bl	80a2d6a <strlen>
 80a1a10:	682b      	ldr	r3, [r5, #0]
 80a1a12:	4602      	mov	r2, r0
 80a1a14:	4621      	mov	r1, r4
 80a1a16:	4628      	mov	r0, r5
    }
 80a1a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1a1c:	68db      	ldr	r3, [r3, #12]
 80a1a1e:	4718      	bx	r3
    }
 80a1a20:	bd70      	pop	{r4, r5, r6, pc}

080a1a22 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a22:	6803      	ldr	r3, [r0, #0]
 80a1a24:	689b      	ldr	r3, [r3, #8]
 80a1a26:	4718      	bx	r3

080a1a28 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1a28:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1a2a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1a2c:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1a2e:	f7ff fff8 	bl	80a1a22 <_ZN5Print5printEc>
  n += print('\n');
 80a1a32:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1a34:	4604      	mov	r4, r0
  n += print('\n');
 80a1a36:	4628      	mov	r0, r5
 80a1a38:	f7ff fff3 	bl	80a1a22 <_ZN5Print5printEc>
  return n;
}
 80a1a3c:	4420      	add	r0, r4
 80a1a3e:	bd38      	pop	{r3, r4, r5, pc}

080a1a40 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1a40:	b538      	push	{r3, r4, r5, lr}
 80a1a42:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a44:	f7ff ffdd 	bl	80a1a02 <_ZN5Print5writeEPKc>
 80a1a48:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1a4a:	4628      	mov	r0, r5
 80a1a4c:	f7ff ffec 	bl	80a1a28 <_ZN5Print7printlnEv>
  return n;
}
 80a1a50:	4420      	add	r0, r4
 80a1a52:	bd38      	pop	{r3, r4, r5, pc}

080a1a54 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a54:	2a01      	cmp	r2, #1
 80a1a56:	bf98      	it	ls
 80a1a58:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a5a:	b530      	push	{r4, r5, lr}
 80a1a5c:	460b      	mov	r3, r1
 80a1a5e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a60:	2100      	movs	r1, #0
 80a1a62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1a66:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1a6a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1a6e:	fb05 3312 	mls	r3, r5, r2, r3
 80a1a72:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a74:	2b09      	cmp	r3, #9
 80a1a76:	bf94      	ite	ls
 80a1a78:	3330      	addls	r3, #48	; 0x30
 80a1a7a:	3337      	addhi	r3, #55	; 0x37
 80a1a7c:	b2db      	uxtb	r3, r3
 80a1a7e:	4621      	mov	r1, r4
 80a1a80:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a84:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a86:	2d00      	cmp	r5, #0
 80a1a88:	d1ef      	bne.n	80a1a6a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a8a:	f7ff ffba 	bl	80a1a02 <_ZN5Print5writeEPKc>
}
 80a1a8e:	b00b      	add	sp, #44	; 0x2c
 80a1a90:	bd30      	pop	{r4, r5, pc}

080a1a92 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a92:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a94:	b922      	cbnz	r2, 80a1aa0 <_ZN5Print5printEmi+0xe>
 80a1a96:	6803      	ldr	r3, [r0, #0]
 80a1a98:	b2c9      	uxtb	r1, r1
 80a1a9a:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a9c:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a9e:	4718      	bx	r3
  else return printNumber(n, base);
 80a1aa0:	b2d2      	uxtb	r2, r2
}
 80a1aa2:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1aa4:	f7ff bfd6 	b.w	80a1a54 <_ZN5Print11printNumberEmh>

080a1aa8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1aa8:	f7ff bff3 	b.w	80a1a92 <_ZN5Print5printEmi>

080a1aac <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1aac:	b40c      	push	{r2, r3}
 80a1aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1ab2:	b087      	sub	sp, #28
 80a1ab4:	af00      	add	r7, sp, #0
 80a1ab6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1aba:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1abe:	4605      	mov	r5, r0
 80a1ac0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1ac2:	4623      	mov	r3, r4
 80a1ac4:	464a      	mov	r2, r9
 80a1ac6:	2114      	movs	r1, #20
 80a1ac8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1aca:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1acc:	f7ff fefa 	bl	80a18c4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1ad0:	2813      	cmp	r0, #19
 80a1ad2:	d805      	bhi.n	80a1ae0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ad4:	1d39      	adds	r1, r7, #4
 80a1ad6:	4628      	mov	r0, r5
 80a1ad8:	f7ff ff93 	bl	80a1a02 <_ZN5Print5writeEPKc>
 80a1adc:	4604      	mov	r4, r0
 80a1ade:	e013      	b.n	80a1b08 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1ae0:	f100 0308 	add.w	r3, r0, #8
 80a1ae4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1ae8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1aea:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1aee:	1c41      	adds	r1, r0, #1
 80a1af0:	4623      	mov	r3, r4
 80a1af2:	464a      	mov	r2, r9
 80a1af4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1af6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1af8:	f7ff fee4 	bl	80a18c4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1afc:	4669      	mov	r1, sp
 80a1afe:	4628      	mov	r0, r5
 80a1b00:	f7ff ff7f 	bl	80a1a02 <_ZN5Print5writeEPKc>
 80a1b04:	4604      	mov	r4, r0
 80a1b06:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1b08:	b11e      	cbz	r6, 80a1b12 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1b0a:	4628      	mov	r0, r5
 80a1b0c:	f7ff ff8c 	bl	80a1a28 <_ZN5Print7printlnEv>
 80a1b10:	4404      	add	r4, r0
    return n;
}
 80a1b12:	4620      	mov	r0, r4
 80a1b14:	371c      	adds	r7, #28
 80a1b16:	46bd      	mov	sp, r7
 80a1b18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b1c:	b002      	add	sp, #8
 80a1b1e:	4770      	bx	lr

080a1b20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1b20:	4a01      	ldr	r2, [pc, #4]	; (80a1b28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1b24:	601a      	str	r2, [r3, #0]
 80a1b26:	4770      	bx	lr
 80a1b28:	080a2f08 	.word	0x080a2f08
 80a1b2c:	200003ec 	.word	0x200003ec

080a1b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b30:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b32:	681a      	ldr	r2, [r3, #0]
 80a1b34:	4b02      	ldr	r3, [pc, #8]	; (80a1b40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b36:	601a      	str	r2, [r3, #0]
 80a1b38:	4770      	bx	lr
 80a1b3a:	bf00      	nop
 80a1b3c:	20000324 	.word	0x20000324
 80a1b40:	200003f0 	.word	0x200003f0

080a1b44 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1b44:	2100      	movs	r1, #0
 80a1b46:	f7ff be8d 	b.w	80a1864 <system_delay_ms>

080a1b4a <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a1b4a:	b510      	push	{r4, lr}
 80a1b4c:	4604      	mov	r4, r0
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a1b4e:	f7ff fe71 	bl	80a1834 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if(override == controlled())
 80a1b52:	4284      	cmp	r4, r0
 80a1b54:	d008      	beq.n	80a1b68 <_ZN8RGBClass7controlEb+0x1e>
            return;
    else if (override)
 80a1b56:	b11c      	cbz	r4, 80a1b60 <_ZN8RGBClass7controlEb+0x16>
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
}
 80a1b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
 80a1b5c:	f7ff be5a 	b.w	80a1814 <LED_Signaling_Start>
    else
            LED_Signaling_Stop();
}
 80a1b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
 80a1b64:	f7ff be5e 	b.w	80a1824 <LED_Signaling_Stop>
 80a1b68:	bd10      	pop	{r4, pc}

080a1b6a <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a1b6a:	b570      	push	{r4, r5, r6, lr}
 80a1b6c:	4605      	mov	r5, r0
 80a1b6e:	460e      	mov	r6, r1
 80a1b70:	4614      	mov	r4, r2
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a1b72:	f7ff fe5f 	bl	80a1834 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled())
 80a1b76:	b150      	cbz	r0, 80a1b8e <_ZN8RGBClass5colorEiii+0x24>
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a1b78:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80a1b7c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80a1b80:	f7ff fe40 	bl	80a1804 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a1b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled())
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80a1b88:	20e7      	movs	r0, #231	; 0xe7
 80a1b8a:	f7ff be5b 	b.w	80a1844 <LED_On>
 80a1b8e:	bd70      	pop	{r4, r5, r6, pc}

080a1b90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1b90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1b92:	4b14      	ldr	r3, [pc, #80]	; (80a1be4 <serialEventRun+0x54>)
 80a1b94:	b133      	cbz	r3, 80a1ba4 <serialEventRun+0x14>
 80a1b96:	f000 f925 	bl	80a1de4 <_Z16_fetch_usbserialv>
 80a1b9a:	6803      	ldr	r3, [r0, #0]
 80a1b9c:	691b      	ldr	r3, [r3, #16]
 80a1b9e:	4798      	blx	r3
 80a1ba0:	2800      	cmp	r0, #0
 80a1ba2:	dc16      	bgt.n	80a1bd2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1ba4:	4b10      	ldr	r3, [pc, #64]	; (80a1be8 <serialEventRun+0x58>)
 80a1ba6:	b133      	cbz	r3, 80a1bb6 <serialEventRun+0x26>
 80a1ba8:	f000 f9ea 	bl	80a1f80 <_Z22__fetch_global_Serial1v>
 80a1bac:	6803      	ldr	r3, [r0, #0]
 80a1bae:	691b      	ldr	r3, [r3, #16]
 80a1bb0:	4798      	blx	r3
 80a1bb2:	2800      	cmp	r0, #0
 80a1bb4:	dc10      	bgt.n	80a1bd8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1bb6:	4b0d      	ldr	r3, [pc, #52]	; (80a1bec <serialEventRun+0x5c>)
 80a1bb8:	b10b      	cbz	r3, 80a1bbe <serialEventRun+0x2e>
 80a1bba:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1bbe:	4b0c      	ldr	r3, [pc, #48]	; (80a1bf0 <serialEventRun+0x60>)
 80a1bc0:	b17b      	cbz	r3, 80a1be2 <serialEventRun+0x52>
 80a1bc2:	f000 f94b 	bl	80a1e5c <_Z17_fetch_usbserial1v>
 80a1bc6:	6803      	ldr	r3, [r0, #0]
 80a1bc8:	691b      	ldr	r3, [r3, #16]
 80a1bca:	4798      	blx	r3
 80a1bcc:	2800      	cmp	r0, #0
 80a1bce:	dc06      	bgt.n	80a1bde <serialEventRun+0x4e>
 80a1bd0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1bd2:	f3af 8000 	nop.w
 80a1bd6:	e7e5      	b.n	80a1ba4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1bd8:	f3af 8000 	nop.w
 80a1bdc:	e7eb      	b.n	80a1bb6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1bde:	f3af 8000 	nop.w
 80a1be2:	bd08      	pop	{r3, pc}
	...

080a1bf4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1bf4:	b508      	push	{r3, lr}
	serialEventRun();
 80a1bf6:	f7ff ffcb 	bl	80a1b90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1bfa:	f7ff fce1 	bl	80a15c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1bfe:	4b01      	ldr	r3, [pc, #4]	; (80a1c04 <_post_loop+0x10>)
 80a1c00:	6018      	str	r0, [r3, #0]
 80a1c02:	bd08      	pop	{r3, pc}
 80a1c04:	2000087c 	.word	0x2000087c

080a1c08 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1c08:	4802      	ldr	r0, [pc, #8]	; (80a1c14 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1c0a:	4a03      	ldr	r2, [pc, #12]	; (80a1c18 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1c0c:	4903      	ldr	r1, [pc, #12]	; (80a1c1c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1c0e:	1a12      	subs	r2, r2, r0
 80a1c10:	f001 b898 	b.w	80a2d44 <memcpy>
 80a1c14:	40024000 	.word	0x40024000
 80a1c18:	40024004 	.word	0x40024004
 80a1c1c:	080a3040 	.word	0x080a3040

080a1c20 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1c20:	2000      	movs	r0, #0
 80a1c22:	4770      	bx	lr

080a1c24 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1c26:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1c28:	4604      	mov	r4, r0
    switch (req->type) {
 80a1c2a:	2b0a      	cmp	r3, #10
 80a1c2c:	d00e      	beq.n	80a1c4c <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1c2e:	2b50      	cmp	r3, #80	; 0x50
 80a1c30:	d11c      	bne.n	80a1c6c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1c32:	4b10      	ldr	r3, [pc, #64]	; (80a1c74 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1c34:	681d      	ldr	r5, [r3, #0]
 80a1c36:	b1cd      	cbz	r5, 80a1c6c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1c38:	7d03      	ldrb	r3, [r0, #20]
 80a1c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1c3e:	9300      	str	r3, [sp, #0]
 80a1c40:	68c2      	ldr	r2, [r0, #12]
 80a1c42:	f100 0310 	add.w	r3, r0, #16
 80a1c46:	6880      	ldr	r0, [r0, #8]
 80a1c48:	47a8      	blx	r5
 80a1c4a:	e007      	b.n	80a1c5c <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1c4c:	f100 0310 	add.w	r3, r0, #16
 80a1c50:	68c2      	ldr	r2, [r0, #12]
 80a1c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1c56:	6880      	ldr	r0, [r0, #8]
 80a1c58:	f7ff ffe2 	bl	80a1c20 <_Z26usb_request_custom_handlerPcjjPj>
 80a1c5c:	b130      	cbz	r0, 80a1c6c <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1c5e:	2200      	movs	r2, #0
 80a1c60:	4620      	mov	r0, r4
 80a1c62:	4611      	mov	r1, r2
 80a1c64:	f7ff fe16 	bl	80a1894 <system_set_usb_request_result>
        return true;
 80a1c68:	2001      	movs	r0, #1
 80a1c6a:	e000      	b.n	80a1c6e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1c6c:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1c6e:	b003      	add	sp, #12
 80a1c70:	bd30      	pop	{r4, r5, pc}
 80a1c72:	bf00      	nop
 80a1c74:	200003f4 	.word	0x200003f4

080a1c78 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1c78:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1c7a:	4c0c      	ldr	r4, [pc, #48]	; (80a1cac <module_user_init_hook+0x34>)
 80a1c7c:	4d0c      	ldr	r5, [pc, #48]	; (80a1cb0 <module_user_init_hook+0x38>)
 80a1c7e:	6823      	ldr	r3, [r4, #0]
 80a1c80:	42ab      	cmp	r3, r5
 80a1c82:	4b0c      	ldr	r3, [pc, #48]	; (80a1cb4 <module_user_init_hook+0x3c>)
 80a1c84:	bf0c      	ite	eq
 80a1c86:	2201      	moveq	r2, #1
 80a1c88:	2200      	movne	r2, #0
 80a1c8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1c8c:	d002      	beq.n	80a1c94 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1c8e:	f7ff ffbb 	bl	80a1c08 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1c92:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1c94:	4b08      	ldr	r3, [pc, #32]	; (80a1cb8 <module_user_init_hook+0x40>)
 80a1c96:	b11b      	cbz	r3, 80a1ca0 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1c98:	f7ff fc8a 	bl	80a15b0 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1c9c:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1ca4:	2100      	movs	r1, #0
 80a1ca6:	4805      	ldr	r0, [pc, #20]	; (80a1cbc <module_user_init_hook+0x44>)
 80a1ca8:	f7ff bdec 	b.w	80a1884 <system_set_usb_request_app_handler>
 80a1cac:	40024000 	.word	0x40024000
 80a1cb0:	9a271c1e 	.word	0x9a271c1e
 80a1cb4:	200003f8 	.word	0x200003f8
 80a1cb8:	00000000 	.word	0x00000000
 80a1cbc:	080a1c25 	.word	0x080a1c25

080a1cc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1cc0:	4770      	bx	lr

080a1cc2 <_ZN9IPAddressD0Ev>:
 80a1cc2:	b510      	push	{r4, lr}
 80a1cc4:	4604      	mov	r4, r0
 80a1cc6:	f7fe f9e8 	bl	80a009a <_ZdlPv>
 80a1cca:	4620      	mov	r0, r4
 80a1ccc:	bd10      	pop	{r4, pc}

080a1cce <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cd0:	460f      	mov	r7, r1
 80a1cd2:	f100 0608 	add.w	r6, r0, #8
 80a1cd6:	1d05      	adds	r5, r0, #4
 80a1cd8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1cde:	220a      	movs	r2, #10
 80a1ce0:	4638      	mov	r0, r7
 80a1ce2:	f7ff fee1 	bl	80a1aa8 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ce6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ce8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1cea:	d007      	beq.n	80a1cfc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1cec:	2c00      	cmp	r4, #0
 80a1cee:	d0f4      	beq.n	80a1cda <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1cf0:	212e      	movs	r1, #46	; 0x2e
 80a1cf2:	4638      	mov	r0, r7
 80a1cf4:	f7ff fe95 	bl	80a1a22 <_ZN5Print5printEc>
 80a1cf8:	4404      	add	r4, r0
 80a1cfa:	e7ee      	b.n	80a1cda <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d00 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d12:	2304      	movs	r3, #4
 80a1d14:	6041      	str	r1, [r0, #4]
 80a1d16:	7503      	strb	r3, [r0, #20]
 80a1d18:	bd10      	pop	{r4, pc}
	...

080a1d1c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d1e:	4d04      	ldr	r5, [pc, #16]	; (80a1d30 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1d20:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1d22:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1d26:	9500      	str	r5, [sp, #0]
 80a1d28:	f7ff ffea 	bl	80a1d00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1d2c:	b003      	add	sp, #12
 80a1d2e:	bd30      	pop	{r4, r5, pc}
 80a1d30:	080a2f64 	.word	0x080a2f64

080a1d34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d34:	7441      	strb	r1, [r0, #17]
 80a1d36:	4770      	bx	lr

080a1d38 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1d38:	4770      	bx	lr

080a1d3a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1d3a:	2100      	movs	r1, #0
 80a1d3c:	7c00      	ldrb	r0, [r0, #16]
 80a1d3e:	f7ff bd49 	b.w	80a17d4 <HAL_USB_USART_Receive_Data>

080a1d42 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1d42:	2101      	movs	r1, #1
 80a1d44:	7c00      	ldrb	r0, [r0, #16]
 80a1d46:	f7ff bd45 	b.w	80a17d4 <HAL_USB_USART_Receive_Data>

080a1d4a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1d4a:	7c00      	ldrb	r0, [r0, #16]
 80a1d4c:	f7ff bd3a 	b.w	80a17c4 <HAL_USB_USART_Available_Data_For_Write>

080a1d50 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1d50:	7c00      	ldrb	r0, [r0, #16]
 80a1d52:	f7ff bd2f 	b.w	80a17b4 <HAL_USB_USART_Available_Data>

080a1d56 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d56:	b538      	push	{r3, r4, r5, lr}
 80a1d58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d5a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d5e:	f7ff fd31 	bl	80a17c4 <HAL_USB_USART_Available_Data_For_Write>
 80a1d62:	2800      	cmp	r0, #0
 80a1d64:	dc01      	bgt.n	80a1d6a <_ZN9USBSerial5writeEh+0x14>
 80a1d66:	7c60      	ldrb	r0, [r4, #17]
 80a1d68:	b120      	cbz	r0, 80a1d74 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1d6a:	4629      	mov	r1, r5
 80a1d6c:	7c20      	ldrb	r0, [r4, #16]
 80a1d6e:	f7ff fd39 	bl	80a17e4 <HAL_USB_USART_Send_Data>
    return 1;
 80a1d72:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1d74:	bd38      	pop	{r3, r4, r5, pc}

080a1d76 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d76:	7c00      	ldrb	r0, [r0, #16]
 80a1d78:	f7ff bd3c 	b.w	80a17f4 <HAL_USB_USART_Flush_Data>

080a1d7c <_ZN9USBSerialD0Ev>:
 80a1d7c:	b510      	push	{r4, lr}
 80a1d7e:	4604      	mov	r4, r0
 80a1d80:	f7fe f98b 	bl	80a009a <_ZdlPv>
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	bd10      	pop	{r4, pc}

080a1d88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d88:	b510      	push	{r4, lr}
 80a1d8a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d8c:	2300      	movs	r3, #0
 80a1d8e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d94:	60a3      	str	r3, [r4, #8]
 80a1d96:	4b05      	ldr	r3, [pc, #20]	; (80a1dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1d98:	4608      	mov	r0, r1
 80a1d9a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1d9c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1d9e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1da0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1da2:	4611      	mov	r1, r2
 80a1da4:	f7ff fcf6 	bl	80a1794 <HAL_USB_USART_Init>
}
 80a1da8:	4620      	mov	r0, r4
 80a1daa:	bd10      	pop	{r4, pc}
 80a1dac:	080a2f78 	.word	0x080a2f78

080a1db0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1db0:	2200      	movs	r2, #0
 80a1db2:	7c00      	ldrb	r0, [r0, #16]
 80a1db4:	f7ff bcf6 	b.w	80a17a4 <HAL_USB_USART_Begin>

080a1db8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1db8:	b510      	push	{r4, lr}
 80a1dba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1dbc:	2214      	movs	r2, #20
 80a1dbe:	2100      	movs	r1, #0
 80a1dc0:	f000 ffcb 	bl	80a2d5a <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1dc4:	4b05      	ldr	r3, [pc, #20]	; (80a1ddc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1dc6:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1dc8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1dca:	4b05      	ldr	r3, [pc, #20]	; (80a1de0 <_Z19acquireSerialBufferv+0x28>)
 80a1dcc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1dce:	f240 1301 	movw	r3, #257	; 0x101
 80a1dd2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1dd4:	2381      	movs	r3, #129	; 0x81
 80a1dd6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1dd8:	bd10      	pop	{r4, pc}
 80a1dda:	bf00      	nop
 80a1ddc:	20000481 	.word	0x20000481
 80a1de0:	20000400 	.word	0x20000400

080a1de4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1de4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1de6:	4d0e      	ldr	r5, [pc, #56]	; (80a1e20 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1de8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1dea:	a801      	add	r0, sp, #4
 80a1dec:	f7ff ffe4 	bl	80a1db8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1df0:	6829      	ldr	r1, [r5, #0]
 80a1df2:	f011 0401 	ands.w	r4, r1, #1
 80a1df6:	d110      	bne.n	80a1e1a <_Z16_fetch_usbserialv+0x36>
 80a1df8:	4628      	mov	r0, r5
 80a1dfa:	f7fe f950 	bl	80a009e <__cxa_guard_acquire>
 80a1dfe:	b160      	cbz	r0, 80a1e1a <_Z16_fetch_usbserialv+0x36>
 80a1e00:	aa01      	add	r2, sp, #4
 80a1e02:	4621      	mov	r1, r4
 80a1e04:	4807      	ldr	r0, [pc, #28]	; (80a1e24 <_Z16_fetch_usbserialv+0x40>)
 80a1e06:	f7ff ffbf 	bl	80a1d88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e0a:	4628      	mov	r0, r5
 80a1e0c:	f7fe f94c 	bl	80a00a8 <__cxa_guard_release>
 80a1e10:	4a05      	ldr	r2, [pc, #20]	; (80a1e28 <_Z16_fetch_usbserialv+0x44>)
 80a1e12:	4906      	ldr	r1, [pc, #24]	; (80a1e2c <_Z16_fetch_usbserialv+0x48>)
 80a1e14:	4803      	ldr	r0, [pc, #12]	; (80a1e24 <_Z16_fetch_usbserialv+0x40>)
 80a1e16:	f000 fa13 	bl	80a2240 <__aeabi_atexit>
	return _usbserial;
}
 80a1e1a:	4802      	ldr	r0, [pc, #8]	; (80a1e24 <_Z16_fetch_usbserialv+0x40>)
 80a1e1c:	b007      	add	sp, #28
 80a1e1e:	bd30      	pop	{r4, r5, pc}
 80a1e20:	200003fc 	.word	0x200003fc
 80a1e24:	20000584 	.word	0x20000584
 80a1e28:	20000328 	.word	0x20000328
 80a1e2c:	080a1d39 	.word	0x080a1d39

080a1e30 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1e30:	b510      	push	{r4, lr}
 80a1e32:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e34:	2214      	movs	r2, #20
 80a1e36:	2100      	movs	r1, #0
 80a1e38:	f000 ff8f 	bl	80a2d5a <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e3c:	4b05      	ldr	r3, [pc, #20]	; (80a1e54 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e3e:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e40:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1e42:	4b05      	ldr	r3, [pc, #20]	; (80a1e58 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1e44:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e46:	f240 1301 	movw	r3, #257	; 0x101
 80a1e4a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e4c:	2381      	movs	r3, #129	; 0x81
 80a1e4e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e50:	bd10      	pop	{r4, pc}
 80a1e52:	bf00      	nop
 80a1e54:	20000634 	.word	0x20000634
 80a1e58:	2000059c 	.word	0x2000059c

080a1e5c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1e5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e5e:	4c0e      	ldr	r4, [pc, #56]	; (80a1e98 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1e60:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1e62:	a801      	add	r0, sp, #4
 80a1e64:	f7ff ffe4 	bl	80a1e30 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e68:	6823      	ldr	r3, [r4, #0]
 80a1e6a:	07db      	lsls	r3, r3, #31
 80a1e6c:	d410      	bmi.n	80a1e90 <_Z17_fetch_usbserial1v+0x34>
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f7fe f915 	bl	80a009e <__cxa_guard_acquire>
 80a1e74:	b160      	cbz	r0, 80a1e90 <_Z17_fetch_usbserial1v+0x34>
 80a1e76:	aa01      	add	r2, sp, #4
 80a1e78:	2101      	movs	r1, #1
 80a1e7a:	4808      	ldr	r0, [pc, #32]	; (80a1e9c <_Z17_fetch_usbserial1v+0x40>)
 80a1e7c:	f7ff ff84 	bl	80a1d88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e80:	4620      	mov	r0, r4
 80a1e82:	f7fe f911 	bl	80a00a8 <__cxa_guard_release>
 80a1e86:	4a06      	ldr	r2, [pc, #24]	; (80a1ea0 <_Z17_fetch_usbserial1v+0x44>)
 80a1e88:	4906      	ldr	r1, [pc, #24]	; (80a1ea4 <_Z17_fetch_usbserial1v+0x48>)
 80a1e8a:	4804      	ldr	r0, [pc, #16]	; (80a1e9c <_Z17_fetch_usbserial1v+0x40>)
 80a1e8c:	f000 f9d8 	bl	80a2240 <__aeabi_atexit>
  return _usbserial1;
}
 80a1e90:	4802      	ldr	r0, [pc, #8]	; (80a1e9c <_Z17_fetch_usbserial1v+0x40>)
 80a1e92:	b006      	add	sp, #24
 80a1e94:	bd10      	pop	{r4, pc}
 80a1e96:	bf00      	nop
 80a1e98:	20000598 	.word	0x20000598
 80a1e9c:	20000620 	.word	0x20000620
 80a1ea0:	20000328 	.word	0x20000328
 80a1ea4:	080a1d39 	.word	0x080a1d39

080a1ea8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1ea8:	4700      	bx	r0
	...

080a1eac <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1eae:	461c      	mov	r4, r3
 80a1eb0:	b085      	sub	sp, #20
 80a1eb2:	4605      	mov	r5, r0
 80a1eb4:	460e      	mov	r6, r1
 80a1eb6:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1eb8:	f7ff fb62 	bl	80a1580 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1ebc:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1ebe:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1ec0:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1ec4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1ec6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1eca:	bfb4      	ite	lt
 80a1ecc:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1ece:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1ed2:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1ed4:	bfa4      	itt	ge
 80a1ed6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1eda:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1edc:	9300      	str	r3, [sp, #0]
 80a1ede:	4632      	mov	r2, r6
 80a1ee0:	463b      	mov	r3, r7
 80a1ee2:	4904      	ldr	r1, [pc, #16]	; (80a1ef4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1ee4:	bfa8      	it	ge
 80a1ee6:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1eea:	f7ff fb41 	bl	80a1570 <HAL_Interrupts_Attach>
    return true;
}
 80a1eee:	2001      	movs	r0, #1
 80a1ef0:	b005      	add	sp, #20
 80a1ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1ef4:	080a1ea9 	.word	0x080a1ea9

080a1ef8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ef8:	4770      	bx	lr

080a1efa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1efa:	7441      	strb	r1, [r0, #17]
 80a1efc:	4770      	bx	lr

080a1efe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1efe:	7c00      	ldrb	r0, [r0, #16]
 80a1f00:	f7ff bbc6 	b.w	80a1690 <HAL_USART_Available_Data_For_Write>

080a1f04 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1f04:	7c00      	ldrb	r0, [r0, #16]
 80a1f06:	f7ff bb9b 	b.w	80a1640 <HAL_USART_Available_Data>

080a1f0a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1f0a:	7c00      	ldrb	r0, [r0, #16]
 80a1f0c:	f7ff bba8 	b.w	80a1660 <HAL_USART_Peek_Data>

080a1f10 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1f10:	7c00      	ldrb	r0, [r0, #16]
 80a1f12:	f7ff bb9d 	b.w	80a1650 <HAL_USART_Read_Data>

080a1f16 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f16:	7c00      	ldrb	r0, [r0, #16]
 80a1f18:	f7ff bbaa 	b.w	80a1670 <HAL_USART_Flush_Data>

080a1f1c <_ZN11USARTSerialD0Ev>:
 80a1f1c:	b510      	push	{r4, lr}
 80a1f1e:	4604      	mov	r4, r0
 80a1f20:	f7fe f8bb 	bl	80a009a <_ZdlPv>
 80a1f24:	4620      	mov	r0, r4
 80a1f26:	bd10      	pop	{r4, pc}

080a1f28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f28:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f2a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f2c:	4604      	mov	r4, r0
 80a1f2e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f30:	b925      	cbnz	r5, 80a1f3c <_ZN11USARTSerial5writeEh+0x14>
 80a1f32:	7c00      	ldrb	r0, [r0, #16]
 80a1f34:	f7ff fbac 	bl	80a1690 <HAL_USART_Available_Data_For_Write>
 80a1f38:	2800      	cmp	r0, #0
 80a1f3a:	dd05      	ble.n	80a1f48 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f3c:	4631      	mov	r1, r6
 80a1f3e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f44:	f7ff bb74 	b.w	80a1630 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f48:	4628      	mov	r0, r5
 80a1f4a:	bd70      	pop	{r4, r5, r6, pc}

080a1f4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f4c:	b510      	push	{r4, lr}
 80a1f4e:	4604      	mov	r4, r0
 80a1f50:	4608      	mov	r0, r1
 80a1f52:	4611      	mov	r1, r2
 80a1f54:	2200      	movs	r2, #0
 80a1f56:	6062      	str	r2, [r4, #4]
 80a1f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f5c:	60a2      	str	r2, [r4, #8]
 80a1f5e:	4a05      	ldr	r2, [pc, #20]	; (80a1f74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f60:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f62:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f64:	2201      	movs	r2, #1
 80a1f66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f68:	461a      	mov	r2, r3
 80a1f6a:	f7ff fb59 	bl	80a1620 <HAL_USART_Init>
}
 80a1f6e:	4620      	mov	r0, r4
 80a1f70:	bd10      	pop	{r4, pc}
 80a1f72:	bf00      	nop
 80a1f74:	080a2fa8 	.word	0x080a2fa8

080a1f78 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1f78:	7c00      	ldrb	r0, [r0, #16]
 80a1f7a:	f7ff bb81 	b.w	80a1680 <HAL_USART_Is_Enabled>
	...

080a1f80 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a1f80:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f82:	4d0c      	ldr	r5, [pc, #48]	; (80a1fb4 <_Z22__fetch_global_Serial1v+0x34>)
 80a1f84:	6829      	ldr	r1, [r5, #0]
 80a1f86:	f011 0401 	ands.w	r4, r1, #1
 80a1f8a:	d111      	bne.n	80a1fb0 <_Z22__fetch_global_Serial1v+0x30>
 80a1f8c:	4628      	mov	r0, r5
 80a1f8e:	f7fe f886 	bl	80a009e <__cxa_guard_acquire>
 80a1f92:	b168      	cbz	r0, 80a1fb0 <_Z22__fetch_global_Serial1v+0x30>
 80a1f94:	4a08      	ldr	r2, [pc, #32]	; (80a1fb8 <_Z22__fetch_global_Serial1v+0x38>)
 80a1f96:	4621      	mov	r1, r4
 80a1f98:	4b08      	ldr	r3, [pc, #32]	; (80a1fbc <_Z22__fetch_global_Serial1v+0x3c>)
 80a1f9a:	4809      	ldr	r0, [pc, #36]	; (80a1fc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f9c:	f7ff ffd6 	bl	80a1f4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1fa0:	4628      	mov	r0, r5
 80a1fa2:	f7fe f881 	bl	80a00a8 <__cxa_guard_release>
 80a1fa6:	4a07      	ldr	r2, [pc, #28]	; (80a1fc4 <_Z22__fetch_global_Serial1v+0x44>)
 80a1fa8:	4907      	ldr	r1, [pc, #28]	; (80a1fc8 <_Z22__fetch_global_Serial1v+0x48>)
 80a1faa:	4805      	ldr	r0, [pc, #20]	; (80a1fc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fac:	f000 f948 	bl	80a2240 <__aeabi_atexit>
	return serial1;
}
 80a1fb0:	4803      	ldr	r0, [pc, #12]	; (80a1fc0 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fb2:	bd38      	pop	{r3, r4, r5, pc}
 80a1fb4:	200007d0 	.word	0x200007d0
 80a1fb8:	200007d4 	.word	0x200007d4
 80a1fbc:	2000074c 	.word	0x2000074c
 80a1fc0:	20000738 	.word	0x20000738
 80a1fc4:	20000328 	.word	0x20000328
 80a1fc8:	080a1ef9 	.word	0x080a1ef9

080a1fcc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1fcc:	4770      	bx	lr

080a1fce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fd0:	4606      	mov	r6, r0
 80a1fd2:	4615      	mov	r5, r2
 80a1fd4:	460c      	mov	r4, r1
 80a1fd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1fd8:	42bc      	cmp	r4, r7
 80a1fda:	d006      	beq.n	80a1fea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1fdc:	6833      	ldr	r3, [r6, #0]
 80a1fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1fe2:	689b      	ldr	r3, [r3, #8]
 80a1fe4:	4630      	mov	r0, r6
 80a1fe6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1fe8:	e7f6      	b.n	80a1fd8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1fea:	4628      	mov	r0, r5
 80a1fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1fee:	2200      	movs	r2, #0
 80a1ff0:	7c00      	ldrb	r0, [r0, #16]
 80a1ff2:	f7ff bb7d 	b.w	80a16f0 <HAL_I2C_Write_Data>

080a1ff6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1ff6:	2100      	movs	r1, #0
 80a1ff8:	7c00      	ldrb	r0, [r0, #16]
 80a1ffa:	f7ff bb81 	b.w	80a1700 <HAL_I2C_Available_Data>

080a1ffe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1ffe:	2100      	movs	r1, #0
 80a2000:	7c00      	ldrb	r0, [r0, #16]
 80a2002:	f7ff bb85 	b.w	80a1710 <HAL_I2C_Read_Data>

080a2006 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2006:	2100      	movs	r1, #0
 80a2008:	7c00      	ldrb	r0, [r0, #16]
 80a200a:	f7ff bb89 	b.w	80a1720 <HAL_I2C_Peek_Data>

080a200e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a200e:	2100      	movs	r1, #0
 80a2010:	7c00      	ldrb	r0, [r0, #16]
 80a2012:	f7ff bb8d 	b.w	80a1730 <HAL_I2C_Flush_Data>

080a2016 <_ZN7TwoWireD0Ev>:
 80a2016:	b510      	push	{r4, lr}
 80a2018:	4604      	mov	r4, r0
 80a201a:	f7fe f83e 	bl	80a009a <_ZdlPv>
 80a201e:	4620      	mov	r0, r4
 80a2020:	bd10      	pop	{r4, pc}
	...

080a2024 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2024:	b510      	push	{r4, lr}
 80a2026:	4604      	mov	r4, r0
 80a2028:	4608      	mov	r0, r1
 80a202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a202e:	60a3      	str	r3, [r4, #8]
 80a2030:	4b04      	ldr	r3, [pc, #16]	; (80a2044 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2032:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2034:	7420      	strb	r0, [r4, #16]
 80a2036:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2038:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a203a:	f7ff fb89 	bl	80a1750 <HAL_I2C_Init>

}
 80a203e:	4620      	mov	r0, r4
 80a2040:	bd10      	pop	{r4, pc}
 80a2042:	bf00      	nop
 80a2044:	080a2fd8 	.word	0x080a2fd8

080a2048 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a2048:	2200      	movs	r2, #0
 80a204a:	7c00      	ldrb	r0, [r0, #16]
 80a204c:	f7ff bb28 	b.w	80a16a0 <HAL_I2C_Set_Speed>

080a2050 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2050:	2300      	movs	r3, #0
 80a2052:	461a      	mov	r2, r3
 80a2054:	4619      	mov	r1, r3
 80a2056:	7c00      	ldrb	r0, [r0, #16]
 80a2058:	f7ff bb2a 	b.w	80a16b0 <HAL_I2C_Begin>

080a205c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a205c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a205e:	2400      	movs	r4, #0
 80a2060:	7c00      	ldrb	r0, [r0, #16]
 80a2062:	9400      	str	r4, [sp, #0]
 80a2064:	f7ff fb2c 	bl	80a16c0 <HAL_I2C_Request_Data>
  return result;
}
 80a2068:	b2c0      	uxtb	r0, r0
 80a206a:	b002      	add	sp, #8
 80a206c:	bd10      	pop	{r4, pc}

080a206e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a206e:	2301      	movs	r3, #1
 80a2070:	f7ff bff4 	b.w	80a205c <_ZN7TwoWire11requestFromEhhh>

080a2074 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2074:	2301      	movs	r3, #1
 80a2076:	b2d2      	uxtb	r2, r2
 80a2078:	b2c9      	uxtb	r1, r1
 80a207a:	f7ff bfef 	b.w	80a205c <_ZN7TwoWire11requestFromEhhh>

080a207e <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a207e:	2200      	movs	r2, #0
 80a2080:	7c00      	ldrb	r0, [r0, #16]
 80a2082:	f7ff bb25 	b.w	80a16d0 <HAL_I2C_Begin_Transmission>

080a2086 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2086:	2200      	movs	r2, #0
 80a2088:	7c00      	ldrb	r0, [r0, #16]
 80a208a:	f7ff bb29 	b.w	80a16e0 <HAL_I2C_End_Transmission>

080a208e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a208e:	2101      	movs	r1, #1
 80a2090:	f7ff bff9 	b.w	80a2086 <_ZN7TwoWire15endTransmissionEh>

080a2094 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2094:	2100      	movs	r1, #0
 80a2096:	7c00      	ldrb	r0, [r0, #16]
 80a2098:	f7ff bb52 	b.w	80a1740 <HAL_I2C_Is_Enabled>

080a209c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a209c:	4770      	bx	lr

080a209e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a209e:	2200      	movs	r2, #0
 80a20a0:	4611      	mov	r1, r2
 80a20a2:	4610      	mov	r0, r2
 80a20a4:	f7ff bbfe 	b.w	80a18a4 <network_ready>

080a20a8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a20a8:	4803      	ldr	r0, [pc, #12]	; (80a20b8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a20aa:	4b04      	ldr	r3, [pc, #16]	; (80a20bc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a20ac:	4a04      	ldr	r2, [pc, #16]	; (80a20c0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a20ae:	4905      	ldr	r1, [pc, #20]	; (80a20c4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a20b0:	6003      	str	r3, [r0, #0]
 80a20b2:	f000 b8c5 	b.w	80a2240 <__aeabi_atexit>
 80a20b6:	bf00      	nop
 80a20b8:	20000858 	.word	0x20000858
 80a20bc:	080a3000 	.word	0x080a3000
 80a20c0:	20000328 	.word	0x20000328
 80a20c4:	080a209d 	.word	0x080a209d

080a20c8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a20c8:	b510      	push	{r4, lr}
 80a20ca:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a20cc:	480f      	ldr	r0, [pc, #60]	; (80a210c <pinAvailable+0x44>)
 80a20ce:	f7ff fc1d 	bl	80a190c <_ZN8SPIClass9isEnabledEv>
 80a20d2:	b128      	cbz	r0, 80a20e0 <pinAvailable+0x18>
 80a20d4:	f1a4 030d 	sub.w	r3, r4, #13
 80a20d8:	2b02      	cmp	r3, #2
 80a20da:	d801      	bhi.n	80a20e0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a20dc:	2000      	movs	r0, #0
 80a20de:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a20e0:	f000 f88e 	bl	80a2200 <_Z19__fetch_global_Wirev>
 80a20e4:	f7ff ffd6 	bl	80a2094 <_ZN7TwoWire9isEnabledEv>
 80a20e8:	b108      	cbz	r0, 80a20ee <pinAvailable+0x26>
 80a20ea:	2c01      	cmp	r4, #1
 80a20ec:	d9f6      	bls.n	80a20dc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a20ee:	f7ff ff47 	bl	80a1f80 <_Z22__fetch_global_Serial1v>
 80a20f2:	f7ff ff41 	bl	80a1f78 <_ZN11USARTSerial9isEnabledEv>
 80a20f6:	b118      	cbz	r0, 80a2100 <pinAvailable+0x38>
 80a20f8:	f1a4 0312 	sub.w	r3, r4, #18
 80a20fc:	2b01      	cmp	r3, #1
 80a20fe:	d9ed      	bls.n	80a20dc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2100:	2c17      	cmp	r4, #23
 80a2102:	bf8c      	ite	hi
 80a2104:	2000      	movhi	r0, #0
 80a2106:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2108:	bd10      	pop	{r4, pc}
 80a210a:	bf00      	nop
 80a210c:	2000085c 	.word	0x2000085c

080a2110 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2110:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2112:	b538      	push	{r3, r4, r5, lr}
 80a2114:	4604      	mov	r4, r0
 80a2116:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2118:	d80a      	bhi.n	80a2130 <pinMode+0x20>
 80a211a:	29ff      	cmp	r1, #255	; 0xff
 80a211c:	d008      	beq.n	80a2130 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a211e:	f7ff ffd3 	bl	80a20c8 <pinAvailable>
 80a2122:	b128      	cbz	r0, 80a2130 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2124:	4629      	mov	r1, r5
 80a2126:	4620      	mov	r0, r4
}
 80a2128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a212c:	f7ff ba00 	b.w	80a1530 <HAL_Pin_Mode>
 80a2130:	bd38      	pop	{r3, r4, r5, pc}

080a2132 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2132:	b538      	push	{r3, r4, r5, lr}
 80a2134:	4604      	mov	r4, r0
 80a2136:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2138:	f7ff fa02 	bl	80a1540 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a213c:	28ff      	cmp	r0, #255	; 0xff
 80a213e:	d010      	beq.n	80a2162 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2140:	2806      	cmp	r0, #6
 80a2142:	d804      	bhi.n	80a214e <digitalWrite+0x1c>
 80a2144:	234d      	movs	r3, #77	; 0x4d
 80a2146:	fa23 f000 	lsr.w	r0, r3, r0
 80a214a:	07c3      	lsls	r3, r0, #31
 80a214c:	d409      	bmi.n	80a2162 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a214e:	4620      	mov	r0, r4
 80a2150:	f7ff ffba 	bl	80a20c8 <pinAvailable>
 80a2154:	b128      	cbz	r0, 80a2162 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2156:	4629      	mov	r1, r5
 80a2158:	4620      	mov	r0, r4
}
 80a215a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a215e:	f7ff b9f7 	b.w	80a1550 <HAL_GPIO_Write>
 80a2162:	bd38      	pop	{r3, r4, r5, pc}

080a2164 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2164:	b510      	push	{r4, lr}
 80a2166:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2168:	f7ff f9ea 	bl	80a1540 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a216c:	3804      	subs	r0, #4
 80a216e:	b2c0      	uxtb	r0, r0
 80a2170:	2801      	cmp	r0, #1
 80a2172:	d908      	bls.n	80a2186 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2174:	4620      	mov	r0, r4
 80a2176:	f7ff ffa7 	bl	80a20c8 <pinAvailable>
 80a217a:	b120      	cbz	r0, 80a2186 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a217c:	4620      	mov	r0, r4
}
 80a217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2182:	f7ff b9ed 	b.w	80a1560 <HAL_GPIO_Read>
}
 80a2186:	2000      	movs	r0, #0
 80a2188:	bd10      	pop	{r4, pc}
	...

080a218c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a218c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a218e:	4c0c      	ldr	r4, [pc, #48]	; (80a21c0 <_GLOBAL__sub_I_SPI+0x34>)
 80a2190:	4e0c      	ldr	r6, [pc, #48]	; (80a21c4 <_GLOBAL__sub_I_SPI+0x38>)
 80a2192:	4d0d      	ldr	r5, [pc, #52]	; (80a21c8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2194:	2100      	movs	r1, #0
 80a2196:	4620      	mov	r0, r4
 80a2198:	f7ff fba4 	bl	80a18e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a219c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a219e:	4c0b      	ldr	r4, [pc, #44]	; (80a21cc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a21a0:	4632      	mov	r2, r6
 80a21a2:	4629      	mov	r1, r5
 80a21a4:	f000 f84c 	bl	80a2240 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a21a8:	2101      	movs	r1, #1
 80a21aa:	4620      	mov	r0, r4
 80a21ac:	f7ff fb9a 	bl	80a18e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a21b0:	4632      	mov	r2, r6
 80a21b2:	4629      	mov	r1, r5
 80a21b4:	4620      	mov	r0, r4
 80a21b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a21ba:	f000 b841 	b.w	80a2240 <__aeabi_atexit>
 80a21be:	bf00      	nop
 80a21c0:	2000085c 	.word	0x2000085c
 80a21c4:	20000328 	.word	0x20000328
 80a21c8:	080a18d5 	.word	0x080a18d5
 80a21cc:	2000086c 	.word	0x2000086c

080a21d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a21d0:	b513      	push	{r0, r1, r4, lr}
 80a21d2:	4c08      	ldr	r4, [pc, #32]	; (80a21f4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a21d4:	2300      	movs	r3, #0
 80a21d6:	461a      	mov	r2, r3
 80a21d8:	4619      	mov	r1, r3
 80a21da:	9300      	str	r3, [sp, #0]
 80a21dc:	4620      	mov	r0, r4
 80a21de:	f7ff fd9d 	bl	80a1d1c <_ZN9IPAddressC1Ehhhh>
 80a21e2:	4620      	mov	r0, r4
 80a21e4:	4a04      	ldr	r2, [pc, #16]	; (80a21f8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a21e6:	4905      	ldr	r1, [pc, #20]	; (80a21fc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a21e8:	b002      	add	sp, #8
 80a21ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a21ee:	f000 b827 	b.w	80a2240 <__aeabi_atexit>
 80a21f2:	bf00      	nop
 80a21f4:	20000880 	.word	0x20000880
 80a21f8:	20000328 	.word	0x20000328
 80a21fc:	080a1cc1 	.word	0x080a1cc1

080a2200 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2200:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2202:	4d0b      	ldr	r5, [pc, #44]	; (80a2230 <_Z19__fetch_global_Wirev+0x30>)
 80a2204:	6829      	ldr	r1, [r5, #0]
 80a2206:	f011 0401 	ands.w	r4, r1, #1
 80a220a:	d10f      	bne.n	80a222c <_Z19__fetch_global_Wirev+0x2c>
 80a220c:	4628      	mov	r0, r5
 80a220e:	f7fd ff46 	bl	80a009e <__cxa_guard_acquire>
 80a2212:	b158      	cbz	r0, 80a222c <_Z19__fetch_global_Wirev+0x2c>
 80a2214:	4621      	mov	r1, r4
 80a2216:	4807      	ldr	r0, [pc, #28]	; (80a2234 <_Z19__fetch_global_Wirev+0x34>)
 80a2218:	f7ff ff04 	bl	80a2024 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a221c:	4628      	mov	r0, r5
 80a221e:	f7fd ff43 	bl	80a00a8 <__cxa_guard_release>
 80a2222:	4a05      	ldr	r2, [pc, #20]	; (80a2238 <_Z19__fetch_global_Wirev+0x38>)
 80a2224:	4905      	ldr	r1, [pc, #20]	; (80a223c <_Z19__fetch_global_Wirev+0x3c>)
 80a2226:	4803      	ldr	r0, [pc, #12]	; (80a2234 <_Z19__fetch_global_Wirev+0x34>)
 80a2228:	f000 f80a 	bl	80a2240 <__aeabi_atexit>
	return wire;
}
 80a222c:	4801      	ldr	r0, [pc, #4]	; (80a2234 <_Z19__fetch_global_Wirev+0x34>)
 80a222e:	bd38      	pop	{r3, r4, r5, pc}
 80a2230:	20000898 	.word	0x20000898
 80a2234:	2000089c 	.word	0x2000089c
 80a2238:	20000328 	.word	0x20000328
 80a223c:	080a1fcd 	.word	0x080a1fcd

080a2240 <__aeabi_atexit>:
 80a2240:	460b      	mov	r3, r1
 80a2242:	4601      	mov	r1, r0
 80a2244:	4618      	mov	r0, r3
 80a2246:	f000 bd6f 	b.w	80a2d28 <__cxa_atexit>
	...

080a224c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a224c:	4b18      	ldr	r3, [pc, #96]	; (80a22b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a224e:	681a      	ldr	r2, [r3, #0]
 80a2250:	07d1      	lsls	r1, r2, #31
 80a2252:	bf5c      	itt	pl
 80a2254:	2201      	movpl	r2, #1
 80a2256:	601a      	strpl	r2, [r3, #0]
 80a2258:	4b16      	ldr	r3, [pc, #88]	; (80a22b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a225a:	681a      	ldr	r2, [r3, #0]
 80a225c:	07d2      	lsls	r2, r2, #31
 80a225e:	bf5c      	itt	pl
 80a2260:	2201      	movpl	r2, #1
 80a2262:	601a      	strpl	r2, [r3, #0]
 80a2264:	4b14      	ldr	r3, [pc, #80]	; (80a22b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2266:	681a      	ldr	r2, [r3, #0]
 80a2268:	07d0      	lsls	r0, r2, #31
 80a226a:	bf5c      	itt	pl
 80a226c:	2201      	movpl	r2, #1
 80a226e:	601a      	strpl	r2, [r3, #0]
 80a2270:	4b12      	ldr	r3, [pc, #72]	; (80a22bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2272:	681a      	ldr	r2, [r3, #0]
 80a2274:	07d1      	lsls	r1, r2, #31
 80a2276:	bf5c      	itt	pl
 80a2278:	2201      	movpl	r2, #1
 80a227a:	601a      	strpl	r2, [r3, #0]
 80a227c:	4b10      	ldr	r3, [pc, #64]	; (80a22c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a227e:	681a      	ldr	r2, [r3, #0]
 80a2280:	07d2      	lsls	r2, r2, #31
 80a2282:	bf5c      	itt	pl
 80a2284:	2201      	movpl	r2, #1
 80a2286:	601a      	strpl	r2, [r3, #0]
 80a2288:	4b0e      	ldr	r3, [pc, #56]	; (80a22c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a228a:	681a      	ldr	r2, [r3, #0]
 80a228c:	07d0      	lsls	r0, r2, #31
 80a228e:	bf5c      	itt	pl
 80a2290:	2201      	movpl	r2, #1
 80a2292:	601a      	strpl	r2, [r3, #0]
 80a2294:	4b0c      	ldr	r3, [pc, #48]	; (80a22c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2296:	681a      	ldr	r2, [r3, #0]
 80a2298:	07d1      	lsls	r1, r2, #31
 80a229a:	bf5c      	itt	pl
 80a229c:	2201      	movpl	r2, #1
 80a229e:	601a      	strpl	r2, [r3, #0]
 80a22a0:	4b0a      	ldr	r3, [pc, #40]	; (80a22cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a22a2:	681a      	ldr	r2, [r3, #0]
 80a22a4:	07d2      	lsls	r2, r2, #31
 80a22a6:	bf5c      	itt	pl
 80a22a8:	2201      	movpl	r2, #1
 80a22aa:	601a      	strpl	r2, [r3, #0]
 80a22ac:	4770      	bx	lr
 80a22ae:	bf00      	nop
 80a22b0:	200008cc 	.word	0x200008cc
 80a22b4:	200008c8 	.word	0x200008c8
 80a22b8:	200008c4 	.word	0x200008c4
 80a22bc:	200008c0 	.word	0x200008c0
 80a22c0:	200008bc 	.word	0x200008bc
 80a22c4:	200008b8 	.word	0x200008b8
 80a22c8:	200008b4 	.word	0x200008b4
 80a22cc:	200008b0 	.word	0x200008b0

080a22d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a22d0:	4b24      	ldr	r3, [pc, #144]	; (80a2364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a22d2:	681a      	ldr	r2, [r3, #0]
 80a22d4:	07d0      	lsls	r0, r2, #31
 80a22d6:	bf5c      	itt	pl
 80a22d8:	2201      	movpl	r2, #1
 80a22da:	601a      	strpl	r2, [r3, #0]
 80a22dc:	4b22      	ldr	r3, [pc, #136]	; (80a2368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a22de:	681a      	ldr	r2, [r3, #0]
 80a22e0:	07d1      	lsls	r1, r2, #31
 80a22e2:	bf5c      	itt	pl
 80a22e4:	2201      	movpl	r2, #1
 80a22e6:	601a      	strpl	r2, [r3, #0]
 80a22e8:	4b20      	ldr	r3, [pc, #128]	; (80a236c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a22ea:	681a      	ldr	r2, [r3, #0]
 80a22ec:	07d2      	lsls	r2, r2, #31
 80a22ee:	bf5c      	itt	pl
 80a22f0:	2201      	movpl	r2, #1
 80a22f2:	601a      	strpl	r2, [r3, #0]
 80a22f4:	4b1e      	ldr	r3, [pc, #120]	; (80a2370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a22f6:	681a      	ldr	r2, [r3, #0]
 80a22f8:	07d0      	lsls	r0, r2, #31
 80a22fa:	bf5c      	itt	pl
 80a22fc:	2201      	movpl	r2, #1
 80a22fe:	601a      	strpl	r2, [r3, #0]
 80a2300:	4b1c      	ldr	r3, [pc, #112]	; (80a2374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2302:	681a      	ldr	r2, [r3, #0]
 80a2304:	07d1      	lsls	r1, r2, #31
 80a2306:	bf5c      	itt	pl
 80a2308:	2201      	movpl	r2, #1
 80a230a:	601a      	strpl	r2, [r3, #0]
 80a230c:	4b1a      	ldr	r3, [pc, #104]	; (80a2378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a230e:	681a      	ldr	r2, [r3, #0]
 80a2310:	07d2      	lsls	r2, r2, #31
 80a2312:	bf5c      	itt	pl
 80a2314:	2201      	movpl	r2, #1
 80a2316:	601a      	strpl	r2, [r3, #0]
 80a2318:	4b18      	ldr	r3, [pc, #96]	; (80a237c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a231a:	681a      	ldr	r2, [r3, #0]
 80a231c:	07d0      	lsls	r0, r2, #31
 80a231e:	bf5c      	itt	pl
 80a2320:	2201      	movpl	r2, #1
 80a2322:	601a      	strpl	r2, [r3, #0]
 80a2324:	4b16      	ldr	r3, [pc, #88]	; (80a2380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2326:	681a      	ldr	r2, [r3, #0]
 80a2328:	07d1      	lsls	r1, r2, #31
 80a232a:	bf5c      	itt	pl
 80a232c:	2201      	movpl	r2, #1
 80a232e:	601a      	strpl	r2, [r3, #0]
 80a2330:	4b14      	ldr	r3, [pc, #80]	; (80a2384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2332:	681a      	ldr	r2, [r3, #0]
 80a2334:	07d2      	lsls	r2, r2, #31
 80a2336:	bf5c      	itt	pl
 80a2338:	2201      	movpl	r2, #1
 80a233a:	601a      	strpl	r2, [r3, #0]
 80a233c:	4b12      	ldr	r3, [pc, #72]	; (80a2388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a233e:	681a      	ldr	r2, [r3, #0]
 80a2340:	07d0      	lsls	r0, r2, #31
 80a2342:	bf5c      	itt	pl
 80a2344:	2201      	movpl	r2, #1
 80a2346:	601a      	strpl	r2, [r3, #0]
 80a2348:	4b10      	ldr	r3, [pc, #64]	; (80a238c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a234a:	681a      	ldr	r2, [r3, #0]
 80a234c:	07d1      	lsls	r1, r2, #31
 80a234e:	bf5c      	itt	pl
 80a2350:	2201      	movpl	r2, #1
 80a2352:	601a      	strpl	r2, [r3, #0]
 80a2354:	4b0e      	ldr	r3, [pc, #56]	; (80a2390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2356:	681a      	ldr	r2, [r3, #0]
 80a2358:	07d2      	lsls	r2, r2, #31
 80a235a:	bf5c      	itt	pl
 80a235c:	2201      	movpl	r2, #1
 80a235e:	601a      	strpl	r2, [r3, #0]
 80a2360:	4770      	bx	lr
 80a2362:	bf00      	nop
 80a2364:	200008fc 	.word	0x200008fc
 80a2368:	200008f8 	.word	0x200008f8
 80a236c:	200008f4 	.word	0x200008f4
 80a2370:	200008f0 	.word	0x200008f0
 80a2374:	200008ec 	.word	0x200008ec
 80a2378:	200008e8 	.word	0x200008e8
 80a237c:	200008e4 	.word	0x200008e4
 80a2380:	200008e0 	.word	0x200008e0
 80a2384:	200008dc 	.word	0x200008dc
 80a2388:	200008d8 	.word	0x200008d8
 80a238c:	200008d4 	.word	0x200008d4
 80a2390:	200008d0 	.word	0x200008d0

080a2394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2394:	4b24      	ldr	r3, [pc, #144]	; (80a2428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2396:	681a      	ldr	r2, [r3, #0]
 80a2398:	07d0      	lsls	r0, r2, #31
 80a239a:	bf5c      	itt	pl
 80a239c:	2201      	movpl	r2, #1
 80a239e:	601a      	strpl	r2, [r3, #0]
 80a23a0:	4b22      	ldr	r3, [pc, #136]	; (80a242c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a23a2:	681a      	ldr	r2, [r3, #0]
 80a23a4:	07d1      	lsls	r1, r2, #31
 80a23a6:	bf5c      	itt	pl
 80a23a8:	2201      	movpl	r2, #1
 80a23aa:	601a      	strpl	r2, [r3, #0]
 80a23ac:	4b20      	ldr	r3, [pc, #128]	; (80a2430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a23ae:	681a      	ldr	r2, [r3, #0]
 80a23b0:	07d2      	lsls	r2, r2, #31
 80a23b2:	bf5c      	itt	pl
 80a23b4:	2201      	movpl	r2, #1
 80a23b6:	601a      	strpl	r2, [r3, #0]
 80a23b8:	4b1e      	ldr	r3, [pc, #120]	; (80a2434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a23ba:	681a      	ldr	r2, [r3, #0]
 80a23bc:	07d0      	lsls	r0, r2, #31
 80a23be:	bf5c      	itt	pl
 80a23c0:	2201      	movpl	r2, #1
 80a23c2:	601a      	strpl	r2, [r3, #0]
 80a23c4:	4b1c      	ldr	r3, [pc, #112]	; (80a2438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a23c6:	681a      	ldr	r2, [r3, #0]
 80a23c8:	07d1      	lsls	r1, r2, #31
 80a23ca:	bf5c      	itt	pl
 80a23cc:	2201      	movpl	r2, #1
 80a23ce:	601a      	strpl	r2, [r3, #0]
 80a23d0:	4b1a      	ldr	r3, [pc, #104]	; (80a243c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a23d2:	681a      	ldr	r2, [r3, #0]
 80a23d4:	07d2      	lsls	r2, r2, #31
 80a23d6:	bf5c      	itt	pl
 80a23d8:	2201      	movpl	r2, #1
 80a23da:	601a      	strpl	r2, [r3, #0]
 80a23dc:	4b18      	ldr	r3, [pc, #96]	; (80a2440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a23de:	681a      	ldr	r2, [r3, #0]
 80a23e0:	07d0      	lsls	r0, r2, #31
 80a23e2:	bf5c      	itt	pl
 80a23e4:	2201      	movpl	r2, #1
 80a23e6:	601a      	strpl	r2, [r3, #0]
 80a23e8:	4b16      	ldr	r3, [pc, #88]	; (80a2444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a23ea:	681a      	ldr	r2, [r3, #0]
 80a23ec:	07d1      	lsls	r1, r2, #31
 80a23ee:	bf5c      	itt	pl
 80a23f0:	2201      	movpl	r2, #1
 80a23f2:	601a      	strpl	r2, [r3, #0]
 80a23f4:	4b14      	ldr	r3, [pc, #80]	; (80a2448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a23f6:	681a      	ldr	r2, [r3, #0]
 80a23f8:	07d2      	lsls	r2, r2, #31
 80a23fa:	bf5c      	itt	pl
 80a23fc:	2201      	movpl	r2, #1
 80a23fe:	601a      	strpl	r2, [r3, #0]
 80a2400:	4b12      	ldr	r3, [pc, #72]	; (80a244c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2402:	681a      	ldr	r2, [r3, #0]
 80a2404:	07d0      	lsls	r0, r2, #31
 80a2406:	bf5c      	itt	pl
 80a2408:	2201      	movpl	r2, #1
 80a240a:	601a      	strpl	r2, [r3, #0]
 80a240c:	4b10      	ldr	r3, [pc, #64]	; (80a2450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a240e:	681a      	ldr	r2, [r3, #0]
 80a2410:	07d1      	lsls	r1, r2, #31
 80a2412:	bf5c      	itt	pl
 80a2414:	2201      	movpl	r2, #1
 80a2416:	601a      	strpl	r2, [r3, #0]
 80a2418:	4b0e      	ldr	r3, [pc, #56]	; (80a2454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a241a:	681a      	ldr	r2, [r3, #0]
 80a241c:	07d2      	lsls	r2, r2, #31
 80a241e:	bf5c      	itt	pl
 80a2420:	2201      	movpl	r2, #1
 80a2422:	601a      	strpl	r2, [r3, #0]
 80a2424:	4770      	bx	lr
 80a2426:	bf00      	nop
 80a2428:	2000092c 	.word	0x2000092c
 80a242c:	20000928 	.word	0x20000928
 80a2430:	20000924 	.word	0x20000924
 80a2434:	20000920 	.word	0x20000920
 80a2438:	2000091c 	.word	0x2000091c
 80a243c:	20000918 	.word	0x20000918
 80a2440:	20000914 	.word	0x20000914
 80a2444:	20000910 	.word	0x20000910
 80a2448:	2000090c 	.word	0x2000090c
 80a244c:	20000908 	.word	0x20000908
 80a2450:	20000904 	.word	0x20000904
 80a2454:	20000900 	.word	0x20000900

080a2458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2458:	4b18      	ldr	r3, [pc, #96]	; (80a24bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a245a:	681a      	ldr	r2, [r3, #0]
 80a245c:	07d1      	lsls	r1, r2, #31
 80a245e:	bf5c      	itt	pl
 80a2460:	2201      	movpl	r2, #1
 80a2462:	601a      	strpl	r2, [r3, #0]
 80a2464:	4b16      	ldr	r3, [pc, #88]	; (80a24c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2466:	681a      	ldr	r2, [r3, #0]
 80a2468:	07d2      	lsls	r2, r2, #31
 80a246a:	bf5c      	itt	pl
 80a246c:	2201      	movpl	r2, #1
 80a246e:	601a      	strpl	r2, [r3, #0]
 80a2470:	4b14      	ldr	r3, [pc, #80]	; (80a24c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2472:	681a      	ldr	r2, [r3, #0]
 80a2474:	07d0      	lsls	r0, r2, #31
 80a2476:	bf5c      	itt	pl
 80a2478:	2201      	movpl	r2, #1
 80a247a:	601a      	strpl	r2, [r3, #0]
 80a247c:	4b12      	ldr	r3, [pc, #72]	; (80a24c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a247e:	681a      	ldr	r2, [r3, #0]
 80a2480:	07d1      	lsls	r1, r2, #31
 80a2482:	bf5c      	itt	pl
 80a2484:	2201      	movpl	r2, #1
 80a2486:	601a      	strpl	r2, [r3, #0]
 80a2488:	4b10      	ldr	r3, [pc, #64]	; (80a24cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a248a:	681a      	ldr	r2, [r3, #0]
 80a248c:	07d2      	lsls	r2, r2, #31
 80a248e:	bf5c      	itt	pl
 80a2490:	2201      	movpl	r2, #1
 80a2492:	601a      	strpl	r2, [r3, #0]
 80a2494:	4b0e      	ldr	r3, [pc, #56]	; (80a24d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2496:	681a      	ldr	r2, [r3, #0]
 80a2498:	07d0      	lsls	r0, r2, #31
 80a249a:	bf5c      	itt	pl
 80a249c:	2201      	movpl	r2, #1
 80a249e:	601a      	strpl	r2, [r3, #0]
 80a24a0:	4b0c      	ldr	r3, [pc, #48]	; (80a24d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a24a2:	681a      	ldr	r2, [r3, #0]
 80a24a4:	07d1      	lsls	r1, r2, #31
 80a24a6:	bf5c      	itt	pl
 80a24a8:	2201      	movpl	r2, #1
 80a24aa:	601a      	strpl	r2, [r3, #0]
 80a24ac:	4b0a      	ldr	r3, [pc, #40]	; (80a24d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a24ae:	681a      	ldr	r2, [r3, #0]
 80a24b0:	07d2      	lsls	r2, r2, #31
 80a24b2:	bf5c      	itt	pl
 80a24b4:	2201      	movpl	r2, #1
 80a24b6:	601a      	strpl	r2, [r3, #0]
 80a24b8:	4770      	bx	lr
 80a24ba:	bf00      	nop
 80a24bc:	2000094c 	.word	0x2000094c
 80a24c0:	20000948 	.word	0x20000948
 80a24c4:	20000944 	.word	0x20000944
 80a24c8:	20000940 	.word	0x20000940
 80a24cc:	2000093c 	.word	0x2000093c
 80a24d0:	20000938 	.word	0x20000938
 80a24d4:	20000934 	.word	0x20000934
 80a24d8:	20000930 	.word	0x20000930

080a24dc <__aeabi_drsub>:
 80a24dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a24e0:	e002      	b.n	80a24e8 <__adddf3>
 80a24e2:	bf00      	nop

080a24e4 <__aeabi_dsub>:
 80a24e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a24e8 <__adddf3>:
 80a24e8:	b530      	push	{r4, r5, lr}
 80a24ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a24ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a24f2:	ea94 0f05 	teq	r4, r5
 80a24f6:	bf08      	it	eq
 80a24f8:	ea90 0f02 	teqeq	r0, r2
 80a24fc:	bf1f      	itttt	ne
 80a24fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2502:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a250a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a250e:	f000 80e2 	beq.w	80a26d6 <__adddf3+0x1ee>
 80a2512:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a251a:	bfb8      	it	lt
 80a251c:	426d      	neglt	r5, r5
 80a251e:	dd0c      	ble.n	80a253a <__adddf3+0x52>
 80a2520:	442c      	add	r4, r5
 80a2522:	ea80 0202 	eor.w	r2, r0, r2
 80a2526:	ea81 0303 	eor.w	r3, r1, r3
 80a252a:	ea82 0000 	eor.w	r0, r2, r0
 80a252e:	ea83 0101 	eor.w	r1, r3, r1
 80a2532:	ea80 0202 	eor.w	r2, r0, r2
 80a2536:	ea81 0303 	eor.w	r3, r1, r3
 80a253a:	2d36      	cmp	r5, #54	; 0x36
 80a253c:	bf88      	it	hi
 80a253e:	bd30      	pophi	{r4, r5, pc}
 80a2540:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2544:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2548:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a254c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2550:	d002      	beq.n	80a2558 <__adddf3+0x70>
 80a2552:	4240      	negs	r0, r0
 80a2554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2558:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a255c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2564:	d002      	beq.n	80a256c <__adddf3+0x84>
 80a2566:	4252      	negs	r2, r2
 80a2568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a256c:	ea94 0f05 	teq	r4, r5
 80a2570:	f000 80a7 	beq.w	80a26c2 <__adddf3+0x1da>
 80a2574:	f1a4 0401 	sub.w	r4, r4, #1
 80a2578:	f1d5 0e20 	rsbs	lr, r5, #32
 80a257c:	db0d      	blt.n	80a259a <__adddf3+0xb2>
 80a257e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2582:	fa22 f205 	lsr.w	r2, r2, r5
 80a2586:	1880      	adds	r0, r0, r2
 80a2588:	f141 0100 	adc.w	r1, r1, #0
 80a258c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2590:	1880      	adds	r0, r0, r2
 80a2592:	fa43 f305 	asr.w	r3, r3, r5
 80a2596:	4159      	adcs	r1, r3
 80a2598:	e00e      	b.n	80a25b8 <__adddf3+0xd0>
 80a259a:	f1a5 0520 	sub.w	r5, r5, #32
 80a259e:	f10e 0e20 	add.w	lr, lr, #32
 80a25a2:	2a01      	cmp	r2, #1
 80a25a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a25a8:	bf28      	it	cs
 80a25aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a25ae:	fa43 f305 	asr.w	r3, r3, r5
 80a25b2:	18c0      	adds	r0, r0, r3
 80a25b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a25b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a25bc:	d507      	bpl.n	80a25ce <__adddf3+0xe6>
 80a25be:	f04f 0e00 	mov.w	lr, #0
 80a25c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a25c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a25ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80a25ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a25d2:	d31b      	bcc.n	80a260c <__adddf3+0x124>
 80a25d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a25d8:	d30c      	bcc.n	80a25f4 <__adddf3+0x10c>
 80a25da:	0849      	lsrs	r1, r1, #1
 80a25dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a25e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a25e4:	f104 0401 	add.w	r4, r4, #1
 80a25e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a25ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a25f0:	f080 809a 	bcs.w	80a2728 <__adddf3+0x240>
 80a25f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a25f8:	bf08      	it	eq
 80a25fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a25fe:	f150 0000 	adcs.w	r0, r0, #0
 80a2602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2606:	ea41 0105 	orr.w	r1, r1, r5
 80a260a:	bd30      	pop	{r4, r5, pc}
 80a260c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2610:	4140      	adcs	r0, r0
 80a2612:	eb41 0101 	adc.w	r1, r1, r1
 80a2616:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a261a:	f1a4 0401 	sub.w	r4, r4, #1
 80a261e:	d1e9      	bne.n	80a25f4 <__adddf3+0x10c>
 80a2620:	f091 0f00 	teq	r1, #0
 80a2624:	bf04      	itt	eq
 80a2626:	4601      	moveq	r1, r0
 80a2628:	2000      	moveq	r0, #0
 80a262a:	fab1 f381 	clz	r3, r1
 80a262e:	bf08      	it	eq
 80a2630:	3320      	addeq	r3, #32
 80a2632:	f1a3 030b 	sub.w	r3, r3, #11
 80a2636:	f1b3 0220 	subs.w	r2, r3, #32
 80a263a:	da0c      	bge.n	80a2656 <__adddf3+0x16e>
 80a263c:	320c      	adds	r2, #12
 80a263e:	dd08      	ble.n	80a2652 <__adddf3+0x16a>
 80a2640:	f102 0c14 	add.w	ip, r2, #20
 80a2644:	f1c2 020c 	rsb	r2, r2, #12
 80a2648:	fa01 f00c 	lsl.w	r0, r1, ip
 80a264c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2650:	e00c      	b.n	80a266c <__adddf3+0x184>
 80a2652:	f102 0214 	add.w	r2, r2, #20
 80a2656:	bfd8      	it	le
 80a2658:	f1c2 0c20 	rsble	ip, r2, #32
 80a265c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2660:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2664:	bfdc      	itt	le
 80a2666:	ea41 010c 	orrle.w	r1, r1, ip
 80a266a:	4090      	lslle	r0, r2
 80a266c:	1ae4      	subs	r4, r4, r3
 80a266e:	bfa2      	ittt	ge
 80a2670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2674:	4329      	orrge	r1, r5
 80a2676:	bd30      	popge	{r4, r5, pc}
 80a2678:	ea6f 0404 	mvn.w	r4, r4
 80a267c:	3c1f      	subs	r4, #31
 80a267e:	da1c      	bge.n	80a26ba <__adddf3+0x1d2>
 80a2680:	340c      	adds	r4, #12
 80a2682:	dc0e      	bgt.n	80a26a2 <__adddf3+0x1ba>
 80a2684:	f104 0414 	add.w	r4, r4, #20
 80a2688:	f1c4 0220 	rsb	r2, r4, #32
 80a268c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2690:	fa01 f302 	lsl.w	r3, r1, r2
 80a2694:	ea40 0003 	orr.w	r0, r0, r3
 80a2698:	fa21 f304 	lsr.w	r3, r1, r4
 80a269c:	ea45 0103 	orr.w	r1, r5, r3
 80a26a0:	bd30      	pop	{r4, r5, pc}
 80a26a2:	f1c4 040c 	rsb	r4, r4, #12
 80a26a6:	f1c4 0220 	rsb	r2, r4, #32
 80a26aa:	fa20 f002 	lsr.w	r0, r0, r2
 80a26ae:	fa01 f304 	lsl.w	r3, r1, r4
 80a26b2:	ea40 0003 	orr.w	r0, r0, r3
 80a26b6:	4629      	mov	r1, r5
 80a26b8:	bd30      	pop	{r4, r5, pc}
 80a26ba:	fa21 f004 	lsr.w	r0, r1, r4
 80a26be:	4629      	mov	r1, r5
 80a26c0:	bd30      	pop	{r4, r5, pc}
 80a26c2:	f094 0f00 	teq	r4, #0
 80a26c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a26ca:	bf06      	itte	eq
 80a26cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a26d0:	3401      	addeq	r4, #1
 80a26d2:	3d01      	subne	r5, #1
 80a26d4:	e74e      	b.n	80a2574 <__adddf3+0x8c>
 80a26d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26da:	bf18      	it	ne
 80a26dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a26e0:	d029      	beq.n	80a2736 <__adddf3+0x24e>
 80a26e2:	ea94 0f05 	teq	r4, r5
 80a26e6:	bf08      	it	eq
 80a26e8:	ea90 0f02 	teqeq	r0, r2
 80a26ec:	d005      	beq.n	80a26fa <__adddf3+0x212>
 80a26ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80a26f2:	bf04      	itt	eq
 80a26f4:	4619      	moveq	r1, r3
 80a26f6:	4610      	moveq	r0, r2
 80a26f8:	bd30      	pop	{r4, r5, pc}
 80a26fa:	ea91 0f03 	teq	r1, r3
 80a26fe:	bf1e      	ittt	ne
 80a2700:	2100      	movne	r1, #0
 80a2702:	2000      	movne	r0, #0
 80a2704:	bd30      	popne	{r4, r5, pc}
 80a2706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a270a:	d105      	bne.n	80a2718 <__adddf3+0x230>
 80a270c:	0040      	lsls	r0, r0, #1
 80a270e:	4149      	adcs	r1, r1
 80a2710:	bf28      	it	cs
 80a2712:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2716:	bd30      	pop	{r4, r5, pc}
 80a2718:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a271c:	bf3c      	itt	cc
 80a271e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2722:	bd30      	popcc	{r4, r5, pc}
 80a2724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2728:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a272c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2730:	f04f 0000 	mov.w	r0, #0
 80a2734:	bd30      	pop	{r4, r5, pc}
 80a2736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a273a:	bf1a      	itte	ne
 80a273c:	4619      	movne	r1, r3
 80a273e:	4610      	movne	r0, r2
 80a2740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2744:	bf1c      	itt	ne
 80a2746:	460b      	movne	r3, r1
 80a2748:	4602      	movne	r2, r0
 80a274a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a274e:	bf06      	itte	eq
 80a2750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2754:	ea91 0f03 	teqeq	r1, r3
 80a2758:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a275c:	bd30      	pop	{r4, r5, pc}
 80a275e:	bf00      	nop

080a2760 <__aeabi_ui2d>:
 80a2760:	f090 0f00 	teq	r0, #0
 80a2764:	bf04      	itt	eq
 80a2766:	2100      	moveq	r1, #0
 80a2768:	4770      	bxeq	lr
 80a276a:	b530      	push	{r4, r5, lr}
 80a276c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2770:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2774:	f04f 0500 	mov.w	r5, #0
 80a2778:	f04f 0100 	mov.w	r1, #0
 80a277c:	e750      	b.n	80a2620 <__adddf3+0x138>
 80a277e:	bf00      	nop

080a2780 <__aeabi_i2d>:
 80a2780:	f090 0f00 	teq	r0, #0
 80a2784:	bf04      	itt	eq
 80a2786:	2100      	moveq	r1, #0
 80a2788:	4770      	bxeq	lr
 80a278a:	b530      	push	{r4, r5, lr}
 80a278c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2790:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2794:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2798:	bf48      	it	mi
 80a279a:	4240      	negmi	r0, r0
 80a279c:	f04f 0100 	mov.w	r1, #0
 80a27a0:	e73e      	b.n	80a2620 <__adddf3+0x138>
 80a27a2:	bf00      	nop

080a27a4 <__aeabi_f2d>:
 80a27a4:	0042      	lsls	r2, r0, #1
 80a27a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a27aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a27ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a27b2:	bf1f      	itttt	ne
 80a27b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a27b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a27bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a27c0:	4770      	bxne	lr
 80a27c2:	f092 0f00 	teq	r2, #0
 80a27c6:	bf14      	ite	ne
 80a27c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a27cc:	4770      	bxeq	lr
 80a27ce:	b530      	push	{r4, r5, lr}
 80a27d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a27d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a27dc:	e720      	b.n	80a2620 <__adddf3+0x138>
 80a27de:	bf00      	nop

080a27e0 <__aeabi_ul2d>:
 80a27e0:	ea50 0201 	orrs.w	r2, r0, r1
 80a27e4:	bf08      	it	eq
 80a27e6:	4770      	bxeq	lr
 80a27e8:	b530      	push	{r4, r5, lr}
 80a27ea:	f04f 0500 	mov.w	r5, #0
 80a27ee:	e00a      	b.n	80a2806 <__aeabi_l2d+0x16>

080a27f0 <__aeabi_l2d>:
 80a27f0:	ea50 0201 	orrs.w	r2, r0, r1
 80a27f4:	bf08      	it	eq
 80a27f6:	4770      	bxeq	lr
 80a27f8:	b530      	push	{r4, r5, lr}
 80a27fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a27fe:	d502      	bpl.n	80a2806 <__aeabi_l2d+0x16>
 80a2800:	4240      	negs	r0, r0
 80a2802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a280a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a280e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2812:	f43f aedc 	beq.w	80a25ce <__adddf3+0xe6>
 80a2816:	f04f 0203 	mov.w	r2, #3
 80a281a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a281e:	bf18      	it	ne
 80a2820:	3203      	addne	r2, #3
 80a2822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2826:	bf18      	it	ne
 80a2828:	3203      	addne	r2, #3
 80a282a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a282e:	f1c2 0320 	rsb	r3, r2, #32
 80a2832:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2836:	fa20 f002 	lsr.w	r0, r0, r2
 80a283a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a283e:	ea40 000e 	orr.w	r0, r0, lr
 80a2842:	fa21 f102 	lsr.w	r1, r1, r2
 80a2846:	4414      	add	r4, r2
 80a2848:	e6c1      	b.n	80a25ce <__adddf3+0xe6>
 80a284a:	bf00      	nop

080a284c <__gedf2>:
 80a284c:	f04f 3cff 	mov.w	ip, #4294967295
 80a2850:	e006      	b.n	80a2860 <__cmpdf2+0x4>
 80a2852:	bf00      	nop

080a2854 <__ledf2>:
 80a2854:	f04f 0c01 	mov.w	ip, #1
 80a2858:	e002      	b.n	80a2860 <__cmpdf2+0x4>
 80a285a:	bf00      	nop

080a285c <__cmpdf2>:
 80a285c:	f04f 0c01 	mov.w	ip, #1
 80a2860:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a286c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2870:	bf18      	it	ne
 80a2872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2876:	d01b      	beq.n	80a28b0 <__cmpdf2+0x54>
 80a2878:	b001      	add	sp, #4
 80a287a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a287e:	bf0c      	ite	eq
 80a2880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2884:	ea91 0f03 	teqne	r1, r3
 80a2888:	bf02      	ittt	eq
 80a288a:	ea90 0f02 	teqeq	r0, r2
 80a288e:	2000      	moveq	r0, #0
 80a2890:	4770      	bxeq	lr
 80a2892:	f110 0f00 	cmn.w	r0, #0
 80a2896:	ea91 0f03 	teq	r1, r3
 80a289a:	bf58      	it	pl
 80a289c:	4299      	cmppl	r1, r3
 80a289e:	bf08      	it	eq
 80a28a0:	4290      	cmpeq	r0, r2
 80a28a2:	bf2c      	ite	cs
 80a28a4:	17d8      	asrcs	r0, r3, #31
 80a28a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a28aa:	f040 0001 	orr.w	r0, r0, #1
 80a28ae:	4770      	bx	lr
 80a28b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a28b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28b8:	d102      	bne.n	80a28c0 <__cmpdf2+0x64>
 80a28ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a28be:	d107      	bne.n	80a28d0 <__cmpdf2+0x74>
 80a28c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a28c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28c8:	d1d6      	bne.n	80a2878 <__cmpdf2+0x1c>
 80a28ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a28ce:	d0d3      	beq.n	80a2878 <__cmpdf2+0x1c>
 80a28d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a28d4:	4770      	bx	lr
 80a28d6:	bf00      	nop

080a28d8 <__aeabi_cdrcmple>:
 80a28d8:	4684      	mov	ip, r0
 80a28da:	4610      	mov	r0, r2
 80a28dc:	4662      	mov	r2, ip
 80a28de:	468c      	mov	ip, r1
 80a28e0:	4619      	mov	r1, r3
 80a28e2:	4663      	mov	r3, ip
 80a28e4:	e000      	b.n	80a28e8 <__aeabi_cdcmpeq>
 80a28e6:	bf00      	nop

080a28e8 <__aeabi_cdcmpeq>:
 80a28e8:	b501      	push	{r0, lr}
 80a28ea:	f7ff ffb7 	bl	80a285c <__cmpdf2>
 80a28ee:	2800      	cmp	r0, #0
 80a28f0:	bf48      	it	mi
 80a28f2:	f110 0f00 	cmnmi.w	r0, #0
 80a28f6:	bd01      	pop	{r0, pc}

080a28f8 <__aeabi_dcmpeq>:
 80a28f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28fc:	f7ff fff4 	bl	80a28e8 <__aeabi_cdcmpeq>
 80a2900:	bf0c      	ite	eq
 80a2902:	2001      	moveq	r0, #1
 80a2904:	2000      	movne	r0, #0
 80a2906:	f85d fb08 	ldr.w	pc, [sp], #8
 80a290a:	bf00      	nop

080a290c <__aeabi_dcmplt>:
 80a290c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2910:	f7ff ffea 	bl	80a28e8 <__aeabi_cdcmpeq>
 80a2914:	bf34      	ite	cc
 80a2916:	2001      	movcc	r0, #1
 80a2918:	2000      	movcs	r0, #0
 80a291a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a291e:	bf00      	nop

080a2920 <__aeabi_dcmple>:
 80a2920:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2924:	f7ff ffe0 	bl	80a28e8 <__aeabi_cdcmpeq>
 80a2928:	bf94      	ite	ls
 80a292a:	2001      	movls	r0, #1
 80a292c:	2000      	movhi	r0, #0
 80a292e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2932:	bf00      	nop

080a2934 <__aeabi_dcmpge>:
 80a2934:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2938:	f7ff ffce 	bl	80a28d8 <__aeabi_cdrcmple>
 80a293c:	bf94      	ite	ls
 80a293e:	2001      	movls	r0, #1
 80a2940:	2000      	movhi	r0, #0
 80a2942:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2946:	bf00      	nop

080a2948 <__aeabi_dcmpgt>:
 80a2948:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a294c:	f7ff ffc4 	bl	80a28d8 <__aeabi_cdrcmple>
 80a2950:	bf34      	ite	cc
 80a2952:	2001      	movcc	r0, #1
 80a2954:	2000      	movcs	r0, #0
 80a2956:	f85d fb08 	ldr.w	pc, [sp], #8
 80a295a:	bf00      	nop

080a295c <__aeabi_fmul>:
 80a295c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2964:	bf1e      	ittt	ne
 80a2966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a296a:	ea92 0f0c 	teqne	r2, ip
 80a296e:	ea93 0f0c 	teqne	r3, ip
 80a2972:	d06f      	beq.n	80a2a54 <__aeabi_fmul+0xf8>
 80a2974:	441a      	add	r2, r3
 80a2976:	ea80 0c01 	eor.w	ip, r0, r1
 80a297a:	0240      	lsls	r0, r0, #9
 80a297c:	bf18      	it	ne
 80a297e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2982:	d01e      	beq.n	80a29c2 <__aeabi_fmul+0x66>
 80a2984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2988:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a298c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2990:	fba0 3101 	umull	r3, r1, r0, r1
 80a2994:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2998:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a299c:	bf3e      	ittt	cc
 80a299e:	0049      	lslcc	r1, r1, #1
 80a29a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a29a4:	005b      	lslcc	r3, r3, #1
 80a29a6:	ea40 0001 	orr.w	r0, r0, r1
 80a29aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a29ae:	2afd      	cmp	r2, #253	; 0xfd
 80a29b0:	d81d      	bhi.n	80a29ee <__aeabi_fmul+0x92>
 80a29b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a29b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a29ba:	bf08      	it	eq
 80a29bc:	f020 0001 	biceq.w	r0, r0, #1
 80a29c0:	4770      	bx	lr
 80a29c2:	f090 0f00 	teq	r0, #0
 80a29c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a29ca:	bf08      	it	eq
 80a29cc:	0249      	lsleq	r1, r1, #9
 80a29ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a29d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a29d6:	3a7f      	subs	r2, #127	; 0x7f
 80a29d8:	bfc2      	ittt	gt
 80a29da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a29de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a29e2:	4770      	bxgt	lr
 80a29e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29e8:	f04f 0300 	mov.w	r3, #0
 80a29ec:	3a01      	subs	r2, #1
 80a29ee:	dc5d      	bgt.n	80a2aac <__aeabi_fmul+0x150>
 80a29f0:	f112 0f19 	cmn.w	r2, #25
 80a29f4:	bfdc      	itt	le
 80a29f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a29fa:	4770      	bxle	lr
 80a29fc:	f1c2 0200 	rsb	r2, r2, #0
 80a2a00:	0041      	lsls	r1, r0, #1
 80a2a02:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a06:	f1c2 0220 	rsb	r2, r2, #32
 80a2a0a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2a0e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2a12:	f140 0000 	adc.w	r0, r0, #0
 80a2a16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2a1a:	bf08      	it	eq
 80a2a1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2a20:	4770      	bx	lr
 80a2a22:	f092 0f00 	teq	r2, #0
 80a2a26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2a2a:	bf02      	ittt	eq
 80a2a2c:	0040      	lsleq	r0, r0, #1
 80a2a2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2a32:	3a01      	subeq	r2, #1
 80a2a34:	d0f9      	beq.n	80a2a2a <__aeabi_fmul+0xce>
 80a2a36:	ea40 000c 	orr.w	r0, r0, ip
 80a2a3a:	f093 0f00 	teq	r3, #0
 80a2a3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2a42:	bf02      	ittt	eq
 80a2a44:	0049      	lsleq	r1, r1, #1
 80a2a46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2a4a:	3b01      	subeq	r3, #1
 80a2a4c:	d0f9      	beq.n	80a2a42 <__aeabi_fmul+0xe6>
 80a2a4e:	ea41 010c 	orr.w	r1, r1, ip
 80a2a52:	e78f      	b.n	80a2974 <__aeabi_fmul+0x18>
 80a2a54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2a58:	ea92 0f0c 	teq	r2, ip
 80a2a5c:	bf18      	it	ne
 80a2a5e:	ea93 0f0c 	teqne	r3, ip
 80a2a62:	d00a      	beq.n	80a2a7a <__aeabi_fmul+0x11e>
 80a2a64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2a68:	bf18      	it	ne
 80a2a6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2a6e:	d1d8      	bne.n	80a2a22 <__aeabi_fmul+0xc6>
 80a2a70:	ea80 0001 	eor.w	r0, r0, r1
 80a2a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a78:	4770      	bx	lr
 80a2a7a:	f090 0f00 	teq	r0, #0
 80a2a7e:	bf17      	itett	ne
 80a2a80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2a84:	4608      	moveq	r0, r1
 80a2a86:	f091 0f00 	teqne	r1, #0
 80a2a8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2a8e:	d014      	beq.n	80a2aba <__aeabi_fmul+0x15e>
 80a2a90:	ea92 0f0c 	teq	r2, ip
 80a2a94:	d101      	bne.n	80a2a9a <__aeabi_fmul+0x13e>
 80a2a96:	0242      	lsls	r2, r0, #9
 80a2a98:	d10f      	bne.n	80a2aba <__aeabi_fmul+0x15e>
 80a2a9a:	ea93 0f0c 	teq	r3, ip
 80a2a9e:	d103      	bne.n	80a2aa8 <__aeabi_fmul+0x14c>
 80a2aa0:	024b      	lsls	r3, r1, #9
 80a2aa2:	bf18      	it	ne
 80a2aa4:	4608      	movne	r0, r1
 80a2aa6:	d108      	bne.n	80a2aba <__aeabi_fmul+0x15e>
 80a2aa8:	ea80 0001 	eor.w	r0, r0, r1
 80a2aac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ab8:	4770      	bx	lr
 80a2aba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2abe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2ac2:	4770      	bx	lr

080a2ac4 <__aeabi_fdiv>:
 80a2ac4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ac8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2acc:	bf1e      	ittt	ne
 80a2ace:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2ad2:	ea92 0f0c 	teqne	r2, ip
 80a2ad6:	ea93 0f0c 	teqne	r3, ip
 80a2ada:	d069      	beq.n	80a2bb0 <__aeabi_fdiv+0xec>
 80a2adc:	eba2 0203 	sub.w	r2, r2, r3
 80a2ae0:	ea80 0c01 	eor.w	ip, r0, r1
 80a2ae4:	0249      	lsls	r1, r1, #9
 80a2ae6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2aea:	d037      	beq.n	80a2b5c <__aeabi_fdiv+0x98>
 80a2aec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2af0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2af4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2af8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2afc:	428b      	cmp	r3, r1
 80a2afe:	bf38      	it	cc
 80a2b00:	005b      	lslcc	r3, r3, #1
 80a2b02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2b06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2b0a:	428b      	cmp	r3, r1
 80a2b0c:	bf24      	itt	cs
 80a2b0e:	1a5b      	subcs	r3, r3, r1
 80a2b10:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2b14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2b18:	bf24      	itt	cs
 80a2b1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2b1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2b22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2b26:	bf24      	itt	cs
 80a2b28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2b2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2b30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2b34:	bf24      	itt	cs
 80a2b36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2b3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2b3e:	011b      	lsls	r3, r3, #4
 80a2b40:	bf18      	it	ne
 80a2b42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2b46:	d1e0      	bne.n	80a2b0a <__aeabi_fdiv+0x46>
 80a2b48:	2afd      	cmp	r2, #253	; 0xfd
 80a2b4a:	f63f af50 	bhi.w	80a29ee <__aeabi_fmul+0x92>
 80a2b4e:	428b      	cmp	r3, r1
 80a2b50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2b54:	bf08      	it	eq
 80a2b56:	f020 0001 	biceq.w	r0, r0, #1
 80a2b5a:	4770      	bx	lr
 80a2b5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2b60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2b64:	327f      	adds	r2, #127	; 0x7f
 80a2b66:	bfc2      	ittt	gt
 80a2b68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2b6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2b70:	4770      	bxgt	lr
 80a2b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b76:	f04f 0300 	mov.w	r3, #0
 80a2b7a:	3a01      	subs	r2, #1
 80a2b7c:	e737      	b.n	80a29ee <__aeabi_fmul+0x92>
 80a2b7e:	f092 0f00 	teq	r2, #0
 80a2b82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b86:	bf02      	ittt	eq
 80a2b88:	0040      	lsleq	r0, r0, #1
 80a2b8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b8e:	3a01      	subeq	r2, #1
 80a2b90:	d0f9      	beq.n	80a2b86 <__aeabi_fdiv+0xc2>
 80a2b92:	ea40 000c 	orr.w	r0, r0, ip
 80a2b96:	f093 0f00 	teq	r3, #0
 80a2b9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b9e:	bf02      	ittt	eq
 80a2ba0:	0049      	lsleq	r1, r1, #1
 80a2ba2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2ba6:	3b01      	subeq	r3, #1
 80a2ba8:	d0f9      	beq.n	80a2b9e <__aeabi_fdiv+0xda>
 80a2baa:	ea41 010c 	orr.w	r1, r1, ip
 80a2bae:	e795      	b.n	80a2adc <__aeabi_fdiv+0x18>
 80a2bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2bb4:	ea92 0f0c 	teq	r2, ip
 80a2bb8:	d108      	bne.n	80a2bcc <__aeabi_fdiv+0x108>
 80a2bba:	0242      	lsls	r2, r0, #9
 80a2bbc:	f47f af7d 	bne.w	80a2aba <__aeabi_fmul+0x15e>
 80a2bc0:	ea93 0f0c 	teq	r3, ip
 80a2bc4:	f47f af70 	bne.w	80a2aa8 <__aeabi_fmul+0x14c>
 80a2bc8:	4608      	mov	r0, r1
 80a2bca:	e776      	b.n	80a2aba <__aeabi_fmul+0x15e>
 80a2bcc:	ea93 0f0c 	teq	r3, ip
 80a2bd0:	d104      	bne.n	80a2bdc <__aeabi_fdiv+0x118>
 80a2bd2:	024b      	lsls	r3, r1, #9
 80a2bd4:	f43f af4c 	beq.w	80a2a70 <__aeabi_fmul+0x114>
 80a2bd8:	4608      	mov	r0, r1
 80a2bda:	e76e      	b.n	80a2aba <__aeabi_fmul+0x15e>
 80a2bdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2be0:	bf18      	it	ne
 80a2be2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2be6:	d1ca      	bne.n	80a2b7e <__aeabi_fdiv+0xba>
 80a2be8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2bec:	f47f af5c 	bne.w	80a2aa8 <__aeabi_fmul+0x14c>
 80a2bf0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2bf4:	f47f af3c 	bne.w	80a2a70 <__aeabi_fmul+0x114>
 80a2bf8:	e75f      	b.n	80a2aba <__aeabi_fmul+0x15e>
 80a2bfa:	bf00      	nop

080a2bfc <__gesf2>:
 80a2bfc:	f04f 3cff 	mov.w	ip, #4294967295
 80a2c00:	e006      	b.n	80a2c10 <__cmpsf2+0x4>
 80a2c02:	bf00      	nop

080a2c04 <__lesf2>:
 80a2c04:	f04f 0c01 	mov.w	ip, #1
 80a2c08:	e002      	b.n	80a2c10 <__cmpsf2+0x4>
 80a2c0a:	bf00      	nop

080a2c0c <__cmpsf2>:
 80a2c0c:	f04f 0c01 	mov.w	ip, #1
 80a2c10:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2c14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2c20:	bf18      	it	ne
 80a2c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2c26:	d011      	beq.n	80a2c4c <__cmpsf2+0x40>
 80a2c28:	b001      	add	sp, #4
 80a2c2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2c2e:	bf18      	it	ne
 80a2c30:	ea90 0f01 	teqne	r0, r1
 80a2c34:	bf58      	it	pl
 80a2c36:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2c3a:	bf88      	it	hi
 80a2c3c:	17c8      	asrhi	r0, r1, #31
 80a2c3e:	bf38      	it	cc
 80a2c40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2c44:	bf18      	it	ne
 80a2c46:	f040 0001 	orrne.w	r0, r0, #1
 80a2c4a:	4770      	bx	lr
 80a2c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2c50:	d102      	bne.n	80a2c58 <__cmpsf2+0x4c>
 80a2c52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2c56:	d105      	bne.n	80a2c64 <__cmpsf2+0x58>
 80a2c58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2c5c:	d1e4      	bne.n	80a2c28 <__cmpsf2+0x1c>
 80a2c5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2c62:	d0e1      	beq.n	80a2c28 <__cmpsf2+0x1c>
 80a2c64:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2c68:	4770      	bx	lr
 80a2c6a:	bf00      	nop

080a2c6c <__aeabi_cfrcmple>:
 80a2c6c:	4684      	mov	ip, r0
 80a2c6e:	4608      	mov	r0, r1
 80a2c70:	4661      	mov	r1, ip
 80a2c72:	e7ff      	b.n	80a2c74 <__aeabi_cfcmpeq>

080a2c74 <__aeabi_cfcmpeq>:
 80a2c74:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2c76:	f7ff ffc9 	bl	80a2c0c <__cmpsf2>
 80a2c7a:	2800      	cmp	r0, #0
 80a2c7c:	bf48      	it	mi
 80a2c7e:	f110 0f00 	cmnmi.w	r0, #0
 80a2c82:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2c84 <__aeabi_fcmpeq>:
 80a2c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c88:	f7ff fff4 	bl	80a2c74 <__aeabi_cfcmpeq>
 80a2c8c:	bf0c      	ite	eq
 80a2c8e:	2001      	moveq	r0, #1
 80a2c90:	2000      	movne	r0, #0
 80a2c92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c96:	bf00      	nop

080a2c98 <__aeabi_fcmplt>:
 80a2c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c9c:	f7ff ffea 	bl	80a2c74 <__aeabi_cfcmpeq>
 80a2ca0:	bf34      	ite	cc
 80a2ca2:	2001      	movcc	r0, #1
 80a2ca4:	2000      	movcs	r0, #0
 80a2ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2caa:	bf00      	nop

080a2cac <__aeabi_fcmple>:
 80a2cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cb0:	f7ff ffe0 	bl	80a2c74 <__aeabi_cfcmpeq>
 80a2cb4:	bf94      	ite	ls
 80a2cb6:	2001      	movls	r0, #1
 80a2cb8:	2000      	movhi	r0, #0
 80a2cba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cbe:	bf00      	nop

080a2cc0 <__aeabi_fcmpge>:
 80a2cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cc4:	f7ff ffd2 	bl	80a2c6c <__aeabi_cfrcmple>
 80a2cc8:	bf94      	ite	ls
 80a2cca:	2001      	movls	r0, #1
 80a2ccc:	2000      	movhi	r0, #0
 80a2cce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cd2:	bf00      	nop

080a2cd4 <__aeabi_fcmpgt>:
 80a2cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cd8:	f7ff ffc8 	bl	80a2c6c <__aeabi_cfrcmple>
 80a2cdc:	bf34      	ite	cc
 80a2cde:	2001      	movcc	r0, #1
 80a2ce0:	2000      	movcs	r0, #0
 80a2ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ce6:	bf00      	nop

080a2ce8 <__aeabi_f2uiz>:
 80a2ce8:	0042      	lsls	r2, r0, #1
 80a2cea:	d20e      	bcs.n	80a2d0a <__aeabi_f2uiz+0x22>
 80a2cec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2cf0:	d30b      	bcc.n	80a2d0a <__aeabi_f2uiz+0x22>
 80a2cf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2cf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2cfa:	d409      	bmi.n	80a2d10 <__aeabi_f2uiz+0x28>
 80a2cfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d04:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d08:	4770      	bx	lr
 80a2d0a:	f04f 0000 	mov.w	r0, #0
 80a2d0e:	4770      	bx	lr
 80a2d10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2d14:	d101      	bne.n	80a2d1a <__aeabi_f2uiz+0x32>
 80a2d16:	0242      	lsls	r2, r0, #9
 80a2d18:	d102      	bne.n	80a2d20 <__aeabi_f2uiz+0x38>
 80a2d1a:	f04f 30ff 	mov.w	r0, #4294967295
 80a2d1e:	4770      	bx	lr
 80a2d20:	f04f 0000 	mov.w	r0, #0
 80a2d24:	4770      	bx	lr
 80a2d26:	bf00      	nop

080a2d28 <__cxa_atexit>:
 80a2d28:	b510      	push	{r4, lr}
 80a2d2a:	4c05      	ldr	r4, [pc, #20]	; (80a2d40 <__cxa_atexit+0x18>)
 80a2d2c:	4613      	mov	r3, r2
 80a2d2e:	b12c      	cbz	r4, 80a2d3c <__cxa_atexit+0x14>
 80a2d30:	460a      	mov	r2, r1
 80a2d32:	4601      	mov	r1, r0
 80a2d34:	2002      	movs	r0, #2
 80a2d36:	f3af 8000 	nop.w
 80a2d3a:	bd10      	pop	{r4, pc}
 80a2d3c:	4620      	mov	r0, r4
 80a2d3e:	bd10      	pop	{r4, pc}
 80a2d40:	00000000 	.word	0x00000000

080a2d44 <memcpy>:
 80a2d44:	b510      	push	{r4, lr}
 80a2d46:	1e43      	subs	r3, r0, #1
 80a2d48:	440a      	add	r2, r1
 80a2d4a:	4291      	cmp	r1, r2
 80a2d4c:	d004      	beq.n	80a2d58 <memcpy+0x14>
 80a2d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2d56:	e7f8      	b.n	80a2d4a <memcpy+0x6>
 80a2d58:	bd10      	pop	{r4, pc}

080a2d5a <memset>:
 80a2d5a:	4603      	mov	r3, r0
 80a2d5c:	4402      	add	r2, r0
 80a2d5e:	4293      	cmp	r3, r2
 80a2d60:	d002      	beq.n	80a2d68 <memset+0xe>
 80a2d62:	f803 1b01 	strb.w	r1, [r3], #1
 80a2d66:	e7fa      	b.n	80a2d5e <memset+0x4>
 80a2d68:	4770      	bx	lr

080a2d6a <strlen>:
 80a2d6a:	4603      	mov	r3, r0
 80a2d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d70:	2a00      	cmp	r2, #0
 80a2d72:	d1fb      	bne.n	80a2d6c <strlen+0x2>
 80a2d74:	1a18      	subs	r0, r3, r0
 80a2d76:	3801      	subs	r0, #1
 80a2d78:	4770      	bx	lr

080a2d7a <link_code_end>:
	...

080a2d7c <dynalib_user>:
 80a2d7c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2d8c:	0000 0000                                   ....

080a2d90 <_ZTV5Timer>:
	...
 80a2d98:	01f9 080a 0239 080a 0191 080a 6573 7574     ....9.......setu
 80a2da8:	5370 6375 6563 7373 253d 0064 6157 7469     pSuccess=%d.Wait
 80a2db8:	6e69 2067 6f66 2072 7453 7261 0074 7453     ing for Start.St
 80a2dc8:	7261 6974 676e 6920 206e 2035 6573 6f63     arting in 5 seco
 80a2dd8:	646e 2e73 2e2e 4700 214f 0000               nds....GO!..

080a2de4 <_ZTV9LIS3DHI2C>:
	...
 80a2dec:	12bd 080a 12bf 080a 1313 080a 12cb 080a     ................
 80a2dfc:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a2e0c:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a2e1c:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a2e2c:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a2e3c:	6e69 0067                                   ing.

080a2e40 <_ZTV8SPIClass>:
	...
 80a2e48:	18d5 080a 18d7 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a2e58:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a2e68:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a2e78:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a2e88:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a2e98:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a2ea8:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a2eb8:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a2ec8:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a2ed8:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a2ee8:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a2ef8:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a2f08:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a2f18:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a2f28:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a2f38:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a2f48:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a2f58:	0065 0000                                   e...

080a2f5c <_ZTV9IPAddress>:
	...
 80a2f64:	1ccf 080a 1cc1 080a 1cc3 080a               ............

080a2f70 <_ZTV9USBSerial>:
	...
 80a2f78:	1d39 080a 1d7d 080a 1d57 080a 19d7 080a     9...}...W.......
 80a2f88:	1d51 080a 1d3b 080a 1d43 080a 1d77 080a     Q...;...C...w...
 80a2f98:	1d4b 080a 1d35 080a                         K...5...

080a2fa0 <_ZTV11USARTSerial>:
	...
 80a2fa8:	1ef9 080a 1f1d 080a 1f29 080a 19d7 080a     ........).......
 80a2fb8:	1f05 080a 1f11 080a 1f0b 080a 1f17 080a     ................
 80a2fc8:	1efb 080a 1eff 080a                         ........

080a2fd0 <_ZTV7TwoWire>:
	...
 80a2fd8:	1fcd 080a 2017 080a 1fef 080a 1fcf 080a     ..... ..........
 80a2fe8:	1ff7 080a 1fff 080a 2007 080a 200f 080a     ......... ... ..

080a2ff8 <_ZTVN5spark9WiFiClassE>:
	...
 80a3000:	209f 080a                                   . ..

080a3004 <link_const_variable_data_end>:
 80a3004:	080a0639 	.word	0x080a0639
 80a3008:	080a12b9 	.word	0x080a12b9
 80a300c:	080a150d 	.word	0x080a150d
 80a3010:	080a19d1 	.word	0x080a19d1
 80a3014:	080a1b21 	.word	0x080a1b21
 80a3018:	080a1b31 	.word	0x080a1b31
 80a301c:	080a20a9 	.word	0x080a20a9
 80a3020:	080a218d 	.word	0x080a218d
 80a3024:	080a21d1 	.word	0x080a21d1
 80a3028:	080a224d 	.word	0x080a224d
 80a302c:	080a22d1 	.word	0x080a22d1
 80a3030:	080a2395 	.word	0x080a2395
 80a3034:	080a2459 	.word	0x080a2459

080a3038 <link_constructors_end>:
	...
